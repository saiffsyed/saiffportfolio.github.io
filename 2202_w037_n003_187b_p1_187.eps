%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 2/8/2022
%%BoundingBox: 0 0 781 340
%%HiResBoundingBox: 0 0 780.8915 339.0509
%%CropBox: 0 0 780.8915 339.0509
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 56 8%%BeginData: 11631 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD09FFAFAFA9FD0BFFA9FD4DFFA9FFA8FFA9FFA8FFA9FFA8FFA9FF
%A8FD15FFAF84A9A8FFA9AFA8FFA9AFA8FFAFAFA9FD4BFFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FD14FFA9FD0DFFAFFD4DFFA8FFA9FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FD13FFAFA8FD59FFA8FFA8A8A8FFA8FFA8FFA8FF7EA8
%A8FFA8FD14FFAFFD09FFA8CBA8CBA8A9A8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8FD3BFFA8FFA8FFA8FFA8FFA8FFA9A9A8FFA8FFA8FD13FFAFA9FD07
%FF77777677767D77777677767776777677767776777677767776CBFD27FF
%A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A87EA8A8FFA8FFA8
%FFA8FFA8FD14FFAFFD07FFCB7D77A177A1777D777D77A1777D77A1777D77
%A1777D77A17777A8FD27FFA2A8A8A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A8
%A8A2A8A8A8A2FFA9FFA8FFA8FFA8FFA9FD14FFA8FFA8FFA9FFA9FF777D77
%7D777D767D7677767D767776A87D77767D7677767D76A8FD10FF53537EA9
%A8FD12FFA8A2A8A2A87EA859A87DA8A2A87EA8A2A87EA8A2A87EA8A2A8A8
%FFA8FFA8FFA8FFA8FD1CFFCBA177A1777D77A177A177A177A177A1A8CB77
%A177A177A1777DA8FD0FFF2E292F855AA1CAFD11FFA8A8A8CBA8FFA8A9A8
%A8A2A8A8A97DA8A8A9A8A8A8A9A8A8A8FFA9FFA8FFA9FFA8FFCBFD1CFF77
%77767D7777767D767776A1A8A176CBA877767D7777767D76A8FD0EFFC9A0
%28537E7E76A1FD11FFA87DA87EA8A8A87DA8A2A2A2A8A8A8A2A87EA8A2A8
%A2A8A2A8A8FFA8FFA8FFA8FFA8FD1CFFA8A1777D77A1777D77A17D7D7DFF
%A17DA8CB777D77A1777D777DA8FD0DFFCFC8C8A0537E777D77FD11FFA8A8
%A2A2A2A87DA8A8CBA2A8A8A2A2CBA8A87DA8A8A8A2A8A8FFA8FFA9FFA8FF
%A9FD1EFF767D7677767776777DFF76A1A8A276A8A27D7677767D767776A8
%FD0DFFCFA0C8C2C2767D7777A8FD0FFFA8A8A2A87DA27DA87EA87E7EA1A2
%7EA8A8A8A2A8A8A8A2A87EA8FD25FFCAA177A177A17DA177A8A9A17DFFA1
%7DA8CB77A17DA177A177A1A8FD05FFA8A8A8FD06FFC9C2C8C2C8C2A177FD
%11FFA8A8A8A9A8A8A8A9A8A87EA9A8A8A2CBA2A8A2A9FD05A8FD19FFA953
%2E7DFD09FF767D777777FFA177A1FF77A1A8A276A8A8777DFF777D777776
%CAFD05FF52F826F8FD05FFC9C8C2C8A0C8C1CAFD0CFF522720A8FFA8A2A8
%A2A8A2A8A2A8A2A87EA8A2A2A2A8A8A27DA8A8A87EA8FD0BFF5252FD0CFF
%5300F852FD08FFCB7D77A177A1A8A876A8A8A17DFF7D7DA8A876A8A9A177
%A1777DA8FD05FF7D20F8F852FD05FFC9C8C2C8C2CAFD0CFF7DF84B99A1FF
%FD04A8A2A8A8A8A2A8A8A8A2A8A2FD05A87DA97EA8A8FD08FFA8F827F852
%FD0BFF8453276F4CA9FD08FF7677767777FF7D77A2AF76A1A8A176A9A877
%7DFF7777767D76A8FD05FFC96F27F852FD06FFA8CAC9CFFD0EFF20996FC9
%FFA87EA8A2A87EA8A2A87EA8A2A87EA87D7E7EA8A2A87EA87EA8A8FD07FF
%27FD04F8FD0BFFA92FC3757D84FD08FFA177A177A1A8A876A8A8A17DFF7D
%A1A8A876A8A8A177A1777DA8FD04FFC36FC2C29AA8FD18FFC3BCC2C3FFFD
%10A87EA9FD07A8FD07FFA8754B5127207DFD0AFFA859537652A9FD08FF77
%77767D77A1777D777D767D7D7D76A1777D77A17777767D76A8FFFFFFCA99
%9A999AC9FD19FFA76F99C3FFA87EA8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2
%A8A2A8A2A8A2A8FD07FFA84B767575F8A8FD0AFFA9767D53777DFD07FFA8
%7D777777A9A8A9A8CBA8CBA8CBA8CBA8CBA8A97D7D777D7677A8FFFFFFC9
%C2A17699A8A9FD0BFFA8A87DA8FD07FFCAC8C2759A9ACFFD20FF7DF84B75
%20F8F8A8FD07FFA8A27677527D76A0A1FD07FFA1A17DA27EFFA8A9A8FFA8
%FFA8FFA8A9A8FFA8A87DA27DA17DFFFFFFA8FFA77E597E365A84FD09FF7D
%F8F8207DFD05FFCFC99FA0A0C2BBC29FC9CFFD1EFF7E2F7D7D855A2852FD
%07FFA277A177A1C2C8C1A1A2FD09FF7EFFA8FFA8FFA8A8A2CBA9FFA8FFA8
%FFA2FD07FFA96185FF846160615A61AFFD08FF7DF84B6FA8FD05FFCFC2A1
%A0C8C27DA0C9C2C9A8FD1CFFA985A9A9AFFD0485A9FD05FFA2767D767D5A
%7E7E7EA07777A8A8FFFFFFA1CA7EA9A8FFA8FFA27D76775AA9A8A9A8FFA8
%A8A8FD06FF8436605A605A605A6036A9FD08FF7D264B6F76FD05FFA07DA0
%C8C2A12F7DA0C8A0A0C2C9C9CACAFD0CFFA8A7CAA8FD05FFA9855A855A85
%7E857E855A85A9FD04FF777D77A17D85545A7E7E77A1A1A177A1A19A75A1
%CAFFA8FFA87D76A17D857EAFA8FFA8FFA8FD07FF5A615A615A615A615A60
%84FD09FF769A4BA1FD04FFCAA0A0C8C2C87C547DC3C2C8C2C8C2C8C2C2CA
%FD0BFFA14B4B75A8FFA9AF84857EA97E8585857E857F857E85AFFFFF7D77
%76A1A1A87E5A285A5353767D7677769B4B756FCAA8A9A8A87677767E7E7D
%7EFFA8A9A8A8FD06FF845A5A6036605A5A2F605A84AFFD07FFAFCA6F4BA8
%FD04FFC9C1C8A0C8C27D29A1A0C89FC8A0C8A0C299999AFD0BFF4B6F6FAF
%7E7F5A857E857E855A857E855AA984855AA9FFFFA277A177A177A1777D53
%5453A177A177A176A076A1CAFFA8FFA27D77A177A176CAA9FFA8FFA8FD06
%FFA175A1848B5A605A85606184FD06FFA8535A53524C7E84FFFFFFC8C8C2
%C9C2C853547DC9A0C9C2C8C2C8C2C299C2CFFD0BFFA1A8AF857F857E857F
%FD05857E85A9857E8585FFFFA1777777767D7777767D767D777D767776A8
%CFCACAFFA8A9A8A87677767D767DA8FFA8CBA8A8FD06FF99C2BCFF84605A
%605A603685FD05FF7E29532F53292F295353FFFFC9C2C8C2C8A0532F7DC2
%CACFFFCACFCAFFCACACAFD0EFFA95A857E855A855A535AA9858584857E85
%5AA9FFFFFF7D7D777D77A1777D76C39A9A7DCBA8FD05FFA8FFA8FFA8A877
%7D76A1A8FFA8FFA8A9A8FD06FFC299C2FFA95A615A615A61AFFD04FFA82F
%54535353542F54535353A9C9C8C8C8A0C8775376C8CAFD18FFA97E857F85
%5377282F7EA2A8AF5A857E85A9FD04FF7D7D7777767D77A19AA04BA0FD08
%FFA8FFA8A9A8A8A1A8A8FFA8A9A8FFA8A8FD06FFCAC9A1FF845A5A605A5A
%84FD05FF2F532F532F532F532F5352532F5A77A152536F6F2675C1CAFD1A
%FFA8A95252282F28526F9AA8855A85A8FD06FFA8A27DA27DA19AC29AA1CA
%FD07FFA8FFA8FFA8FFA9FFA8FFA8FFA8FFA8A9A8FD08FFAF84615A616061
%5AFD05FF7E53537D5354535A2F54537E84857E857F857E7E7576A0C8C9FD
%1CFF5328532E764B7699A8A9A9AFFD07FFA2767D77A17DA17D7DA1FD09FF
%A8FFA8FFA8FFA8A9A8FFA8A9A8FFA8A8FD08FFC9C8A0A77D7D7CC9CFFFFF
%FFA853537D52532F5329532F537EA95A857E857E857D9A767D76A8FD1CFF
%A95328534C756F767CC9CAFD08FF7DA1777D768585857DA8FD08FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD08FFC9A0C8C2C8C2A0A0FD04FFA82F
%54535453545353529A76A97E8585FF7E857F7D77A1777D77FD1DFFCA5228
%53525328A0C1CFFD08FFA8537E7D7E5A855A7FA8FD09FFA8A87E537EFFA8
%A9A8A9A8FFA8FF7EA9FD07FFCFC1A07CC8A0C8A0C2C9FFFFFF7E2F2F532F
%532F5329766FA185855A8584855A7E767776A17677A2FD1CFFCA9F520629
%52A0C2C8C9FD08FF85857E857F855A857EAFFD08FFA9A8A8A82FA984547E
%FFA8FFA8FFA8A9A8FD07FFC9C8C2A1C2C8C2C9C2CFFFFFFFA92F5453542F
%54532F4B9AA2855A7E5A7E5A7F7DA177A1A0A177A2FD1CFFC9C8A07D7CC8
%C2C9C2C9FD08FF855A857E855A7F7E7F84FD09FF7EA97D53A88429A8A85A
%7EFFA8FF7EFD07FFCAC8C2C8A0C8C2C8A0C8C9FFFFFFA87E537E537E537E
%53524B5252524CFD0452FD047DA2777776FD1CFFC9C2C8C2C8C2C8A0C8C2
%FD08FF85857E857F855A857EA9FD08FFA8A8A87E2FFF7E53A8A9297EA8FF
%A8A8A8FD06FFCFC2C8C2A0C2C8C2C8C2CAFD04FFFD04A884847EA884A97E
%A884A9A8FFA2A87DA27EA87DA17777A8FD1BFFC2C8C2C8C2C8C2C8C2C9FD
%07FFA9855A855A855A7E5A857EFD07FFA9FF7EA85353A87E29A87D2F7DA8
%A8FF7EFD07FFC8C2A0C8A0C2A0C8A0C2A0FFFFFFA8A87EFF7E605A603660
%5A5A36605A8584777677767D7D77767D76A1FD1AFFCFC89FC8A0C8A0C8A0
%C2A0FD08FF7F857E857F855A857F85FD08FFA8A9A8A87EA97EA884A87EA8
%A8FFA8A8FD07FFC8C2C9C2A1C2C9C2C8C2C9FD04FFA8A8A8855A615A6160
%615A5A5A615A617EA177A17DA277A1777D77FD1BFFC2C8C2C8C2C9C2C8C2
%C9FD07FFA9857E855A857E7E7E857EFD07FFA9A9A8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA2FD06FFCFC2C8A0C8A0C8A0C8C2C2A6FFFFFFA8FFA2FF84605A
%605A605A605A5A5A605A61597776A17D77767D7777A8FD19FFCAC8A0C8C2
%C8A0C8C2C8A0FD08FF7E857F857E857E857E85FD08FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8A8FD06FFC8C8C2C8A0A1C2C8C2C8C2C9FD04FFA8A8A8FF
%606160615A615A615A605A615A84777D7DA2777D77A177A8FD1AFFC2C8C2
%C8C2C8C2C8C2C8CAFD06FFA9855A857E855A7E7E855AFD07FFA8A9A8A8A8
%A9A8FFA8A9A8A8A8A9A8A87DFD05FFCAC2A0C8C2C2A0C8A0C8A0C8C2FD04
%FFA97DFFA8A95A5A35605A605A5A36605A60597D767D7D7D767776777DFD
%19FFCAC8A0C2A0C8C2C8A0C8A0FD08FF7E857F857E857E857E85FD0AFFA9
%FFFFFF7DA8FFFFA9FFFFFFA8FD06FFCFC2C9C2C8A0C9C8C8C2C9C2C9FD04
%FFCBA8A8FFA8FF5A605A8560615A6160615A8477A17DA877A177A177A1FD
%1AFFA17675A076A09AA099CAFD07FFA9855A857E855A7F7E857EFD0DFF59
%A859A8FD0CFFC2C8A0C8C2C2A0C8C2C8A0C8C2FD05FFA2FFA8A9A8855A60
%5A605A5A5A605A60597D767D7EA17777767D77FD1AFFA16F766F76757675
%76A1FD08FF7E857E857F855A857F85AFFD0BFF7E7EFFFF53FD0BFFCAC8C2
%C8C2C8A0A0C2C8C2C8C2C9FD05FFA8FD04FF60615A615A615A605A61607E
%76A17DA877A1777D77A1A8FD19FFA1767576759A769A75CAFD07FFA8855A
%855A855A7E5A857EFD0BFFA859A9FFFFA853FD0AFFC99FC8A0C8A0C2A0C8
%A0C8A0C2A0FD05FFA8FD04FF8436605A605A5A5A605A61597776A1A8A176
%7D767776A8FD19FFA84B766F76759A7575A1FD08FF7F857E857F855A857F
%85FD0BFF7DA8FD04FF847EFD09FFC8C8C2C8C2C9A0C8C2C9C2C8C2C9FD05
%FFA8FD04FF606160615A855A605A85607E77A17DFFA1A177A1777DA8FD19
%FFA8767576759A769A75CFFD07FFA8857E855A857E7E7E857EFD0AFF7E7E
%FD06FF7DA8FD07FFA8A0C2C8C2C8C2A0A0C8A0C8C2C8A0FD05FFA8FD04FF
%8436605A605A5A5A605A61597776A2A8A2767D777776A2FD19FFCA6F766F
%76759A759AA8FD08FF7E857F857E857E857E85FD09FFA953FD07FFA87EFD
%07FFCFA0A0A0C8C2C8A0C9C2C8C2C8C2C8CFFFFFFFA8A9FD04FF5A605A60
%5A615A5A5A605A7E777D7DFFA87777A1777D7DFD1AFF766F76759A759A76
%FD08FFA9855A857E855A7F7E7F7EFD09FF53FD09FF7D7EFFA877A1A2FFA7
%C2A0A076C2C1CAC2C8C2C8C2C8A0FD05FFA2FFFFFFCA84365A365A5A5A36
%5A365A537776A1A8A87677767D767DA8FD19FF76756F7676766F9AA8FD08
%FF7E857F857F857F857EAFFD08FF7DA9FD0AFF7DA2777D777D7DA277C3C2
%C8A0C9FFC9A0A0A0A7A0A0CAFFFFFFCBA9FD04FF848459845A84FD047D59
%7E777DA1FFA87D77A1777D77FD1AFFA16F7676A1759A76FD08FFAFA97E85
%7E7E7DA176A1FD08FF7E7EFD0CFF53A8FD0477767D76A0A0C9CAFFA1C8A0
%C2A0C8C2FD05FFA2FD04FFA8A09A75A0A0C299C29FA076A17DA8A8FF7DA1
%76A176A2A8FD19FF76756F767D9A759AFD09FFCAC2A0C9C2C29FC2C2FD07
%FFA87DFD0DFFA97EFFA17D777D777D77A8FD04FFA1A1A0C2A1FD06FFA8FD
%04FFA8C9C2C8C2C8C2C8C1C8C2A85AFFFFA8FFFF84847EA985FD18FFCA75
%7575765984759A76FD09FFC9C1C9A7C99FC29FC2A0C9A8FD04FF59A8FD0E
%FF7E7EFFA8A17677767DA8FFA8CAA2A1767D7677A8FD05FFA8FFFD04A8A0
%C8C2C8A0C89FC29FC9A07E85FFA8FFA9855A855A7E7EFD15FFA885537753
%7D5961607D766084FD08FFC9C8C8C9C8C8C2C8C2C89FC8C9FFFF847EFD10
%FF7EA9FFFFFF7D77A8FFA8A177A177A1777D77FD06FFA9A8A8A8FFA8C9C2
%C8C8C9C9C8C1C8C2C8C1C9A8A9FFFF85857E857E857EAFA9FD11FFAF855A
%6160616085608B6185618BFD07FFCAC8C2C8A0C8C2C29FC29FC29FC1C9A8
%53FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF8459A8FFFFA87DFFA877767D
%7677767D7677A8FFA9FFA8FFA2A87EFFA9A8A0C8C2C8A0C8C2C29FC29FC2
%9FC2A7FFA8855A855A855A7F5A7FA8FFA8FFFFFFA8FFFFFFA8FFFFFFA9FF
%AF6036605A603685A8606085606184FD08FFC2C8C2C8C2C8C2C9A1C9A7C9
%A0CA7EA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7EA8A8FFA8FFA8A8
%77A177A177A17DA87DA8A8FFA8FFA8A9A8CBA8FFA8CAC2C8C2C8C2C8C2C2
%9FC2C2C2C1C9A8FF84A984857EA984857EA9A8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FF848584A984A9A8FF84A9608584AFA8FD04FFA8FFFFFFCACFCACF
%A8FFAFFFA9FFAFFFA8FFCAFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA9FF
%A7C9A7C9A7CFA8CAA8CFA8CAA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFCAFFCAFFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-02-08T19:37:53+03:00"
   xmp:ModifyDate="2022-02-08T19:37:53+03:00"
   xmp:MetadataDate="2022-02-08T19:37:53+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:5bb4460c-d318-eb4e-8264-4a7acec80a89"
   xmpMM:InstanceID="xmp.iid:5bb4460c-d318-eb4e-8264-4a7acec80a89"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2202.w037.n003.187B.p1.187</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="112"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAcAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUsvLF7rUarII/Q&#xA;SJ1qpb9uSo+0vwtQch3y2M6i0Tx8UvdX6UR9UuP5rf8A5EH/AKqZHiHn82XAfL5ftd9UuP5rf/kQ&#xA;f+qmPEPP5rwHy+X7UPf2k4sp25QAojOrCEhgygkFTz2I7HJQkLHP5sckDwnl8v2pnlTe7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxq8uo7eGW6upDHDGS8srmiqo6knwywCzQUrlPJE&#xA;ZSzKwJDDcEHocCrqNx6P9n/jbFVG3uYLqAy20vrRhuHOMhhySqsKjwIocJBHNbTnSy3GUGtA2wP8&#xA;MgVR2BXYq7FXYqhfVjj1CQSME5xR8C2wPFnrSvhUZOri12BLfu/WrfWLf/fqf8EMjRZcQ73n/wCa&#xA;nmLVbBtPh0y7aBJRI8rQmjErxCgsN6bnbJRi5ODhN2wEebPNTng+p3RjbZwZGpxPWuThHdsyiHCe&#xA;V0t/xj5q/wCrtdf8jW/rkab/AA49zv8AGPmr/q7XX/I1v640vhx7kSfMHngWQvjqF59UJ4ib1G41&#xA;rSnXBTHhhdVuhv8AGPmr/q7XX/I1v64aZeHHuTjyh5v8yyeZdPhm1CaeGeZYpYpWLqVc0Ox74CGv&#xA;JjjwnZ7ZkHBdirsVWySRxRvLK4jjjBZ3YgKqgVJJPQDFUhsfP/k2/uJbez1WGd4SFkZORjBPT95T&#xA;0+382WjBOrosDOI6p+jpIiujB0cBlZTUEHcEEZUzbxV2KuxVA65dTWulTzwnjKoUK1K05MF/jhiN&#xA;0hiLa9rihSbk0cVU0X5eGWcIZUFB/NeppcR27XpE0oZo04rUhKcu3bkMl4e10jbkq/4i1r/lqb7l&#xA;/pg4Qmnf4i1r/lqb7l/pjwhaQzaheMpVpOSt9oEAg1+jGloNjU70EfvKgdiBTGlpklBw6D7P8w/m&#xA;yDBaI0WMhUVRUGgIAqakn78VTXShtNtT4/GuRKo/ArsVdirsVdirsVeWfnT/AL1aV/qTfrTJRcvT&#xA;dXmuScpH6Rot9q07w2YUvGvNuR4ilQP44sJzEeaa6FpGn3Xl3VbyeLncWykwPyYcaJXoCAd/HFhk&#xA;mRIBFyf+S4i/4zn/AJONiwH96xDFyU58nf8AKVaT/wAxUX/EhiWGT6S+hMrda7FXYqw38zbdNR0c&#xA;aNMzpbXgJmaNirfAQV6dRy3ods1uu1s8EomPvc/RaWOUS4njejaFf+Vk1KKT97HM0f1W5UfCVowJ&#xA;b+Ujwzd6XtjHlx3Hafd+Obh5Oy5RyUfo73p/5O6vdz299p0zmSK34SwFjUr6hIdflUV+/MeXNv1E&#xA;QKL0fA4rsVdiqV+Z/wDjh3P+w/5OLko80jm87mubyFol5R/VfVDyNKCaLQgpVSvGu1D/AJm4V1bC&#xA;L5IhLqaaUNICtsQUKfZZkPUKB9jx8a5FapSiFrDLKqSrJbI/DjDR2ElA3DiD8NQanl07+GEghbtq&#xA;G3tQ11erH6Ezuq3AMjOvFYx6Z+LYbV5UwmRIruRw0feqQreN6zSQhIUK+i6uHLxuoYOQPsippia6&#xA;IXYEs4/Rl1xpwTpTqfGvjlVtbR0y64kcE7dz2HzxtUfYW0kKycwAXaoA32wFUVgV2KuxV4D+cv50&#xA;+etF8x/ofyha+oIpVhln9JXRW+Hm00jq6RryfiK07mvbMmQhjgJS3MlxwnklUej1j8t/Mt55j8n2&#xA;Gp36omoOGS8SOoUSIxAIrT7ScW6d+2UTA5jkUmJBo8wybIoeWfnT/vVpX+pN+tMlFy9N1Yf5QsbW&#xA;+12G3uoxLCyuWQkitFJHSmSbc0iI2GQ+TIYoPNerwxLxii9VI18FWYADf2xacxuAQflj/lEtd/1T&#xA;/wAmziyy/XF0n/kuIv8AjOf+TjYqP71BeYNNsbbQdGuYIgk9zGWncEnkeKnuffFnjkTIhDeTv+Uq&#xA;0n/mKi/4kMSzyfSX0JlbrXzd/wA5I+cfzW8tebI7zynrTw6SdLT1dOiVJH9SSSeOSZEKPXgAhL1+&#xA;HbKpZYiVORHTTlAyHT5s9/5xy/MXzB528hmfzDDKNX0yc2lxeyRiNblSiyxyAAKA3CQBqD/K/ayw&#xA;G2ggjmz7zFozalar6RAuISTHXoQeq/hmFr9J40dvqDl6PU+FLf6Sw46Bq5kMRs5CTsfh+H/gvs/j&#xA;mg/J5ga4Tf46u6/NYqviDKvKvli20SGaRY1S6u+Jn4fZAWvFR2/aNaZ0mlxzjACZuTo9VmjOXpGy&#xA;e5kuK7FXjX57/mF+YXl7XPL2g+VzFY2+u81m1loBcywPGyqQiSMIeki/aByvLk4Ikt+nwHLMR702&#xA;8ha55i1f8utQl1+9k1C+gu/RF1NDDbyMg9IkNHAscfwyF12Hbv1wabLxi23Vabwp10prMxx3YqtS&#xA;KNCxRFUueTkACrdKmnU7YSVU5JbWKQrdyiG2uPTQuxAHNZBQb9SwZhiIk8k8QAVXknjuGuIP2iS0&#xA;H7JB7LXYbdumClWmcvdyxrA8cKqrLISCrFq8lXfl8NO+GtmNvU8x2DsVfMf5h/8AOYU+mahrmh6H&#xA;oH7y2kuLTTdee6WSN5IXMXrrAIijpyUlf3pqKV8MU09t/KPzRd+aPy50LXL26hvNQu7ZWvprfiE9&#xA;cVDqVXZWU7MvY4oZfiqhe31nY2sl1eTLBbxCryOaAf2+AxSATyfOfmq4s7/zJq13pzyLa38hLJIj&#xA;rzG1WVow9OTV2YdDvl+apwAkNhyII+0SI+y3J05liJI68wb+wi/temfk3qEMem3Wl3B9O+edrpEI&#xA;KI0bIqUhDcWPAR/Ft3yo5ISoQ5RFcwT8atrywnZlIfVu9HyLS80/OHTr+4fTJ4LeSaJBKjsilqMx&#xA;UgGnjQ5KLlaaQFsV8paFqjXpnjmNhcxgiISQlywIox4tQUFQMnTPNkiNubIbPyjrFnfXF9b6qi3F&#xA;yWMzGAEHk3I7FqDfA1HMCKpTtPJWp2llcWUGqKtvdCkymAEmop1LVGKnMCbpx8lamdLGlnVF+pq3&#xA;MJ6ArWtftcq9TivjC7rdIvM2l63Alrp7SG9gtVpCIoqFQQOvGvhi24pxJJ5KfkzSNVbzTprC0mCx&#xA;zpJIzIyhUQ1YkkAYCzyyHCXt2qXM0VpKtrQ3rRubdCQKsBsd/AkZXKMjE8PNwccoCY4/pvf3PAtR&#xA;0u607UnnVXe9uWK3iXPqEQKtCDCFV+XqEkspZRsDU9tZHs7NPGDR5kU9FLtnTY80o8UQKBu/uFe6&#xA;3rP5e3nlaDTU0jR42tXXlPJBIAGeSQ8pWqCQx5HffNv+TlhiLeYl2jDUZDTL8gzdiry7zX/zkj+V&#xA;3lvXbrQbi6ub3VLNjHc29jbvNxlXrFy+FS46EA7HY742kAnk9J069W+0+1vVjeFbqKOZYZQBIgkU&#xA;NxcKWHIVoaE4oVLm5gtoHnncJEgqzHIZMkYR4pcmUIGRoc3l35la1JrWlBNIghW/s5lMF1c/FwVi&#xA;PUUhQSvNPD8OuabNro5CAY+nvd/oNJPHLaQ4u7p+Ka8g3Vsmk3WiXrJbeqUMUsI4wjiF34Hdasv8&#xA;xAFPc5Zo9XHGalyPVl2tpZSqQrYMrHkqQiou1IPQ8D/XN54jz3E3/gmX/lrX/gD/AFx414nf4Jl/&#xA;5a1/4A/1x414mm8kOwo10pAIO6dxuO+PiLxN/wCCZf8AlrX/AIA/1x414m18lPyHO6HGvxUTentv&#xA;jxrxMpytilPm+4jtvKmszyLK6R2NyxjgHKZqRN8MS93boo8cIBOwQTT5Ch8k+b9Q8tpcyeU5pLtr&#xA;MH0JVEUSyK4i9VbiV+KMeIqpPPYfPMcaXJ4nCA7M63EcXEauuT1H/nFzWbzRYb3yHrOhXWlatLLc&#xA;awl0xD2c3Mxo8cTJ8KGNeHwhm7mo6ZlTxShsQ6wZBM2H0FkEvEfzA8xXeueYHsYW/wBDtJTBbRVA&#xA;DSA8Wck0G56V6D6cmA5+GAjG0pFlcaTbT3dzGFuIY3lhAZX5KiksBxahrmVi02LNAxyC/i4mp1WX&#xA;HMGBoe5BnzMlxaw3CSiK7jYPG8bcJEfnwCgV5Hb4qjanvlB7IhilxYthRsbm+5sxdoSmOHJv3M40&#xA;383dQtbGBb2BNQn+ISsCYXAFOJJCspJ9hlfC2S04J22avfzumja39PTgpklCm3UvcStGKF2HBQQq&#xA;jq3E9h1OY+bIYmg5GHQwMdyb8vvTvy7qX6Wsjq0iyfW7tm9ZpEaMAIxCRxo3xLGg2Fepq3fMiOUT&#xA;GwoODnwHFKibSnzt5nudMEVnZEJczLzeUgEqlSBxB2qSDkmWDEJblIdE8watFW6u75mjJ+COVqhq&#xA;Hfr922ZmDDExJlt3NGrkeIRgNxzejQTLNBHMn2ZFDr8mFcwyKKEV5aFdU1Nt/hECjw3VicEuSTyZ&#xA;FkEPJ/N+uXM/mWWW3laMWR9GBlNKFDRz9LV+jNzpsQGOj1ed1mcnKSP4dkk1XV7i8mN3fSgsFC8j&#xA;RQAvsMvhARFBxpzlklZ3K7QdQNvqVlewtssiNXcVUmjA99wSDgyx4okJxSMMgPcXuOaB6p2Kvkz8&#xA;z/y3s/KfnrXfMTTCEa5NLc27mdVQGeVZpvU50C/vDsGNCNh45iZzK6rZ2mjjARMgd3015Ltb208p&#xA;aRa3wZbq3tIYpFf7Q4IFHL/KoBX3zIx3wi3AzVxmuVpH+YN1eytb6faTCEAiS4enI0NR8IO3Lbv4&#xA;5qu0NRATEZDiAF159L8nYaDDIxMgaJNfDyYjqMkFjpFzJT93FE7UJ6mh6k92bvmq00JZs0Y9ZSH4&#xA;+AdnlmMWMkdAkHkaWaa1R5XLkvOeRNWJ/dggk/s7j6c3fb8IwmREVtH3fxfa67s3JKYuRs7/AKGc&#xA;6brOrae0giuWeJmBSFxyRQFA4qD03BO3jmmx67JjAEeQ/W5uTRwmSZIx/wAzRZXkEWqRxw2sjKj3&#xA;CK7ULnio4gmlWotc2mm7SlP6gGifZMeDiiTbNbC/tL+1S6tJPVgevFwCOhodiAc2kJiQscnTZcMs&#xA;cuGQoojJtaD1h9RTSrt9NCtfrE7WysKguBUClR16DIyutmeOuIcXJ5b5J/OnzDruvWWmXug/VUuE&#xA;4SuHBpKgZpHFCTwoNgyj55TjymUgHMzaQQgZbivx+Czh/Peneq0EUErzhii1KrGxBoPiqTQ/6ubY&#xA;aGVWTs6f80O5ieqa9e6w7vcnjBCpaO3SoUEkKCfEjlmfiwRx8ubizymfNCtdXA02OP1G4MzJxrtx&#xA;FDxp4V3y3hFtdmlGD65Aq3sBaMI3FZlNCGFDT8cMqPpKixuHpnljWW1XTRNJQXEbenMB0JAqGA9x&#xA;mk1OHw5UOTssOTii8f8APfla+0bWLiYxs2n3MjSW9wASo5kt6bHsy/j1yoF2uLIJDzYxhbV0Wj2V&#xA;wryyAqy7ArRaU3rkMuuyY6A5NmLQY8oMjzT/AMleUX8220tzY3sUUULBZFdXLCtaFSo9Nxt1RyMj&#xA;DKJNOeXh+4vQdP8Aye8sJaNFqiDUZmYN6rIEA4ggAKS/8x64JwEubjjWSHKq+aaHSdP0mKHTtPiE&#xA;NpbpSOMdBUlj+JycI0KcfJkMzZYd558tXmovFfWS+rLEnpyQ1oSoJYFa+HI5NtwZANixrSvJetXl&#xA;0qTwPa24I9WWQcSF78QdycW+WaID1KONI41jQURAFUeAAoMDgIzysK3GpvvvKi/8Cn9uCSSnzAlS&#xA;B1pt/mMigPIfLnlOey8zQfX7Ah2JSe6mjBMxjjPHlJSkn2c1ejjlGYXxde96LtOenlpTw8Juq5Xz&#xA;++ku1lIDrN40caqFmkVKACihiKDwztMf0h8yzH1kDlaK8r6XLqWt20KKTGjiWduwjQgmvz6ZDPkE&#xA;YEtmlxGeQB7LJIkaNJIwVEBZmJoABuSTmienfOf5h/mLqPmDVpY7C4lg0aD93BCjMglod5ZACK8u&#xA;wPQe9c3Wn04gN/qcac7LALxWEfNZGSlFbiaVViAa5dkxRlzF0iOSUeRIZz5M/MXzF5bZHM7X+mBg&#xA;k1jM5NKioaNjXgevTbxGUZsEJnh5SrmyjIgWze+87+WtZuTfwXiwCVV5wXJEUiMFAK7mjdOqk5x3&#xA;avZWcZTIRMge7d3/AGfrMfh8JNEd7EvNvm7QJ9Gu7e3v0MisscgoeP2gftEAGtNuNa4Oz9Lk02eM&#xA;8sSBv9zdqMkc+OUYSCJ/KN9O1JFQH6zB9ajjdlJCbsrfCwpWuxJXY7Zf2tqI5dTED6Tt7+n9jTpM&#xA;Jx4JG/Vz93V7MfKOik7I49g5/jhPZeHuPzcYdo5e9Qu/Iflq7j4T27NtQsXapHgRXj+GWR7PxAUB&#xA;9rKPamYdRXuTbS9MtNMs0tLVeMSEnelSSepIAqcyceMQFBxc+eWWXFLmi8saXYqlFz5Z0r15L6zt&#xA;ILbU2R1W6VApq4pVuNK/PDjEYyuk5JzlHhvZgN95Y1uy5tLbM0aAsZY/jXiOpqOg+eb2Gqxy6url&#xA;hkOjzvzD59FpA36LVJGJUJPL/dyA7n01UhmA7nYfTg/MAy4Y7/o/H42ZjTkCzsmeg+ftH1DT7KO8&#xA;jmgnMp+t8EJRFJClldqKa9aCp8cxtR2hDEaPNydP2bkyixyZXrFvJa3ZtS1YI97cj7JRtw23Unuc&#xA;zMMhKPE4OSJBpnHkfTLmy0x5LhSj3L81jNQQoFASD45q9blEpUOjm6aBEd+qI87Pcp5V1JrYMZhF&#xA;8PCvIfEKkU8BvmJEWXLxkCQvk8OWXUZmKy2wuGoCxkjo5rsC0i8XPTu2XjDM9C5Zz4x/EPmmh06O&#xA;KzkSAUmYclqd+VBsK5dk7JhI8VyJrltX3fpcPF2zkia2Eb8/1vX/ACfp6WXl6yT0VhnkhR7jjQ8n&#xA;KirVFRv1zB4BHZnlzHIbJtOcWpjuuXKQ3nxAku0cageLU8ew65OIVKbPXdJvL+4sLa4Et3a1FxEA&#xA;1V4niakinXJyxyABI2KBII/IJdiqM8pisN+9et26/wDAquCSSnuRQxP8wL2OOzggKu7B/WPpVLgA&#xA;FKgLv+0ema/WayeKURjIjI9/7e9zNNo4ZokzFxH46MF/R1pPD6tvITzBMb15LU9CehO/vlI9otTE&#xA;1IR+W/3qfZzTS3Bl8/2Ms/LeOOOW7Vrcw3DIlSzBqhSQ3Eg9KkdQDmTpu0cmeZEpAjmKFfj5lry9&#xA;m49PEGAIJ52bd+c+r3GneSZUgJVtQmS0dh1COrO//BLHx+nNxooCWT3OHlNB8+i8paNbiGL4us3E&#xA;+p9rl1r/AAzZnBc+O5e7p3NXienhoe/ql92GcRwKQPXcISd6Vw58nBAy7guLHxyEe8vQPIGlCOPU&#xA;NSuU5xw8be05qOLXEiks61r/AHUZPyLDMHTaoaiQoVw/ivub9bpzpxV3bK44YWs5ZmuAsyMqpbkE&#xA;lw1akHoKZsT9QFbOrHK7Y55nkDRQW3phubF2kNKoFBAIr3NafKuYPaMYyhw9S7PsriGTi6BDaDql&#xA;3ovptaIBbpOJnXiKM9QTVqd6ZopaPEZAn6h5u9llkQR0L6ItLqG7tYbqA8oZ0WSNvFXFR+vMl0xF&#xA;KuKHYq7FXYq7FWnRHRkdQyMCGUioIOxBBxV80/nH+WVvoOqPqOhof0bKvrXFoBX6uWJHw/8AFe3T&#xA;9n5Zl4O0IHIMUj6iNvP9rGWllweIPptguj/Xbq/46davcX0i8VjU/Aor1Y9QvzYIPAZjanRQhc8k&#xA;6h9v4+Zc/Br5Gowhcvs/HyD6W8h/vTaW9/DG1zaWiJGT+8KMlKqHI3pXY0zV6HtGc5nHforb8e5s&#xA;1ujjGInXqJ3Z3mydclHm6Qx+Xbxh3VV/4J1X+OZGkF5A05z6C8rSNE5cRQsSzHqST883rrVKFE+s&#xA;XD8Rz5heXenBTSvhipeueV5vW8v2L1rSPh/wBKf8a5odSKyF2eE3AJplDaxPzAeWq2g6g3NCP9W3&#xA;kI/FRlkeRQXlnl2UNL56v9to7gg9ATIZmG3Xfjmyyj+7Hu/Q0x6r9D1i80H8s/r9mVW4lvCIy45D&#xA;c0O3yTBkxieaj3LE1F6NolxcXOjWNzckG4nt4pZqCg5ugZqAe5zAyACRA724ck88pf8AHOmetedz&#xA;K340yuTIp1kUPO9fvfrmqzyA1RT6cf8Aqpt+J3zktdm8TKT05PS6TFwYwEl07e1DfzvI5/2cjN/H&#xA;Ks/1fL7m3F9LJvJjcdXYV+1Ew/FT/DM7sk/vfg4faQ/d/FMPzD0aPWdDFhKiujSCTkSQyFVNGQjv&#xA;v3zqcOQwlYdAYg83kt1+XWl2tnFdyTT+lMaIA6E9Cf5PbNhj1OSZoAONnljxC5Wllx5J0KZQFury&#xA;F1PJJUMJZW7EB43Xb3GTyRyTiYmqLjw7QxRII4rCpb6ZeQxppsPmbV1gt6uq+lpdAZNyamz5NWlK&#xA;7+HbKMOmyYhUDTZn7RxZTxTslGy+Xr6PTXvz5w1BljKq8ATTfVHI0B4mxFR7g45MuaHM/c2aYYcx&#xA;qPNC28enMFS6vr2+nJp68626tQnYUhjiSg/1cxpzMjZLtcWI440KprVVtUmEULSM0fwMHIKgDYBa&#xA;ZVGIHJvhKR3L138qtUN55XW3c1ksZGh368D8af8AEqfRkZOJqI1JmWBodirsVdirsVdirAfNzCTW&#xA;p0YVVVRCDuCCgP8AxtnMdpSPjnyr7nodBH9yPO2Pafpem6dG0djbR2yOauI1C1PvTrmJm1GTKbnI&#xA;y97k48UICoimReU3465CP51df+EJ/hmV2YazD4/c43aAvEfgz3OoeeSDzw1PL0o/meMf8NX+GZei&#xA;H7wNGp+h5rm6dcowf3tx/wAZB/ybTFS9S8kkny7bg9mkA/4MnNJrf7wux0/0BPcxW9jGq21tc3Eq&#xA;XESTIJCQsihhUVFaHJg0qXDQNCAYDTrUBvtAQx7/AD+HJ8cu9HCHfoDQuHD9G2vAbhfRjp93HHjl&#xA;3rwhEW1lZWoItreOANTkI0VK06V4gdMiSTzTSceUwf0FAxP22kb75GyMuaSi9avfqemTzg0fjxj/&#xA;ANZth93XMTV5vDxmXVu02LjyAPN85F6dDaZ/xzbU9zChPzKgnLc/95L3lrxfQPcyLyi1NajH8yOP&#xA;wr/DMvss/vh7i4vaA/dFl+rxc7Rmp9gEn5EEV+jrnUB59gd7pkt/5ft0hP72Kjqp/a6in45l6fKI&#xA;S35OJrsByQocwwyR1juWtXPG5UcmiOzAA0rT55tgQXnDAjmFC+UCEzrtLbgyIw9hUqfZhsf64phz&#xA;rvV2VWBVhUHqDiRfNEZGJsGik3AJfBB0EgA+Vc0uSNSIe602QzwxkeZiu1MEahcV/nP68gW7H9IZ&#xA;v+Tl/wClrF7Yk0W5gEijxaJun/AucjJp1I2t65kHDdirsVdirsVdirz3zKCNcuq+K/8AEBnKdof3&#xA;0vx0ej0X91FLMw3LTLy3X9N2tAT8R6f6pzM7P/vouLrf7qT0POrebY956/44D/8AGRP15maH+8cf&#xA;U/Q83zcuvUYP724/4yD/AJNpipepeSf+Udg/1pP+JnNLrf7wux0/0BPcxG9Te2t5DV4kY+LKCfxx&#xA;ViWoKPMHmIaLp/7jS9KdZdbvIP3bSTbNHZJIlGH883E9KL+0cuHpjZ5nl+tiTZpvy8f0TrMvlfVa&#xA;XHIPc6FfTDk89tWrwu7falgrvvVkofHGYscQ+Kg0aZUbKyIobeMj/UX+mU2yVUREUIihVUUVQKAD&#xA;2GKsU87XtXgslPT97IPc7L/HNF2vm3EPi7jszFzl8GLZpXbIbTP+Obaf8YY/+IDLc/8AeS95a8X0&#xA;D3J/5VYjXbceIcH/AIBjmT2af38fj9zj68fuT8PvZ5P/AHEn+qf1Z1LzrHtH0oy6NaSxMAzRglW6&#xA;dfHJk7pLAfOFolv5huKoFnKRiVh1NF+Hf5HNto/oee7SP734Mfvv94rj/jE//ETmS4MPqCvixSgg&#xA;vqYUdTKAPvAzT5/rPve40IrTx/qorzPB6OsSKBQNHA49+cKMfxOUuThPpCN/L68+q+cNNetFkkMJ&#xA;9/VUoPxYYCjMLiXveQde7FXYq7FXYq7FXgn58QtF5wtZlJAlsYyDXussgNPopmHqB6ncdnn0H3sG&#xA;sLq5CuFlcbjoxzEnEdzsovS/yTMsnme9ldy3GyZfiJP2pY/H/Vy/SACR9zgdpn0D3vac2DpGPeev&#xA;+OA//GRP15maH+8cfU/Q83zcuvUYPtzt2Mm30Kq/wxUvV/J6FfLlmD4OfvkY5o9Wf3hdlg+gJxmM&#xA;3JB5t127soYNM0oLJr+qsYdPRt1jAH725l/4rhU1PiaL3yzHEHc8gxkUd5e0K00PSodPtizhKvNO&#xA;5rJNM55SSyN3Z2JJyM5GRtIFKHmny+Na00RRS/VtRtnFxpl6BUw3KfYb3U/Zcd1Jw458J8lkLUdB&#xA;81217o0t5qXHT7uwYwavbSNQQTpTkKnqrVDIf2gRjOFHyWG/vVrDzj5Yv3MdrqMLOP2WJjJp4Bwt&#xA;foyNNhxyHRgeuandPrN5JKq3EIkIDWxDtGo2UOgLVoo6rv8A5OcxrYGWQk+mXnyPuP497vtKeHGK&#xA;3Hl+r8e5ThH1+P07NhK81Uj4n9o7U9t8w4Y5CYiRvbkymOEm9nQxtFCkbCjIoUgeIFMhM3Iso8gm&#xA;3loka5a08WH3ocyuzz++j+Ojja3+6kz+f+5k/wBU/qzq3nEB5a/44Nl/xjH6zhlzSXmf5hzpH5qu&#xA;gyvusRBVGYf3a/yg5t9H/dvP9oxvL8GL3U6SWdyFV6iJ/tI6/snpyAzKcKIohU+tf8Uy/wDA/wBu&#xA;LHh80JYr6mu26/zXSD75AM0uU+s+97jTCsEf6g+5N/Ptv6V/p8lNp7CB6+45J/xrlbZpz6Uj0q5+&#xA;q6pZ3NaehPHJX/UcN7eGLdIWH0llbq3Yq7FXYq7FXYq8Z/5yDtKXOi3YH20niY/6hRh/xM5i6gcn&#xA;adnHYh5bYIxjlf8AZUqD82DH/jXMSTtYl6v+RkZOparJtRYY19/icn/jXMjScy6/tM+mL2HM10yW&#xA;eZLGC80edJ3ZEjHq8lpWqCoG+SjqPBufcF8HxCI95eaLpd00LSArt2qP6g/hmN/omJFjH/sv0U5f&#xA;8hRBozPy/agILe5W6USyokHOrhVIJBNWqfipmJL2mynkAHMHYeEDqS9e0e80mS2S30+ReEKgCGtX&#xA;Ue4JJzOhqo5SSDZdZPTyx7EbL9Y1ax0jTLjUr+T07W1QvI3UmnRVHdmOwHc5dGJJoNRNJN5S0m+a&#xA;W48x6zHw1rU1AW3O/wBUtAaxWoPj+1Ie7fIZPJIfSOQREdSyXKmTsVYF+Yvlm15f4hELy26Kqa7b&#xA;Q1DyWyV43KAdZrbkSNt05L4ZdjNjhPwUSMDxBguv+S9U0eJdRspPr2kTJyhv7fcelIv7YFaBlPXo&#xA;ci5+PMJJLBqd5Fdtchy00n2z3Y+Jp1OY+p00c0aLmYMxxnlYezeXfLllpaRa1qLJBePAvrF6RiN2&#xA;HxBzWjEdBXpvmLptF4R58Xd5OHqtV4m0RX6WA+YbjS9O1EwwvPcwtU+uJ5lUGteIHNmOxG5p49DX&#xA;MXJ2bk3IMfdwhz9PnhLaVj4lPvy6t9L1S+e7jeQXGnsrCN2kkBDggEM7eI6UyzS6KcZCUiB5AD9D&#xA;Tr80AOGPqB67/pekT/3Mn+qf1ZtHTpRol/Z2mg2H1iZYucfw8j1ockRuksL86Wttqmo3DwTFC3Ax&#xA;3EdK/DGBQ16ivbMHX6/JgjERNXbl6PQ4sxJnEGkitvLhS0YTyyXDspDsfhX3403H35qsnbOqkNpE&#xA;B2EeydIJA8EbQcPl+2J4LLKXNaO8tP10XKMXa2oEweL8fNy8nZ+Dh+iPyH6k28seVLRtXLyvNFLa&#xA;o9xGGoQ5j7dNwa9Qc6yAEocYkJD3V+kugyZzE+GY8Pxv9AT3zR5WtNS8tWGqSyvHJZ20cYVACGDs&#xA;AKk+BbDCEpy4Y82sajwwSRswiLy9pwkBuJpRD+2UC1A8d9syhoMg5yj8mJ7UieUT83uWm6hZ39nH&#xA;c2k63ETAfvF8abhh+yfbMGUSDRYonArsVdirsVUbu8tbOBri6lWGFPtO5oP9vJRiZGgxnMRFk0Hh&#xA;v5p+cJfNDw6dp+mTi0s5S63kisGkNOJ4rSir8zU+2U5sOSRoRPyc7R6nBAcRyR36WGNWGh30Wg3b&#xA;vH+9aWGTgN2CRrIp6f8AGQH6MGTs/JHFxHn3eTPF21hlqBjB9Nc+lvRvyRie3fUTMnFrtYzCTsSI&#xA;i3L7/U/DBpsEhDjPVh2jrISyjHE2QLL1fLnDSzXI76602e3t4SXkAAJZRsGBPfuMxtZjlPEYx5uR&#xA;pZxjkBlyYgNE19fgW3lA3FAdt+vemc6NHn5UXdnVYedhSk8o63KeYg4eIYjf7q5OHZeaXQD3oPaO&#xA;KPW3ReUfMUMiyRARyKaq6sQQfYgZZHsrPE2CAfewl2lhIog/JNLjTNe1LVdNk1WL1NN0tFnS3Ums&#xA;98Nlll+EDjEN0HdjU9BnS4CY4wJfX1dFlozJj9PRkZvr/taH8f6Y0xaOoagP+PQ/c2NK1+kL/wD5&#xA;ZG+5v6Y0rTX+oEU+qGh6gqxw0qReXLLWtDe9sY4Q+hs/rabEwfnb+oSZYKUp6St8SeFadhk5yEt+&#xA;rGIpRvfLFld6/b629oyzwlWeEKfSkZBRCy+K7dPDIN4ykRpivm7y7521vV57prZpLcMVtYg6hVjG&#xA;w4qxFK9ThDfjyQiEoh/LvzZI6iSz9IEgF3ZSAPH4Sxw2zOeLLfIOga/5evbx7iAGKdAilSSCUbY0&#xA;oOxwFozZBICmaPqF+yMv1f7QI+y3fBTjpFbaReo9o8qlhbqqmMqWU8e2/Y98labUdT0W9mneeGGg&#xA;Y1ESqVp7Dtmq7T0ksoBjzi7DQ6mOOxLql31PVIgY/q8qg9R6Z/pmhOHLHbhPydt4uM72Pmh5NA1j&#xA;kJobWUfIFSD7A0OGPZ+c7iJ+5J12EbGQ+9u20nzJBN60NtKklCpanUMKEGvWuW4tLqscriCD7x+t&#xA;ryanTTFSII+LJLiLVJ/LK6YbcrJ6cabg9UYHqNv2c63R5CDGU9j1ea1UAbETY6Mb/wAKa3/vn9f9&#xA;M2353G6/8tNXt/L3miAf6OJIgTU+mzLUj5ZGWqxHn9zIYMg5Mztr/Vlt4hPbFpQiiQhW3am/45qp&#xA;gWa5OdG63Vf0hf8A/LI33N/TI0lsahqB/wCPQ/c2NK2L6/72h/H+mNKxLzN5f8y61qHqnilqlBBC&#xA;S/winxGgWlSczsGohjjVbur1Wjy5Z3Y4eiWR/l5rAkUycGQEc1HIEiu46ZcddHuaB2XO9yEfdeUN&#xA;SW4uZrW2VIJHLxwKaFV8N6ZHHq40BJdR2dOyY1XcjfLOi6ra34u5bdlRAyhCQpNRTuchqc8TGgz0&#xA;GlnGfFLZlyzTk/FAy/7JT/HNe7h//9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:acc39306-3a8c-1741-a420-e15c7d32a432"
    stRef:documentID="xmp.did:acc39306-3a8c-1741-a420-e15c7d32a432"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:acc39306-3a8c-1741-a420-e15c7d32a432"
      stEvt:when="2022-02-08T19:37:51+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:5bb4460c-d318-eb4e-8264-4a7acec80a89"
      stEvt:when="2022-02-08T19:37:53+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="849.967379"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -339.051 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 339.051 li
780.891 339.051 li
780.891 0 li
cp
clp
780.891 333.144 mo
780.891 336.407 606.083 339.05 390.446 339.05 cv
174.809 339.05 7.26563e-05 336.407 7.26563e-05 333.144 cv
7.26563e-05 329.882 174.809 327.238 390.446 327.238 cv
606.083 327.238 780.891 329.882 780.891 333.144 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .87451 .898039 rgb
f
259.807 119.902 mo
114.322 119.902 li
111.756 119.902 109.677 117.823 109.677 115.257 cv
109.677 33.5733 li
109.677 31.0079 111.756 28.9283 114.322 28.9283 cv
259.807 28.9283 li
262.373 28.9283 264.452 31.0079 264.452 33.5733 cv
264.452 115.257 li
264.452 117.823 262.373 119.902 259.807 119.902 cv
cp
.639216 .482353 .564706 rgb
f
149.312 103.988 mo
140.207 103.988 li
140.207 78.9996 li
149.312 78.9996 li
149.312 103.988 li
cp
.878431 .87451 .898039 rgb
f
232.588 103.988 mo
223.484 103.988 li
223.484 78.9996 li
232.588 78.9996 li
232.588 103.988 li
cp
f
170.131 103.898 mo
161.026 103.898 li
161.026 66.1353 li
170.131 66.1353 li
170.131 103.898 li
cp
f
190.95 103.898 mo
181.846 103.898 li
181.846 55.2676 li
190.95 55.2676 li
190.95 103.898 li
cp
f
211.769 104.099 mo
202.665 104.099 li
202.665 44.732 li
211.769 44.732 li
211.769 104.099 li
cp
f
718.268 9.1353 mo
718.268 57.6119 li
718.268 61.9678 714.737 65.4942 710.386 65.4942 cv
619.143 65.4942 li
614.788 65.4942 611.26 61.9678 611.26 57.6119 cv
611.26 9.1353 li
611.26 4.78521 614.788 1.25298 619.143 1.25298 cv
710.386 1.25298 li
714.737 1.25298 718.268 4.78521 718.268 9.1353 cv
cp
f
718.268 11.688 mo
718.268 12.2232 li
611.26 12.2232 li
611.26 11.688 li
718.268 11.688 li
cp
.960784 .960784 .968627 rgb
f
718.268 22.7491 mo
718.268 23.2842 li
611.437 23.2842 li
611.368 23.2842 611.309 23.2574 611.26 23.2144 cv
611.26 22.8184 li
611.309 22.7759 611.368 22.7491 611.437 22.7491 cv
718.268 22.7491 li
cp
f
718.268 33.1675 mo
718.268 33.6705 li
718.242 33.6812 718.21 33.6866 718.177 33.6866 cv
611.26 33.6866 li
611.26 33.1514 li
718.177 33.1514 li
718.21 33.1514 718.242 33.1568 718.268 33.1675 cv
cp
f
718.268 44.2125 mo
718.268 44.7476 li
611.346 44.7476 li
611.314 44.7476 611.288 44.7422 611.26 44.7315 cv
611.26 44.2286 li
611.288 44.2178 611.314 44.2125 611.346 44.2125 cv
718.268 44.2125 li
cp
f
718.268 55.2842 mo
718.268 55.7872 li
718.242 55.7979 718.21 55.8033 718.177 55.8033 cv
611.26 55.8033 li
611.26 55.2681 li
718.177 55.2681 li
718.21 55.2681 718.242 55.2735 718.268 55.2842 cv
cp
f
622.445 1.25298 mo
622.445 65.4942 li
621.91 65.4942 li
621.91 1.25298 li
622.445 1.25298 li
cp
f
633.501 1.25298 mo
633.501 65.4942 li
632.965 65.4942 li
632.965 1.25298 li
633.501 1.25298 li
cp
f
643.909 1.25298 mo
643.909 65.4942 li
643.374 65.4942 li
643.374 1.25298 li
643.909 1.25298 li
cp
f
654.963 1.25298 mo
654.963 65.4942 li
654.429 65.4942 li
654.429 1.25298 li
654.963 1.25298 li
cp
f
666.025 1.25298 mo
666.025 65.4942 li
665.49 65.4942 li
665.49 1.25298 li
666.025 1.25298 li
cp
f
676.786 1.25298 mo
676.786 65.4942 li
676.251 65.4942 li
676.251 1.25298 li
676.786 1.25298 li
cp
f
687.847 1.25298 mo
687.847 65.4942 li
687.312 65.4942 li
687.312 1.25298 li
687.847 1.25298 li
cp
f
698.25 1.25298 mo
698.25 65.4942 li
697.714 65.4942 li
697.714 1.25298 li
698.25 1.25298 li
cp
f
709.31 1.25298 mo
709.31 65.4942 li
708.775 65.4942 li
708.775 1.25298 li
709.31 1.25298 li
cp
f
635.552 23.0167 mo
635.552 24.4454 634.394 25.6041 632.965 25.6041 cv
631.536 25.6041 630.378 24.4454 630.378 23.0167 cv
630.378 21.5875 631.536 20.4288 632.965 20.4288 cv
634.394 20.4288 635.552 21.5875 635.552 23.0167 cv
cp
.360784 .411765 .647059 rgb
f
646.228 44.7476 mo
646.228 46.1768 645.07 47.3355 643.641 47.3355 cv
642.211 47.3355 641.053 46.1768 641.053 44.7476 cv
641.053 43.3184 642.211 42.1602 643.641 42.1602 cv
645.07 42.1602 646.228 43.3184 646.228 44.7476 cv
cp
f
690.167 23.2842 mo
690.167 24.7129 689.008 25.8716 687.58 25.8716 cv
686.15 25.8716 684.992 24.7129 684.992 23.2842 cv
684.992 21.855 686.15 20.6963 687.58 20.6963 cv
689.008 20.6963 690.167 21.855 690.167 23.2842 cv
cp
f
694.56 305.673 mo
694.56 305.673 675.419 315.501 669.835 321.074 cv
664.251 326.648 664.06 330.344 664.77 332.139 cv
665.48 333.933 705.552 331.026 705.552 331.026 cv
705.552 331.026 705.683 319.994 709.977 320.586 cv
714.271 321.18 712.209 331.117 712.209 331.117 cv
724.336 330.668 li
724.336 330.668 724.592 319.696 723.593 315.419 cv
722.515 310.805 719.663 303.656 719.663 303.656 cv
694.56 305.673 li
cp
.407843 .713726 .847059 rgb
f
698.613 302.355 mo
698.613 302.355 682.181 312.233 685.254 313.127 cv
688.328 314.02 705.533 313.71 710.525 311.736 cv
715.517 309.761 719.663 303.656 719.663 303.656 cv
707.996 299.314 li
698.613 302.355 li
cp
.607843 .34902 .305882 rgb
f
698.613 302.355 mo
698.613 302.355 686.709 233.019 694.42 223.198 cv
702.133 213.377 719.778 238.163 719.778 238.163 cv
719.663 303.656 li
719.663 303.656 703.977 309.025 698.613 302.355 cv
cp
f
717.823 231.483 mo
717.823 231.483 720.186 297.319 723.355 304.282 cv
726.524 311.246 743.841 304.282 743.841 304.282 cv
747.932 232.944 li
717.823 231.483 li
cp
.698039 .403922 .337255 rgb
f
712.109 94.4004 mo
712.109 94.4004 706.81 96.2662 706.226 102.561 cv
705.641 108.855 710.265 110.637 710.265 110.637 cv
722.599 106.833 li
712.109 94.4004 li
cp
0 0 0 rgb
f
732.031 91.2007 mo
732.031 91.2007 739.565 94.3687 740.433 99.9747 cv
741.3 105.581 736.974 109.871 736.974 109.871 cv
736.974 109.871 747.59 110.726 747.778 119.144 cv
747.964 127.561 736.504 128.029 736.504 128.029 cv
707.062 125.457 li
707.062 125.457 701.457 118.679 708.331 109.871 cv
714.633 101.794 732.031 91.2007 732.031 91.2007 cv
cp
f
699.948 163.365 mo
699.948 163.365 693.598 183.154 691.236 199.707 cv
688.875 216.258 688.301 242.902 690.341 243.757 cv
692.38 244.612 715.869 244.288 715.869 244.288 cv
715.869 244.288 723.865 246.014 737.494 244.845 cv
743.121 244.362 746.834 243.75 748.989 243.312 cv
750.371 243.031 751.339 241.801 751.296 240.392 cv
750.953 229.162 749.087 181.21 742.08 171.754 cv
735.859 163.36 699.948 163.365 699.948 163.365 cv
cp
.968627 .701961 .411765 rgb
f
717.759 116.731 mo
717.759 116.731 703.779 117.969 698.529 124.719 cv
693.279 131.469 700.216 173.79 700.591 174.379 cv
700.966 174.969 710.73 179.932 727.678 178.907 cv
740.682 178.12 745.765 174.902 746.328 173.992 cv
746.89 173.081 743.847 124.195 739.722 120.147 cv
735.597 116.098 727.99 115.493 717.759 116.731 cv
cp
.572549 .705882 .917647 rgb
f
658.212 140.845 mo
657.89 138.814 li
657.89 138.814 650.102 132.886 645.31 130.93 cv
643.294 130.106 640.469 130.793 642.852 133.461 cv
644.138 134.902 644.78 136.614 644.78 136.614 cv
644.78 136.614 640.931 135.398 638.292 133.649 cv
636.6 132.528 634.129 128.024 632.68 129.001 cv
630.374 130.553 633.024 134.95 633.024 134.95 cv
633.024 134.95 631.826 129.38 629.55 131.554 cv
627.284 133.72 633.476 144.658 636.425 147.27 cv
639.375 149.882 654.934 152.923 654.934 152.923 cv
658.212 140.845 li
cp
.698039 .403922 .337255 rgb
f
641.814 139.008 mo
638.155 138.65 634.862 135.579 634.723 135.449 cv
634.582 135.315 634.576 135.093 634.709 134.952 cv
634.842 134.811 635.064 134.804 635.206 134.937 cv
635.238 134.967 638.465 137.974 641.848 138.307 cv
642.042 138.326 642.183 138.498 642.164 138.69 cv
642.146 138.872 641.993 139.008 641.814 139.008 cv
cp
0 0 0 rgb
f
637.781 141.536 mo
637.707 141.536 637.632 141.512 637.57 141.465 cv
634.316 139.027 li
634.161 138.911 634.129 138.69 634.246 138.535 cv
634.363 138.38 634.583 138.348 634.738 138.464 cv
637.801 140.76 li
644.42 136.743 li
644.587 136.644 644.802 136.694 644.904 136.861 cv
645.004 137.027 644.952 137.243 644.786 137.344 cv
637.963 141.484 li
637.907 141.519 637.844 141.536 637.781 141.536 cv
cp
f
650.903 141.407 mo
650.868 141.407 650.833 141.402 650.797 141.391 cv
646.9 140.162 644.441 137.393 644.338 137.275 cv
644.211 137.129 644.225 136.907 644.372 136.779 cv
644.517 136.651 644.739 136.666 644.868 136.812 cv
644.891 136.839 647.305 139.552 651.008 140.72 cv
651.194 140.779 651.296 140.976 651.238 141.162 cv
651.191 141.312 651.052 141.407 650.903 141.407 cv
cp
f
700.272 122.918 mo
700.272 122.918 684.422 136.924 671.628 137.743 cv
665.459 138.138 657.181 135.193 657.181 135.193 cv
649.829 154.433 li
649.829 154.433 675.681 178.929 702.019 159.626 cv
709.587 154.078 700.272 122.918 700.272 122.918 cv
cp
.572549 .705882 .917647 rgb
f
653.71 158.345 mo
649.99 157.105 li
649.498 156.94 649.232 156.408 649.396 155.916 cv
656.374 135.007 li
656.538 134.515 657.07 134.249 657.563 134.413 cv
661.282 135.654 li
661.774 135.818 662.04 136.351 661.876 136.843 cv
654.898 157.752 li
654.734 158.244 654.202 158.51 653.71 158.345 cv
cp
.901961 .956863 1 rgb
f
700.306 147.546 mo
700.14 147.546 699.993 147.428 699.961 147.259 cv
698.085 137.231 703.467 129.644 703.522 129.568 cv
703.637 129.412 703.855 129.377 704.013 129.49 cv
704.17 129.604 704.206 129.823 704.092 129.981 cv
704.04 130.053 698.833 137.407 700.652 147.13 cv
700.687 147.321 700.562 147.504 700.371 147.541 cv
700.349 147.544 700.328 147.546 700.306 147.546 cv
cp
f
714.262 99.084 mo
714.262 99.084 707.999 96.6749 707.693 101.469 cv
707.337 107.023 713.953 106.833 713.953 106.833 cv
714.262 99.084 li
cp
.698039 .403922 .337255 rgb
f
711.359 104.165 mo
711.243 104.165 711.128 104.107 711.062 104.001 cv
708.875 100.548 li
708.771 100.384 708.819 100.167 708.983 100.063 cv
709.147 99.959 709.366 100.007 709.468 100.172 cv
711.656 103.625 li
711.759 103.789 711.711 104.006 711.547 104.11 cv
711.489 104.147 711.423 104.165 711.359 104.165 cv
cp
0 0 0 rgb
f
708.926 103.194 mo
708.741 103.194 708.586 103.048 708.576 102.861 cv
708.565 102.667 708.713 102.502 708.908 102.491 cv
710.666 102.398 li
710.851 102.379 711.024 102.537 711.035 102.73 cv
711.045 102.924 710.897 103.089 710.703 103.1 cv
708.945 103.193 li
708.939 103.194 708.932 103.194 708.926 103.194 cv
cp
f
725.861 110.637 mo
726.149 118.853 li
726.149 118.853 723.697 120.29 720.574 120.457 cv
716.357 120.683 714.841 118.231 714.841 118.231 cv
714.597 110.637 li
725.861 110.637 li
cp
.698039 .403922 .337255 rgb
f
725.861 111.719 mo
725.861 111.719 724.03 117.685 719.213 117.143 cv
715.331 116.707 714.262 111.018 714.262 111.018 cv
725.861 111.719 li
cp
0 0 0 rgb
f
712.109 94.4004 mo
712.109 94.4004 709.836 106.353 713.421 111.479 cv
717.267 116.976 722.638 114.846 724.771 113.078 cv
727.649 110.694 728.573 107.751 728.573 107.751 cv
728.573 107.751 732.671 108.413 733.907 105.045 cv
735.206 101.508 732.569 98.7872 730.528 98.6954 cv
728.486 98.6031 728.262 98.9825 728.262 98.9825 cv
728.724 95.2383 li
728.724 95.2383 715.85 81.9356 712.109 94.4004 cv
cp
.698039 .403922 .337255 rgb
f
729.112 104.316 mo
729.017 104.316 728.922 104.278 728.853 104.203 cv
728.722 104.06 728.731 103.838 728.874 103.706 cv
731.917 100.898 li
732.059 100.765 732.282 100.776 732.414 100.919 cv
732.544 101.061 732.536 101.283 732.393 101.415 cv
729.35 104.223 li
729.283 104.285 729.197 104.316 729.112 104.316 cv
cp
0 0 0 rgb
f
732.031 104.707 mo
731.961 104.707 731.891 104.686 731.83 104.644 cv
729.925 103.317 li
729.766 103.206 729.727 102.987 729.838 102.828 cv
729.95 102.669 730.169 102.629 730.328 102.74 cv
732.232 104.066 li
732.391 104.178 732.43 104.397 732.319 104.556 cv
732.251 104.654 732.141 104.707 732.031 104.707 cv
cp
f
718.586 106.809 mo
718.477 106.809 718.369 106.757 718.3 106.661 cv
716.809 104.563 717.934 101.479 717.983 101.348 cv
718.05 101.167 718.251 101.074 718.435 101.142 cv
718.617 101.21 718.709 101.412 718.641 101.594 cv
718.63 101.622 717.599 104.461 718.873 106.253 cv
718.986 106.412 718.949 106.631 718.791 106.744 cv
718.728 106.788 718.657 106.809 718.586 106.809 cv
cp
f
713.982 97.8702 mo
713.896 97.8702 713.811 97.8389 713.743 97.7764 cv
713.601 97.6446 713.592 97.4219 713.724 97.2798 cv
714.498 96.4458 715.919 96.3052 715.979 96.2994 cv
716.166 96.2832 716.342 96.4239 716.361 96.6163 cv
716.379 96.8096 716.238 96.981 716.044 96.9996 cv
716.032 97.0005 714.829 97.1226 714.24 97.7574 cv
714.17 97.8321 714.077 97.8702 713.982 97.8702 cv
cp
f
723.841 97.5953 mo
723.753 97.5953 723.665 97.5601 723.598 97.4903 cv
723.001 96.855 721.789 96.7413 721.777 96.7403 cv
721.593 96.7242 721.458 96.5625 721.473 96.3794 cv
721.49 96.1973 721.634 96.0611 721.834 96.0762 cv
721.893 96.0811 723.309 96.2105 724.085 97.0332 cv
724.211 97.167 724.204 97.378 724.07 97.5044 cv
724.005 97.565 723.923 97.5953 723.841 97.5953 cv
cp
f
720.008 109.399 mo
720.27 109.503 720.581 109.567 720.867 109.478 cv
721.113 109.4 721.324 109.211 721.496 108.914 cv
720.008 109.399 li
cp
720.583 110.222 mo
719.723 110.222 718.966 109.612 718.928 109.582 cv
718.829 109.501 718.782 109.371 718.805 109.245 cv
718.829 109.119 718.919 109.015 719.042 108.976 cv
721.998 108.011 li
722.124 107.97 722.258 108.002 722.351 108.092 cv
722.445 108.183 722.481 108.318 722.444 108.443 cv
722.171 109.378 721.711 109.952 721.074 110.149 cv
720.909 110.2 720.744 110.222 720.583 110.222 cv
cp
f
717.784 121.364 mo
717.784 121.364 716.198 135.193 716.198 145.086 cv
716.198 153.118 716.852 169.373 716.852 169.373 cv
721.459 169.373 li
721.459 169.373 720.373 147.989 720.373 142.76 cv
720.373 137.044 721.484 121.364 721.484 121.364 cv
721.484 121.364 720.105 119.843 717.784 121.364 cv
cp
.721569 .835294 1 rgb
f
734.659 185.644 mo
714.263 198.092 li
713.522 198.545 712.368 198.355 711.686 197.668 cv
684.128 169.888 li
683.447 169.201 683.495 168.277 684.236 167.824 cv
704.632 155.376 li
705.374 154.923 706.528 155.114 707.21 155.801 cv
734.767 183.58 li
735.449 184.267 735.4 185.191 734.659 185.644 cv
cp
.188235 .25098 .407843 rgb
f
732.273 187.091 mo
711.878 199.54 li
711.136 199.993 709.982 199.802 709.3 199.115 cv
681.743 171.336 li
681.061 170.649 681.11 169.725 681.851 169.272 cv
702.247 156.824 li
702.988 156.371 704.142 156.561 704.824 157.249 cv
732.381 185.028 li
733.063 185.715 733.015 186.639 732.273 187.091 cv
cp
.25098 .313726 .498039 rgb
f
733.733 163.282 mo
732.669 161.996 731.07 161.29 729.405 161.392 cv
726.688 161.559 722.585 161.877 721.637 162.316 cv
720.191 162.986 716.906 165.63 716.906 165.63 cv
718.259 167.546 li
718.259 167.546 705.766 174.07 706.777 176.641 cv
707.465 178.393 713.007 175.884 713.007 175.884 cv
713.007 175.884 707.464 178.957 708.427 180.877 cv
709.39 182.797 716.534 179.774 716.534 179.774 cv
716.534 179.774 711.025 183.308 713.947 184.177 cv
716.87 185.046 736.777 179.574 737.821 173.712 cv
738.507 169.858 735.721 165.686 733.733 163.282 cv
cp
.698039 .403922 .337255 rgb
f
717.783 167.727 mo
717.666 167.727 717.551 167.668 717.484 167.561 cv
717.381 167.396 717.432 167.18 717.597 167.077 cv
720.78 165.099 li
720.943 164.996 721.16 165.046 721.264 165.211 cv
721.367 165.377 721.316 165.593 721.151 165.695 cv
717.968 167.674 li
717.911 167.71 717.846 167.727 717.783 167.727 cv
cp
0 0 0 rgb
f
712.029 176.58 mo
711.904 176.58 711.783 176.512 711.719 176.394 cv
711.628 176.223 711.692 176.01 711.863 175.919 cv
720.2 171.445 li
720.369 171.354 720.584 171.417 720.675 171.588 cv
720.767 171.759 720.703 171.972 720.532 172.064 cv
712.195 176.538 li
712.142 176.566 712.086 176.58 712.029 176.58 cv
cp
f
715.545 180.772 mo
715.421 180.772 715.3 180.706 715.237 180.588 cv
715.144 180.418 715.207 180.205 715.378 180.112 cv
723.842 175.51 li
724.013 175.417 724.226 175.48 724.319 175.651 cv
724.412 175.822 724.349 176.035 724.178 176.127 cv
715.713 180.729 li
715.66 180.758 715.602 180.772 715.545 180.772 cv
cp
f
742.965 177.004 mo
739.422 178.735 li
738.961 178.96 738.406 178.769 738.18 178.308 cv
728.746 158.988 li
728.521 158.528 728.712 157.972 729.172 157.747 cv
732.716 156.016 li
733.177 155.792 733.733 155.982 733.958 156.443 cv
743.392 175.763 li
743.618 176.223 743.426 176.78 742.965 177.004 cv
cp
.901961 .956863 1 rgb
f
734.289 117.145 mo
734.289 117.145 759.89 122.156 766.028 143.111 cv
773.184 167.543 744.623 175.37 744.623 175.37 cv
734.289 155.13 li
734.289 117.145 li
cp
.572549 .705882 .917647 rgb
f
734.967 154.511 mo
734.872 154.511 734.777 154.473 734.708 154.396 cv
734.577 154.252 734.587 154.03 734.731 153.9 cv
735.164 153.506 745.37 144.237 749.038 142.444 cv
749.213 142.361 749.422 142.432 749.507 142.606 cv
749.593 142.78 749.521 142.991 749.346 143.076 cv
745.768 144.825 735.309 154.324 735.204 154.419 cv
735.136 154.481 735.052 154.511 734.967 154.511 cv
cp
.901961 .956863 1 rgb
f
743.826 141.406 mo
743.603 141.406 743.403 141.495 743.213 141.677 cv
742.277 142.582 741.957 145.367 741.877 147.23 cv
743.218 145.054 744.571 142.332 744.187 141.567 cv
744.164 141.519 744.113 141.419 743.869 141.407 cv
743.854 141.406 743.839 141.406 743.826 141.406 cv
cp
741.503 148.812 mo
741.47 148.812 741.437 148.807 741.404 148.797 cv
741.256 148.753 741.155 148.619 741.152 148.465 cv
741.148 148.233 741.084 142.757 742.725 141.171 cv
743.069 140.839 743.476 140.688 743.904 140.705 cv
744.444 140.732 744.698 141.018 744.816 141.252 cv
745.608 142.833 742.439 147.697 741.795 148.656 cv
741.729 148.755 741.619 148.812 741.503 148.812 cv
cp
f
714.795 117.044 mo
714.795 117.044 711.902 126.756 712.876 126.566 cv
713.849 126.377 719.649 121.169 719.649 121.169 cv
719.649 121.169 724.764 125.937 726.149 125.972 cv
727.533 126.008 726.149 116.159 726.149 116.159 cv
726.149 116.159 723.995 119.474 719.944 119.712 cv
715.468 119.976 714.795 117.044 714.795 117.044 cv
cp
f
711.558 98.6978 mo
711.558 98.6978 713.236 95.8482 714.597 93.8311 cv
715.959 91.8145 715.959 91.8145 715.959 91.8145 cv
715.959 91.8145 717.409 96.462 720.673 98.3033 cv
723.938 100.145 727.622 99.7725 727.622 99.7725 cv
727.622 102.629 li
727.622 102.629 728.501 98.8633 729.112 98.7735 cv
729.724 98.6841 730.651 98.5249 731.726 99.0215 cv
732.811 99.522 733.056 100.051 733.056 100.051 cv
733.056 100.051 734.168 93.2173 733.481 91.8145 cv
732.794 90.4112 726.21 84.8653 717.011 85.501 cv
707.65 86.148 711.558 98.6978 711.558 98.6978 cv
cp
0 0 0 rgb
f
715.266 101.905 mo
715.064 101.901 714.911 101.74 714.915 101.546 cv
714.955 99.7198 li
714.041 98.9747 li
713.89 98.8521 713.867 98.6309 713.99 98.48 cv
714.113 98.3301 714.336 98.3082 714.484 98.4297 cv
715.532 99.2832 li
715.616 99.3516 715.664 99.4551 715.662 99.5635 cv
715.618 101.562 li
715.614 101.753 715.457 101.905 715.266 101.905 cv
cp
f
721.907 101.976 mo
721.705 101.972 721.551 101.811 721.555 101.617 cv
721.596 99.7671 li
720.716 98.879 li
720.58 98.7413 720.582 98.5186 720.719 98.3819 cv
720.857 98.2466 721.079 98.2461 721.216 98.3848 cv
722.201 99.379 li
722.267 99.4463 722.304 99.5386 722.302 99.6338 cv
722.258 101.632 li
722.254 101.824 722.097 101.976 721.907 101.976 cv
cp
f
727.387 89.0694 mo
727.387 89.0694 726.613 80.3277 732.729 80.2105 cv
738.845 80.0938 736.551 91.6685 732.729 92.6036 cv
728.907 93.5391 727.387 89.0694 727.387 89.0694 cv
cp
f
679.94 137.606 mo
680.025 140.461 680.457 144.246 681.431 144.701 cv
681.495 144.731 681.693 144.822 682.092 144.487 cv
683.592 143.232 681.434 139.627 679.94 137.606 cv
cp
681.58 145.438 mo
681.404 145.438 681.253 145.394 681.133 145.338 cv
679.311 144.486 679.221 137.878 679.221 136.563 cv
679.221 136.414 679.314 136.282 679.454 136.232 cv
679.593 136.181 679.751 136.224 679.843 136.338 cv
680.391 137.001 685.122 142.868 682.544 145.026 cv
682.172 145.337 681.846 145.438 681.58 145.438 cv
cp
.901961 .956863 1 rgb
f
722.728 302.112 mo
722.728 302.112 716.558 323.394 717.823 327.837 cv
719.086 332.28 732.064 337.424 736.39 337.19 cv
740.715 336.957 748.39 329.504 749.442 326.815 cv
750.495 324.126 745.159 298.461 739.079 300.094 cv
733 301.727 722.728 302.112 722.728 302.112 cv
cp
.505882 .807843 .917647 rgb
f
722.728 302.112 mo
722.728 302.112 725.741 316.146 732.878 316.146 cv
740.014 316.146 743.841 304.282 743.841 304.282 cv
740.95 291.008 li
722.728 302.112 li
cp
.698039 .403922 .337255 rgb
f
690.68 169.723 mo
690.276 169.723 689.877 169.571 689.568 169.275 cv
686.816 166.64 li
686.675 166.506 686.671 166.283 686.805 166.143 cv
686.94 166.003 687.162 165.999 687.302 166.132 cv
690.054 168.768 li
690.357 169.057 690.814 169.103 691.168 168.878 cv
698.419 164.263 li
698.649 164.116 698.8 163.876 698.832 163.604 cv
698.864 163.331 698.772 163.063 698.582 162.866 cv
696.32 160.541 li
696.184 160.401 696.188 160.179 696.327 160.044 cv
696.467 159.908 696.688 159.912 696.824 160.05 cv
699.086 162.376 li
699.424 162.725 699.586 163.202 699.53 163.685 cv
699.473 164.168 699.206 164.595 698.795 164.856 cv
691.544 169.471 li
691.278 169.64 690.978 169.723 690.68 169.723 cv
cp
.968627 .701961 .411765 rgb
f
360.494 86.4668 mo
351.391 77.2354 350.919 62.7022 359.056 52.9341 cv
359.566 52.3028 360.128 51.69 360.725 51.0938 cv
365.414 46.4727 371.452 44.0772 377.557 43.9073 cv
378.324 43.8882 379.089 43.8946 379.861 43.9542 cv
379.965 43.9527 380.082 43.9522 380.185 43.9639 cv
380.481 43.9834 380.789 44.0176 381.096 44.0513 cv
381.609 44.108 382.12 44.1773 382.616 44.271 cv
383.113 44.3521 383.595 44.4571 384.076 44.5621 cv
384.139 44.5816 384.19 44.5875 384.253 44.6075 cv
384.645 44.7027 385.035 44.8106 385.424 44.9312 cv
385.45 44.9341 385.475 44.9371 385.487 44.9512 cv
385.713 45.0152 385.938 45.0918 386.163 45.1685 cv
386.266 45.1797 386.353 45.2154 386.439 45.2637 cv
386.977 45.44 387.511 45.6548 388.044 45.8819 cv
388.379 46.023 388.701 46.1622 389.034 46.316 cv
389.245 46.4039 389.455 46.5049 389.65 46.6172 cv
389.846 46.7168 390.056 46.8179 390.251 46.9302 cv
390.643 47.1421 391.034 47.3667 391.41 47.6031 cv
391.858 47.8863 392.306 48.1822 392.752 48.4908 cv
393.932 49.3218 395.047 50.2623 396.098 51.3257 cv
403.696 59.0284 405.268 70.4131 400.877 79.6348 cv
399.671 82.2007 397.993 84.5977 395.867 86.6988 cv
386.037 96.397 370.205 96.2974 360.494 86.4668 cv
cp
f
400.879 79.6407 mo
378.295 68.896 li
382.898 49.564 li
388.048 45.8765 li
389.685 46.5616 391.267 47.4292 392.747 48.4878 cv
393.926 49.3165 395.043 50.2632 396.093 51.3277 cv
403.695 59.0293 405.272 70.4122 400.879 79.6407 cv
cp
.639216 .482353 .564706 rgb
f
378.29 68.8892 mo
359.056 52.9341 li
359.566 52.3028 360.128 51.69 360.725 51.0938 cv
365.414 46.4727 371.452 44.0772 377.557 43.9073 cv
378.324 43.8882 379.089 43.8946 379.861 43.9542 cv
378.29 68.8892 li
cp
.25098 .313726 .498039 rgb
f
378.29 68.8892 mo
377.557 43.9073 li
378.324 43.8882 379.089 43.8946 379.861 43.9542 cv
379.965 43.9527 380.069 43.9512 380.185 43.9639 cv
380.481 43.9834 380.789 44.0176 381.096 44.0513 cv
381.609 44.108 382.12 44.1773 382.616 44.271 cv
383.113 44.3521 383.595 44.4571 384.076 44.5621 cv
384.139 44.5816 384.19 44.5875 384.253 44.6075 cv
384.645 44.7027 385.035 44.8106 385.424 44.9312 cv
385.45 44.9341 385.475 44.9371 385.487 44.9512 cv
385.713 45.0152 385.938 45.0918 386.163 45.1685 cv
386.266 45.1797 386.353 45.2154 386.439 45.2637 cv
387.327 45.5567 388.184 45.9107 389.034 46.316 cv
389.245 46.4039 389.455 46.5049 389.65 46.6172 cv
389.846 46.7168 390.056 46.8179 390.251 46.9302 cv
390.643 47.1421 391.034 47.3667 391.41 47.6031 cv
391.858 47.8863 392.306 48.1822 392.752 48.4908 cv
378.29 68.8892 li
cp
.572549 .705882 .917647 rgb
f
230.982 333.194 mo
230.491 333.194 230.007 332.961 229.704 332.528 cv
169.838 246.858 li
108.82 332.54 li
108.322 333.241 107.349 333.405 106.647 332.905 cv
105.946 332.406 105.782 331.432 106.281 330.731 cv
168.581 243.251 li
168.875 242.838 169.355 242.601 169.857 242.596 cv
170.364 242.599 170.837 242.847 171.128 243.262 cv
232.258 330.743 li
232.752 331.448 232.579 332.419 231.874 332.913 cv
231.602 333.103 231.291 333.194 230.982 333.194 cv
cp
.25098 .313726 .498039 rgb
f
220.125 245.756 mo
136.432 245.756 li
133.475 245.756 131.137 242.848 131.343 239.426 cv
138.764 116.201 li
138.95 113.1 141.173 110.695 143.853 110.695 cv
227.545 110.695 li
230.503 110.695 232.841 113.604 232.635 117.026 cv
225.214 240.251 li
225.027 243.352 222.804 245.756 220.125 245.756 cv
cp
.733333 .690196 .756863 rgb
f
214.458 245.756 mo
130.765 245.756 li
127.808 245.756 125.47 242.848 125.676 239.426 cv
133.097 116.201 li
133.283 113.1 135.506 110.695 138.186 110.695 cv
221.878 110.695 li
224.836 110.695 227.174 113.604 226.967 117.026 cv
219.547 240.251 li
219.36 243.352 217.137 245.756 214.458 245.756 cv
cp
.878431 .87451 .898039 rgb
f
196.75 146.46 mo
196.123 157.742 186.468 166.888 175.186 166.888 cv
163.904 166.888 155.267 157.742 155.894 146.46 cv
156.521 135.177 166.175 126.031 177.457 126.031 cv
188.739 126.031 197.377 135.177 196.75 146.46 cv
cp
.639216 .482353 .564706 rgb
f
188.512 126.031 mo
176.322 146.46 li
198.412 140.523 li
188.512 126.031 li
cp
.572549 .705882 .917647 rgb
f
158.008 220.515 mo
148.167 220.515 li
150.51 190.528 li
160.352 190.528 li
158.008 220.515 li
cp
.360784 .411765 .647059 rgb
f
177.223 220.515 mo
167.381 220.515 li
169.266 195.978 li
179.108 195.978 li
177.223 220.515 li
cp
f
196.906 220.515 mo
187.065 220.515 li
188.57 203.595 li
198.412 203.595 li
196.906 220.515 li
cp
f
206.513 220.867 mo
138.325 220.867 li
138.228 220.867 138.134 220.826 138.068 220.754 cv
138.002 220.682 137.967 220.586 137.975 220.489 cv
140.552 186.648 li
140.568 186.454 140.74 186.297 140.93 186.324 cv
141.123 186.338 141.269 186.507 141.253 186.701 cv
138.705 220.164 li
206.513 220.164 li
206.707 220.164 206.864 220.321 206.864 220.515 cv
206.864 220.71 206.707 220.867 206.513 220.867 cv
cp
.25098 .313726 .498039 rgb
f
269.409 308.469 mo
274.594 300.931 li
256.567 288.774 li
248.666 295.583 li
260.766 309.685 li
269.409 308.469 li
cp
.956863 .517647 .384314 rgb
f
304.474 302.147 mo
304.228 315.277 li
327.44 315.034 li
326.452 300.931 li
304.474 302.147 li
cp
f
272.527 334.184 mo
272.02 334.117 271.679 333.617 271.769 333.088 cv
272.192 330.586 273.696 323.594 277.654 320.627 cv
282.518 316.979 292.71 315.52 296.416 313.088 cv
300.122 310.658 304.269 304.788 306.48 305.899 cv
308.692 307.01 312.861 312.117 318.883 311.387 cv
324.906 310.658 327.685 309.199 329.307 310.658 cv
330.928 312.117 331.855 332.541 331.16 333.756 cv
330.465 334.972 321.982 333.849 321.244 334.045 cv
320.505 334.243 318.42 329.379 317.03 330.109 cv
315.641 330.838 313.945 333.12 311.898 334.168 cv
309.987 335.145 278.6 334.999 272.527 334.184 cv
cp
.639216 .482353 .564706 rgb
f
289.482 228.717 mo
292.315 173.038 li
327.02 172.794 li
327.02 172.794 331.269 187.14 332.45 201 cv
333.63 214.859 336.699 302.877 336.227 304.092 cv
335.755 305.308 297.273 306.767 294.913 305.308 cv
292.552 303.849 289.482 228.717 289.482 228.717 cv
cp
.968627 .701961 .411765 rgb
f
211.016 295.874 mo
210.631 295.535 210.63 294.931 211.005 294.544 cv
212.783 292.707 218.022 287.754 223.021 287.502 cv
229.165 287.192 238.519 291.663 243.002 291.713 cv
247.485 291.765 254.295 289.214 255.511 291.368 cv
256.729 293.52 257.309 300.072 262.761 302.824 cv
268.212 305.576 271.367 305.917 271.893 308.028 cv
272.419 310.139 261.568 327.571 260.295 328.191 cv
259.022 328.81 252.567 323.154 251.837 322.905 cv
251.107 322.656 252.132 317.467 250.554 317.296 cv
248.977 317.127 246.26 318.071 243.952 317.797 cv
241.797 317.543 215.631 299.932 211.016 295.874 cv
cp
.639216 .482353 .564706 rgb
f
286.177 172.551 mo
286.177 172.551 245.335 283.182 245.807 285.614 cv
246.279 288.045 277.442 305.308 279.331 305.308 cv
281.22 305.308 294.913 280.264 294.913 280.264 cv
296.565 172.794 li
286.177 172.551 li
cp
.968627 .701961 .411765 rgb
f
304.227 315.628 mo
304.158 315.628 304.088 315.608 304.027 315.566 cv
298.39 311.663 li
298.231 311.552 298.191 311.334 298.302 311.173 cv
298.413 311.014 298.631 310.975 298.791 311.085 cv
304.427 314.988 li
304.587 315.098 304.627 315.317 304.516 315.477 cv
304.448 315.576 304.338 315.628 304.227 315.628 cv
cp
1 1 1 rgb
f
298.59 317.912 mo
298.516 317.912 298.441 317.888 298.378 317.84 cv
293.949 314.484 li
293.794 314.367 293.764 314.146 293.881 313.992 cv
293.998 313.836 294.218 313.806 294.374 313.923 cv
298.803 317.28 li
298.958 317.397 298.988 317.618 298.871 317.772 cv
298.802 317.864 298.696 317.912 298.59 317.912 cv
cp
f
248.073 297.979 mo
247.958 297.979 247.845 297.922 247.777 297.819 cv
244.041 292.07 li
243.936 291.907 243.982 291.69 244.145 291.584 cv
244.308 291.479 244.525 291.524 244.631 291.687 cv
248.367 297.436 li
248.473 297.599 248.427 297.816 248.264 297.922 cv
248.205 297.961 248.138 297.979 248.073 297.979 cv
cp
f
240.578 296.314 mo
240.458 296.314 240.341 296.253 240.275 296.141 cv
237.449 291.356 li
237.35 291.189 237.406 290.973 237.573 290.875 cv
237.741 290.775 237.956 290.831 238.054 290.999 cv
240.881 295.784 li
240.979 295.951 240.923 296.167 240.756 296.265 cv
240.7 296.298 240.639 296.314 240.578 296.314 cv
cp
f
325.698 189.075 mo
319.402 189.075 315.559 181.256 315.517 181.169 cv
315.433 180.995 315.506 180.785 315.681 180.701 cv
315.855 180.616 316.065 180.689 316.15 180.865 cv
316.193 180.955 320.546 189.79 327.359 188.174 cv
327.549 188.127 327.737 188.247 327.782 188.435 cv
327.827 188.625 327.71 188.814 327.521 188.858 cv
326.894 189.006 326.284 189.075 325.698 189.075 cv
cp
.25098 .313726 .498039 rgb
f
292.514 285.055 mo
292.303 285.045 292.153 284.88 292.162 284.687 cv
296.459 194.338 li
287.052 188.128 li
286.89 188.022 286.845 187.804 286.952 187.642 cv
287.06 187.48 287.277 187.434 287.44 187.543 cv
297.013 193.862 li
297.116 193.93 297.176 194.047 297.17 194.171 cv
292.864 284.72 li
292.856 284.909 292.7 285.055 292.514 285.055 cv
cp
f
303.854 113.722 mo
303.854 113.722 294.345 114.153 290.575 121.772 cv
286.806 129.389 283.956 174.794 283.956 174.794 cv
283.956 174.794 294.499 179.455 309.885 179.253 cv
325.272 179.052 330.475 175.066 330.475 175.066 cv
333.435 147.065 li
333.435 147.065 332.199 117.554 328.363 115.484 cv
324.527 113.414 310.222 112.085 303.854 113.722 cv
cp
.407843 .713726 .847059 rgb
f
303.931 89.3614 mo
303.931 89.3614 299.097 80.0025 303.663 78.3218 cv
308.229 76.6407 313.246 81.9161 313.246 81.9161 cv
313.246 81.9161 323.144 83.3848 326.61 88.9366 cv
330.075 94.4883 320.23 103.274 320.23 103.274 cv
303.931 89.3614 li
cp
0 0 0 rgb
f
318.346 105.192 mo
318.373 114.393 li
318.373 114.393 316.721 117.042 311.34 117.495 cv
307.332 117.833 305.921 116.93 305.921 116.93 cv
306.466 112.269 li
307.004 107.724 li
316.716 105.558 li
318.346 105.192 li
cp
.956863 .517647 .384314 rgb
f
316.716 105.558 mo
316.694 105.809 316.599 106.106 316.452 106.446 cv
314.406 111.048 308.781 112.055 306.466 112.269 cv
307.004 107.724 li
316.716 105.558 li
cp
0 0 0 rgb
f
304.892 86.7593 mo
304.892 86.7593 300.097 98.3082 302.019 104.711 cv
303.941 111.115 309.787 109.994 313.273 108.685 cv
316.758 107.376 318.347 105.194 318.347 105.194 cv
318.347 105.194 321.645 106.245 323.781 103.157 cv
325.918 100.069 324.503 96.5938 322.617 95.8262 cv
320.731 95.0586 318.53 96.4507 318.53 96.4507 cv
320.213 93.0889 li
320.213 93.0889 312.563 76.3033 304.892 86.7593 cv
cp
.956863 .517647 .384314 rgb
f
318.884 101.402 mo
318.775 101.402 318.668 101.352 318.599 101.256 cv
318.485 101.099 318.52 100.879 318.677 100.766 cv
322.814 97.773 li
322.972 97.6607 323.191 97.6949 323.304 97.8516 cv
323.419 98.0088 323.383 98.2286 323.226 98.3423 cv
319.089 101.335 li
319.027 101.38 318.955 101.402 318.884 101.402 cv
cp
0 0 0 rgb
f
322.662 101.339 mo
322.633 101.339 322.604 101.336 322.575 101.329 cv
319.843 100.634 li
319.655 100.586 319.541 100.395 319.589 100.207 cv
319.637 100.019 319.833 99.9053 320.016 99.9527 cv
322.748 100.647 li
322.936 100.695 323.05 100.886 323.002 101.074 cv
322.961 101.233 322.818 101.339 322.662 101.339 cv
cp
f
305.26 99.9161 mo
305.089 99.9161 304.94 99.792 304.913 99.6187 cv
304.42 96.4581 306.472 94.7422 306.56 94.6705 cv
306.709 94.5479 306.93 94.5699 307.053 94.7203 cv
307.176 94.8697 307.154 95.0909 307.005 95.2144 cv
306.931 95.2764 305.179 96.7598 305.607 99.5103 cv
305.637 99.7022 305.506 99.8819 305.315 99.9117 cv
305.296 99.9146 305.278 99.9161 305.26 99.9161 cv
cp
f
303.74 95.2945 mo
303.71 95.2945 303.679 95.2906 303.648 95.2823 cv
303.461 95.2315 303.35 95.0386 303.4 94.8511 cv
303.97 92.7393 li
304.021 92.5518 304.212 92.439 304.402 92.4917 cv
304.588 92.5425 304.7 92.7354 304.649 92.9229 cv
304.079 95.0347 li
304.037 95.1915 303.895 95.2945 303.74 95.2945 cv
cp
f
309.563 95.6851 mo
309.532 95.6851 309.502 95.6812 309.471 95.6729 cv
309.284 95.6221 309.172 95.4292 309.223 95.2417 cv
309.794 93.1299 li
309.843 92.9424 310.033 92.8311 310.224 92.8824 cv
310.411 92.9332 310.523 93.126 310.472 93.3135 cv
309.902 95.4253 li
309.86 95.5821 309.718 95.6851 309.563 95.6851 cv
cp
f
303.931 89.3614 mo
303.931 89.3614 304.924 87.5088 307.219 87.4864 cv
309.514 87.4644 310.859 89.0767 310.859 89.0767 cv
310.859 89.0767 309.863 92.9444 312.99 94.9883 cv
316.117 97.0323 318.53 96.4507 318.53 96.4507 cv
320.792 95.6373 li
322.442 92.3248 li
315.873 85.2867 li
307.385 80.8374 li
303.077 84.7715 li
303.931 89.3614 li
cp
f
313.246 81.9161 mo
313.246 81.9161 313.53 76.8243 318.884 79.0611 cv
324.238 81.2979 323.823 88.2447 323.823 88.2447 cv
313.246 81.9161 li
cp
f
303.506 89.7959 mo
303.327 89.7959 303.173 89.6592 303.156 89.4771 cv
303.138 89.2842 303.28 89.1128 303.473 89.0943 cv
305.221 88.9297 li
305.407 88.9185 305.586 89.0538 305.604 89.2471 cv
305.622 89.44 305.48 89.6114 305.286 89.6299 cv
303.539 89.7945 li
303.528 89.7955 303.517 89.7959 303.506 89.7959 cv
cp
f
311.368 92.1758 mo
311.321 92.1758 311.273 92.1665 311.228 92.1465 cv
308.868 91.1202 li
308.69 91.043 308.608 90.8355 308.686 90.6578 cv
308.764 90.48 308.974 90.3995 309.148 90.4756 cv
311.508 91.502 li
311.686 91.5791 311.768 91.7867 311.69 91.9644 cv
311.632 92.0967 311.503 92.1758 311.368 92.1758 cv
cp
f
304.38 103.034 mo
304.264 103.034 304.15 102.977 304.083 102.872 cv
302.781 100.83 li
302.676 100.666 302.724 100.449 302.888 100.344 cv
303.053 100.241 303.269 100.289 303.373 100.452 cv
304.676 102.494 li
304.781 102.657 304.732 102.875 304.568 102.979 cv
304.51 103.016 304.444 103.034 304.38 103.034 cv
cp
f
287.203 115.664 mo
287.203 115.664 293.114 96.272 295.577 96.566 cv
298.04 96.8604 302.938 101.785 303.936 103.591 cv
304.934 105.397 303.936 107.695 303.936 107.695 cv
303.936 107.695 304.908 108.914 303.936 109.7 cv
302.964 110.486 300.173 108.817 300.173 108.817 cv
300.173 108.817 302.636 121.157 295.413 122.634 cv
288.19 124.111 287.203 115.664 287.203 115.664 cv
cp
.956863 .517647 .384314 rgb
f
290.88 150.97 mo
290.88 150.97 293.811 145.163 295.203 138.672 cv
296.595 132.181 298.532 122.49 298.532 122.49 cv
285.758 112.988 li
285.758 112.988 275.094 129.298 271.376 144.87 cv
267.657 160.441 270.416 165.2 278.353 164.238 cv
287.755 163.099 290.88 150.97 290.88 150.97 cv
cp
.407843 .713726 .847059 rgb
f
292.033 152.668 mo
288.049 168.095 li
284.878 168.095 276.334 167.982 273.637 166.741 cv
270.296 165.206 269.856 163.118 269.856 163.118 cv
269.856 163.118 267.565 160.94 267.7 159.766 cv
267.825 158.581 269.134 153.266 269.134 153.266 cv
269.134 153.266 267.283 148.887 268.976 148.649 cv
270.657 148.424 273.581 148.018 273.581 148.018 cv
273.581 148.018 279.043 145.625 281.401 146.291 cv
283.76 146.957 290.035 152.735 290.035 152.735 cv
292.033 152.668 li
cp
.956863 .517647 .384314 rgb
f
310.39 117.821 mo
306.823 117.821 305.44 116.987 305.375 116.946 cv
305.21 116.843 305.16 116.627 305.263 116.462 cv
305.365 116.297 305.583 116.246 305.748 116.35 cv
305.762 116.359 307.494 117.369 312.123 117.057 cv
316.721 116.741 318.852 113.691 318.873 113.661 cv
318.982 113.501 319.199 113.459 319.36 113.568 cv
319.521 113.677 319.563 113.895 319.454 114.055 cv
319.361 114.192 317.125 117.418 312.17 117.758 cv
311.524 117.802 310.932 117.821 310.39 117.821 cv
cp
.360784 .411765 .647059 rgb
f
281.448 149.39 mo
281.415 149.39 281.381 149.385 281.348 149.376 cv
275.386 147.615 li
275.2 147.561 275.093 147.365 275.148 147.179 cv
275.203 146.993 275.396 146.886 275.585 146.941 cv
281.547 148.702 li
281.733 148.756 281.84 148.952 281.785 149.138 cv
281.74 149.291 281.6 149.39 281.448 149.39 cv
cp
0 0 0 rgb
f
270.776 153.495 mo
270.719 153.495 270.662 153.481 270.608 153.452 cv
268.509 152.309 li
268.338 152.216 268.275 152.003 268.368 151.833 cv
268.461 151.663 268.673 151.597 268.845 151.692 cv
270.944 152.835 li
271.115 152.927 271.178 153.141 271.085 153.311 cv
271.022 153.428 270.901 153.495 270.776 153.495 cv
cp
f
303.936 107.04 mo
303.86 107.04 303.784 107.016 303.719 106.965 cv
298.315 102.73 li
298.162 102.61 298.135 102.389 298.255 102.236 cv
298.376 102.083 298.597 102.058 298.749 102.176 cv
304.153 106.412 li
304.306 106.532 304.333 106.752 304.213 106.905 cv
304.144 106.994 304.04 107.04 303.936 107.04 cv
cp
f
303.128 102.805 mo
303.063 102.805 302.998 102.787 302.938 102.749 cv
298.341 99.7764 li
298.178 99.6709 298.131 99.4532 298.237 99.2901 cv
298.342 99.127 298.56 99.0796 298.723 99.1861 cv
303.32 102.158 li
303.483 102.263 303.529 102.481 303.424 102.644 cv
303.357 102.748 303.244 102.805 303.128 102.805 cv
cp
f
289.981 151.299 mo
287.203 170.077 li
287.203 170.077 328.203 181.965 336.87 161.076 cv
345.569 140.108 335.634 119.003 328.363 115.484 cv
321.092 111.965 313.884 145.076 313.884 145.076 cv
289.981 151.299 li
cp
.407843 .713726 .847059 rgb
f
292.555 172.324 mo
287.53 171.755 li
286.649 171.657 286.015 170.862 286.115 169.98 cv
288.343 150.243 li
288.443 149.362 289.238 148.729 290.119 148.828 cv
295.144 149.395 li
296.025 149.495 296.659 150.29 296.559 151.17 cv
294.331 170.908 li
294.231 171.79 293.436 172.422 292.555 172.324 cv
cp
.901961 .956863 1 rgb
f
301.231 124.394 mo
298.307 128.732 li
297.838 129.428 296.895 129.612 296.2 129.143 cv
281.763 119.416 li
281.068 118.948 280.884 118.004 281.353 117.309 cv
284.276 112.97 li
284.745 112.274 285.688 112.091 286.383 112.559 cv
300.82 122.286 li
301.515 122.755 301.699 123.698 301.231 124.394 cv
cp
f
303.129 149.39 mo
302.999 149.39 302.874 149.317 302.813 149.192 cv
302.728 149.018 302.8 148.808 302.975 148.723 cv
303.068 148.677 312.415 144.168 321.607 143.393 cv
321.8 143.377 321.971 143.521 321.987 143.714 cv
322.003 143.907 321.86 144.077 321.666 144.093 cv
312.604 144.857 303.375 149.31 303.283 149.355 cv
303.233 149.379 303.181 149.39 303.129 149.39 cv
cp
.360784 .411765 .647059 rgb
f
319.119 140.876 mo
319.085 140.876 319.05 140.878 319.014 140.881 cv
317.784 140.996 315.95 142.991 314.843 144.385 cv
316.987 143.622 319.628 142.414 319.843 141.515 cv
319.866 141.419 319.869 141.285 319.685 141.106 cv
319.524 140.95 319.343 140.876 319.119 140.876 cv
cp
313.883 145.428 mo
313.773 145.428 313.667 145.376 313.599 145.283 cv
313.511 145.162 313.51 144.997 313.596 144.874 cv
313.919 144.415 316.812 140.381 318.949 140.181 cv
319.427 140.138 319.841 140.278 320.175 140.602 cv
320.584 140.999 320.591 141.407 320.527 141.679 cv
320.107 143.431 315.006 145.096 313.987 145.412 cv
313.953 145.422 313.919 145.428 313.883 145.428 cv
cp
f
293.527 297.979 mo
293.339 297.979 293.184 297.831 293.177 297.641 cv
293.169 297.447 293.32 297.284 293.514 297.276 cv
336.262 295.611 li
336.455 295.615 336.62 295.754 336.627 295.949 cv
336.635 296.143 336.483 296.306 336.29 296.314 cv
293.541 297.979 li
293.536 297.979 293.532 297.979 293.527 297.979 cv
cp
.25098 .313726 .498039 rgb
f
284.136 297.979 mo
284.081 297.979 284.023 297.965 283.97 297.937 cv
247.906 278.541 li
247.735 278.449 247.671 278.236 247.763 278.065 cv
247.855 277.894 248.067 277.83 248.239 277.921 cv
284.303 297.318 li
284.474 297.41 284.538 297.623 284.446 297.794 cv
284.383 297.912 284.262 297.979 284.136 297.979 cv
cp
f
507.761 300.482 mo
507.761 312.669 li
529.909 311.809 li
529.909 300.482 li
507.761 300.482 li
cp
.968627 .701961 .411765 rgb
f
456.624 299.109 mo
456.624 311.296 li
477.125 310.436 li
477.125 299.109 li
456.624 299.109 li
cp
f
503.656 166.44 mo
503.656 166.44 517.134 190.992 526.606 232.969 cv
535.245 271.257 537.106 302.925 537.106 302.925 cv
499.738 302.925 li
499.738 302.925 495.581 271.707 494.473 259.355 cv
493.366 247.002 489.682 230.467 489.682 230.467 cv
489.682 230.467 484.553 301.719 483.331 302.925 cv
482.108 304.131 446.336 303.192 446.718 301.555 cv
447.102 299.919 460.301 180.874 461.27 173.083 cv
464.248 149.133 503.656 166.44 503.656 166.44 cv
cp
.639216 .482353 .564706 rgb
f
482.213 329.329 mo
482.213 331.48 481.516 333.94 480.087 334.559 cv
478.659 335.179 467.098 336.469 456.983 335.557 cv
447.298 334.68 445.289 333.94 444.575 333.028 cv
444.226 332.564 444.907 330.413 445.688 328.331 cv
445.738 328.228 445.771 328.108 445.821 328.004 cv
446.219 326.955 446.634 325.94 446.933 325.217 cv
447.232 324.529 447.598 323.875 448.03 323.238 cv
449.076 321.742 451.153 318.644 451.684 317.044 cv
452.381 314.911 453.445 310.3 454.159 308.132 cv
454.874 305.999 456.618 305.551 456.618 305.551 cv
456.618 305.551 476.533 304.14 477.961 305.379 cv
479.374 306.601 480.087 316.752 480.087 318.283 cv
480.087 319.814 li
480.087 321.243 481.035 324.064 481.649 326.404 cv
481.815 326.989 481.948 327.54 482.047 328.039 cv
482.147 328.538 482.213 328.967 482.213 329.329 cv
cp
.572549 .705882 .917647 rgb
f
564.054 333.716 mo
562.792 334.284 509.061 335.884 507.814 333.716 cv
507.435 333.063 507.167 330.843 506.993 328.056 cv
506.55 321.483 506.55 311.711 506.55 311.711 cv
506.55 311.711 506.156 308.373 506.235 306.825 cv
506.297 305.294 532.144 305.878 532.144 305.878 cv
548.944 320.313 li
548.944 320.313 553.554 319.419 558.591 320.313 cv
561.259 320.778 562.981 324.339 563.834 327.695 cv
564.591 330.671 564.654 333.441 564.054 333.716 cv
cp
f
489.681 230.819 mo
489.461 230.803 489.316 230.634 489.331 230.441 cv
489.342 230.287 490.508 214.947 490.846 208.147 cv
491.184 201.355 491.198 198.102 491.198 198.07 cv
491.199 197.933 491.278 197.809 491.402 197.752 cv
503.508 192.169 li
503.682 192.089 503.893 192.166 503.975 192.341 cv
504.056 192.518 503.979 192.727 503.803 192.808 cv
491.899 198.296 li
491.89 199.141 491.837 202.372 491.547 208.182 cv
491.21 214.991 490.044 230.339 490.032 230.494 cv
490.018 230.678 489.864 230.819 489.681 230.819 cv
cp
.968627 .701961 .411765 rgb
f
457.13 316.129 mo
456.976 316.129 456.835 316.028 456.792 315.872 cv
456.74 315.685 456.849 315.491 457.037 315.439 cv
457.361 315.348 465.051 313.234 469.112 313.958 cv
471.81 314.437 li
469.731 312.827 465.012 309.6 462.122 310.878 cv
461.943 310.957 461.736 310.877 461.658 310.7 cv
461.579 310.522 461.659 310.314 461.836 310.236 cv
466.026 308.376 473.02 314.496 473.316 314.756 cv
473.434 314.861 473.468 315.031 473.4 315.172 cv
473.331 315.314 473.174 315.395 473.022 315.366 cv
468.989 314.649 li
465.08 313.956 457.302 316.095 457.224 316.117 cv
457.193 316.126 457.162 316.129 457.13 316.129 cv
cp
.639216 .482353 .564706 rgb
f
545.414 317.204 mo
545.377 317.202 535.304 316.128 535.304 316.128 cv
535.175 316.114 535.065 316.031 535.016 315.911 cv
534.967 315.792 534.988 315.655 535.07 315.555 cv
538.583 311.272 li
538.706 311.121 538.926 311.1 539.077 311.223 cv
539.227 311.346 539.249 311.568 539.126 311.717 cv
536.026 315.498 li
545.451 316.503 li
545.644 316.523 545.784 316.697 545.763 316.889 cv
545.744 317.07 545.591 317.204 545.414 317.204 cv
cp
f
461.269 193.316 mo
461.161 193.316 461.053 193.265 460.984 193.17 cv
460.871 193.013 460.906 192.794 461.063 192.679 cv
467.319 188.162 469.883 180.254 469.909 180.174 cv
469.968 179.99 470.165 179.884 470.35 179.946 cv
470.535 180.004 470.637 180.202 470.579 180.387 cv
470.553 180.468 467.923 188.592 461.475 193.25 cv
461.413 193.294 461.34 193.316 461.269 193.316 cv
cp
.968627 .701961 .411765 rgb
f
481.018 108.789 mo
481.018 108.789 469.953 109.381 461.08 117.021 cv
452.206 124.66 443.147 149.987 448.138 157.937 cv
453.13 165.886 459.483 166.44 459.483 166.44 cv
459.113 175.684 li
507.613 176.135 li
507.613 176.135 503.617 117.302 501.667 112.939 cv
499.717 108.576 481.018 108.789 481.018 108.789 cv
cp
f
541.868 135.278 mo
541.868 135.278 543.901 133.382 549.108 132.796 cv
551.569 132.519 554.613 132.504 557.315 133.079 cv
560.018 133.653 554.849 136.204 553.609 136.349 cv
552.369 136.493 551.666 138.004 551.666 138.004 cv
551.666 138.004 561.893 140.093 565.901 141.701 cv
569.909 143.31 567.195 145.584 567.195 145.584 cv
567.195 145.584 570.295 147.865 569.783 149.356 cv
569.27 150.848 563.758 149.555 563.758 149.555 cv
563.758 149.555 568.849 152.214 567.539 153.663 cv
566.228 155.111 540.36 152.501 537.407 146.358 cv
534.454 140.216 541.868 135.278 541.868 135.278 cv
cp
.956863 .517647 .384314 rgb
f
494.176 81.9458 mo
494.176 81.9458 498.146 86.3106 496.066 91.2134 cv
493.987 96.1158 491.491 82.4244 491.491 82.4244 cv
494.176 81.9458 li
cp
0 0 0 rgb
f
481.315 101.989 mo
481.29 110.757 li
481.29 110.757 482.863 113.283 487.992 113.715 cv
491.812 114.037 493.158 113.177 493.158 113.177 cv
492.637 108.734 li
492.125 104.401 li
482.868 102.337 li
481.315 101.989 li
cp
.956863 .517647 .384314 rgb
f
482.868 102.337 mo
482.889 102.577 481.471 103.35 481.612 103.675 cv
483.561 108.061 490.625 110.18 492.831 110.384 cv
492.125 104.401 li
482.868 102.337 li
cp
0 0 0 rgb
f
492.517 82.4068 mo
493.735 83.3697 494.596 84.7061 495.115 86.1695 cv
496.308 89.5367 498.731 97.4039 497.284 102.269 cv
495.404 108.59 489.712 107.492 486.319 106.205 cv
482.926 104.918 481.381 102.767 481.381 102.767 cv
481.381 102.767 478.169 103.808 476.092 100.764 cv
474.015 97.7188 475.397 94.2872 477.236 93.5274 cv
479.074 92.7676 481.214 94.1382 481.214 94.1382 cv
479.581 90.8233 li
479.581 90.8233 485.778 77.0757 492.517 82.4068 cv
cp
.956863 .517647 .384314 rgb
f
480.802 98.3926 mo
480.731 98.3926 480.659 98.3707 480.596 98.3257 cv
476.654 95.4732 li
476.497 95.3594 476.461 95.1397 476.575 94.9825 cv
476.69 94.8243 476.909 94.7911 477.066 94.9039 cv
481.008 97.7564 li
481.166 97.8702 481.201 98.0899 481.087 98.2471 cv
481.018 98.3423 480.911 98.3926 480.802 98.3926 cv
cp
0 0 0 rgb
f
477.202 98.3331 mo
477.044 98.3331 476.902 98.2271 476.861 98.0679 cv
476.813 97.8799 476.927 97.6885 477.115 97.6407 cv
479.718 96.979 li
479.91 96.9302 480.097 97.0455 480.146 97.2334 cv
480.194 97.4214 480.08 97.6128 479.892 97.6607 cv
477.289 98.3223 li
477.259 98.3296 477.23 98.3331 477.202 98.3331 cv
cp
f
493.787 96.9761 mo
493.735 96.9761 493.683 96.9649 493.633 96.941 cv
493.459 96.8565 493.385 96.6465 493.47 96.4717 cv
494.544 94.2481 492.828 91.8155 492.81 91.7911 cv
492.697 91.6333 492.733 91.4136 492.89 91.3003 cv
493.048 91.1871 493.267 91.2227 493.38 91.3809 cv
493.462 91.4942 495.357 94.1817 494.103 96.7774 cv
494.043 96.9029 493.917 96.9761 493.787 96.9761 cv
cp
f
495.236 92.5713 mo
495.081 92.5713 494.939 92.4683 494.897 92.3111 cv
494.353 90.2984 li
494.303 90.1114 494.414 89.9185 494.601 89.8677 cv
494.791 89.815 494.981 89.9278 495.032 90.1158 cv
495.576 92.1285 li
495.626 92.3155 495.515 92.5083 495.328 92.5591 cv
495.296 92.5674 495.266 92.5713 495.236 92.5713 cv
cp
f
495.255 118.581 mo
496.601 177.548 li
509.712 177.548 li
508.157 151.769 li
508.157 151.769 517.49 153.594 529.268 153.683 cv
541.045 153.771 545.868 152.566 545.868 152.566 cv
543.834 131.895 li
543.834 131.895 529.456 131.177 517.49 123.919 cv
505.525 116.66 501.072 109.186 493.503 109.367 cv
485.935 109.548 495.255 118.581 495.255 118.581 cv
cp
.968627 .701961 .411765 rgb
f
489.686 92.9439 mo
489.531 92.9439 489.389 92.8409 489.347 92.6836 cv
488.803 90.6709 li
488.753 90.4839 488.864 90.2911 489.051 90.2403 cv
489.243 90.189 489.431 90.3003 489.482 90.4883 cv
490.026 92.501 li
490.076 92.688 489.965 92.8809 489.778 92.9317 cv
489.747 92.94 489.716 92.9439 489.686 92.9439 cv
cp
0 0 0 rgb
f
495.236 88.6207 mo
495.203 88.6192 493.537 88.4624 493.537 88.4624 cv
493.343 88.4439 493.202 88.2725 493.22 88.0796 cv
493.238 87.8868 493.398 87.7491 493.603 87.7623 cv
495.269 87.919 li
495.462 87.9375 495.604 88.1089 495.586 88.3018 cv
495.569 88.4839 495.416 88.6207 495.236 88.6207 cv
cp
f
487.965 89.5992 mo
487.83 89.5992 487.701 89.5201 487.643 89.3877 cv
487.566 89.21 487.647 89.003 487.825 88.9253 cv
490.074 87.9468 li
490.252 87.8687 490.459 87.9507 490.537 88.129 cv
490.614 88.3067 490.533 88.5137 490.355 88.5914 cv
488.106 89.5699 li
488.06 89.5899 488.012 89.5992 487.965 89.5992 cv
cp
f
481.214 94.1382 mo
481.214 94.1382 482.174 97.7745 482.868 97.3194 cv
483.561 96.8648 484.142 91.5948 483.587 89.2476 cv
483.033 86.9004 482.635 85.7212 482.635 85.7212 cv
482.635 85.7212 492.201 84.7359 494.693 82.4244 cv
497.185 80.1133 491.833 78.7198 486.392 79.8287 cv
480.953 80.938 478.832 83.0181 478.832 83.0181 cv
478.832 83.0181 475.407 82.5562 474.159 84.6587 cv
472.911 86.7613 475.929 94.6412 475.929 94.6412 cv
475.929 94.6412 476.762 92.6416 481.214 94.1382 cv
cp
f
491.49 100.657 mo
491.421 100.657 491.353 100.637 491.293 100.596 cv
488.946 99.0064 li
488.786 98.8975 488.744 98.6788 488.852 98.5181 cv
488.962 98.3575 489.18 98.3169 489.34 98.4244 cv
491.687 100.014 li
491.847 100.123 491.889 100.342 491.781 100.502 cv
491.712 100.603 491.602 100.657 491.49 100.657 cv
cp
f
558.876 148.471 mo
558.755 148.471 558.637 148.408 558.572 148.297 cv
553.751 140.062 li
553.653 139.894 553.71 139.679 553.877 139.581 cv
554.043 139.484 554.26 139.539 554.358 139.706 cv
559.179 147.941 li
559.277 148.109 559.22 148.324 559.053 148.422 cv
558.998 148.455 558.936 148.471 558.876 148.471 cv
cp
f
497.196 157.654 mo
497.154 157.654 497.112 157.647 497.07 157.63 cv
496.889 157.561 496.798 157.358 496.868 157.176 cv
499.357 150.678 503.071 140.718 503.097 139.916 cv
502.975 139.556 500.794 136.836 498.762 134.446 cv
498.701 134.375 498.671 134.281 498.68 134.188 cv
498.688 134.093 498.734 134.007 498.807 133.947 cv
501.216 131.972 503.794 129.636 503.936 129.146 cv
503.883 128.366 499.586 120.287 496.888 115.388 cv
496.794 115.218 496.856 115.004 497.026 114.911 cv
497.196 114.819 497.411 114.879 497.503 115.049 cv
499.703 119.042 504.797 128.422 504.625 129.288 cv
504.459 130.117 500.978 133.065 499.529 134.263 cv
500.735 135.688 503.626 139.15 503.787 139.799 cv
503.956 140.474 499.935 151.134 497.524 157.428 cv
497.47 157.568 497.337 157.654 497.196 157.654 cv
cp
.360784 .411765 .647059 rgb
f
496.647 176.135 mo
479.771 176.135 li
484.015 120.08 li
495.679 120.08 li
496.647 176.135 li
cp
f
484.015 127.468 mo
484.015 127.468 480.053 177.771 479.805 177.548 cv
479.557 177.327 458.669 176.969 458.669 176.969 cv
459.363 162.302 li
484.015 127.468 li
cp
.968627 .701961 .411765 rgb
f
479.805 157.654 mo
479.664 157.654 479.531 157.568 479.477 157.428 cv
477.066 151.134 473.045 140.474 473.214 139.799 cv
473.376 139.15 476.266 135.688 477.472 134.263 cv
476.023 133.065 472.543 130.117 472.377 129.288 cv
472.204 128.422 477.298 119.042 479.498 115.049 cv
479.59 114.879 479.805 114.819 479.975 114.911 cv
480.145 115.004 480.207 115.218 480.113 115.388 cv
477.416 120.287 473.118 128.366 473.07 129.189 cv
473.208 129.636 475.785 131.972 478.194 133.947 cv
478.267 134.007 478.313 134.093 478.321 134.188 cv
478.33 134.281 478.3 134.375 478.239 134.446 cv
476.207 136.836 474.026 139.556 473.895 139.972 cv
473.93 140.718 477.644 150.678 480.133 157.176 cv
480.203 157.358 480.112 157.561 479.931 157.63 cv
479.889 157.647 479.847 157.654 479.805 157.654 cv
cp
.360784 .411765 .647059 rgb
f
486.64 110.321 mo
486.64 110.321 499.972 101.976 501.465 102.943 cv
502.958 103.911 495.679 110.002 495.679 110.002 cv
495.679 110.002 498.991 112.799 499.168 113.332 cv
499.344 113.864 500.135 115.172 500.745 116.6 cv
501.353 118.027 501.085 118.978 499.703 120.465 cv
498.321 121.953 489.334 126.29 487.345 126.428 cv
485.357 126.566 485.357 126.566 485.357 126.566 cv
479.435 116.409 li
479.435 116.409 479.108 107.515 481.018 106.44 cv
482.927 105.364 483.842 112.292 483.842 112.292 cv
486.64 110.321 li
cp
.956863 .517647 .384314 rgb
f
483.841 112.643 mo
483.793 112.643 483.743 112.633 483.697 112.612 cv
483.588 112.563 483.513 112.463 483.495 112.347 cv
483.493 112.338 483.336 111.371 482.75 108.869 cv
482.24 106.701 481.102 106.786 481.06 106.789 cv
480.854 106.808 480.695 106.671 480.672 106.481 cv
480.65 106.291 480.781 106.118 480.97 106.092 cv
481.045 106.08 482.769 105.88 483.433 108.709 cv
483.793 110.24 483.991 111.194 484.093 111.718 cv
489.227 108.492 li
489.391 108.388 489.608 108.437 489.712 108.602 cv
489.816 108.767 489.766 108.983 489.602 109.086 cv
484.029 112.589 li
483.971 112.625 483.907 112.643 483.841 112.643 cv
cp
0 0 0 rgb
f
494.176 111.655 mo
494.078 111.655 493.98 111.614 493.911 111.533 cv
493.784 111.387 493.799 111.165 493.946 111.038 cv
495.448 109.737 li
495.594 109.61 495.817 109.625 495.944 109.773 cv
496.071 109.919 496.055 110.141 495.909 110.268 cv
494.407 111.569 li
494.34 111.627 494.258 111.655 494.176 111.655 cv
cp
f
521.113 127.902 mo
520.029 129.736 518.991 131.908 519.29 132.52 cv
519.307 132.554 519.333 132.606 519.475 132.619 cv
519.628 132.631 519.769 132.579 519.908 132.451 cv
520.654 131.774 520.987 129.537 521.113 127.902 cv
cp
519.523 133.323 mo
519.488 133.323 519.453 133.322 519.417 133.319 cv
519.068 133.29 518.798 133.116 518.658 132.828 cv
517.988 131.455 520.688 127.21 521.236 126.374 cv
521.322 126.243 521.483 126.183 521.632 126.23 cv
521.782 126.275 521.883 126.414 521.881 126.57 cv
521.875 127.092 521.776 131.704 520.38 132.972 cv
520.123 133.206 519.835 133.323 519.523 133.323 cv
cp
.360784 .411765 .647059 rgb
f
508.157 152.12 mo
507.985 152.12 507.836 151.995 507.809 151.82 cv
507.265 148.171 li
507.237 147.979 507.369 147.8 507.561 147.772 cv
507.762 147.744 507.931 147.877 507.961 148.067 cv
508.504 151.717 li
508.533 151.909 508.401 152.087 508.209 152.116 cv
508.191 152.119 508.173 152.12 508.157 152.12 cv
cp
f
478.503 115.219 mo
487.223 128.886 li
487.223 128.886 479.603 162.194 461.27 166.028 cv
442.936 169.861 446.85 148.786 446.85 148.786 cv
478.503 115.219 li
cp
.968627 .701961 .411765 rgb
f
456.196 137.404 mo
456.128 137.404 456.059 137.384 455.999 137.343 cv
455.838 137.234 455.796 137.016 455.905 136.855 cv
460.257 130.43 472.497 118.667 472.62 118.548 cv
472.76 118.415 472.981 118.418 473.117 118.559 cv
473.251 118.699 473.247 118.921 473.106 119.056 cv
472.984 119.173 460.797 130.886 456.487 137.25 cv
456.419 137.35 456.308 137.404 456.196 137.404 cv
cp
.360784 .411765 .647059 rgb
f
461.597 129.627 mo
459.469 130.281 456.46 131.375 455.921 132.297 cv
455.845 132.428 455.864 132.498 455.87 132.52 cv
455.929 132.747 456.036 132.806 456.132 132.834 cv
457.064 133.104 459.625 131.288 461.597 129.627 cv
cp
456.301 133.557 mo
456.169 133.557 456.047 133.542 455.935 133.509 cv
455.672 133.432 455.33 133.23 455.19 132.7 cv
455.125 132.452 455.167 132.197 455.314 131.943 cv
456.272 130.301 462.239 128.695 462.917 128.517 cv
463.071 128.475 463.236 128.547 463.314 128.688 cv
463.391 128.83 463.362 129.006 463.244 129.115 cv
462.401 129.893 458.318 133.557 456.301 133.557 cv
cp
f
489.255 333.374 mo
490.669 333.374 491.814 332.228 491.814 330.815 cv
491.814 207.941 li
486.698 207.941 li
486.698 330.815 li
486.698 332.228 487.843 333.374 489.255 333.374 cv
cp
.721569 .690196 .74902 rgb
f
396.797 315.252 mo
406.737 315.252 li
406.737 247.455 li
396.797 247.455 li
396.797 315.252 li
cp
.780392 .74902 .807843 rgb
f
380.823 319.313 mo
422.532 319.313 li
424.257 319.313 425.657 317.915 425.657 316.189 cv
425.657 314.463 424.257 313.065 422.532 313.065 cv
380.823 313.065 li
379.097 313.065 377.698 314.463 377.698 316.189 cv
377.698 317.915 379.097 319.313 380.823 319.313 cv
cp
f
416.949 324.101 mo
416.949 327.812 419.958 330.821 423.668 330.821 cv
427.378 330.821 430.387 327.812 430.387 324.101 cv
430.387 320.391 427.378 317.382 423.668 317.382 cv
419.958 317.382 416.949 320.391 416.949 324.101 cv
cp
f
395.048 324.101 mo
395.048 327.812 398.056 330.821 401.767 330.821 cv
405.478 330.821 408.486 327.812 408.486 324.101 cv
408.486 320.391 405.478 317.382 401.767 317.382 cv
398.056 317.382 395.048 320.391 395.048 324.101 cv
cp
f
373.238 324.101 mo
373.238 327.812 376.247 330.821 379.958 330.821 cv
383.668 330.821 386.676 327.812 386.676 324.101 cv
386.676 320.391 383.668 317.382 379.958 317.382 cv
376.247 317.382 373.238 320.391 373.238 324.101 cv
cp
f
372.601 184.24 mo
372.601 184.24 351.548 196.831 356.231 224.454 cv
361.618 256.234 393.301 266.537 420.786 259.029 cv
448.269 251.521 443.689 229.868 443.689 229.868 cv
372.601 184.24 li
cp
.878431 .87451 .898039 rgb
f
368.423 241.968 mo
368.337 241.968 368.253 241.937 368.185 241.875 cv
361.178 235.394 359.878 223.152 359.826 222.634 cv
359.806 222.441 359.947 222.269 360.14 222.25 cv
360.328 222.237 360.506 222.371 360.525 222.564 cv
360.538 222.688 361.853 235.061 368.662 241.359 cv
368.804 241.491 368.813 241.712 368.681 241.855 cv
368.612 241.93 368.519 241.968 368.423 241.968 cv
cp
1 1 1 rgb
f
410.565 146.548 mo
410.565 146.548 424.903 147.818 430.288 154.74 cv
435.672 161.663 428.557 205.067 428.172 205.671 cv
427.788 206.277 417.801 210.7 400.391 210.315 cv
382.982 209.93 378.752 206.605 378.175 205.671 cv
377.598 204.738 373.944 155.738 378.175 151.585 cv
382.405 147.433 400.072 145.278 410.565 146.548 cv
cp
.360784 .411765 .647059 rgb
f
429.824 291.721 mo
429.824 310.191 li
415.759 315.512 li
406.897 305.574 li
405.439 288.489 li
429.824 291.721 li
cp
.698039 .403922 .337255 rgb
f
456.149 287.892 mo
456.149 306.362 li
441.163 311.683 li
431.718 301.745 li
430.166 284.66 li
456.149 287.892 li
cp
f
425.479 202.308 mo
425.479 202.308 461.306 220.333 465.705 227.655 cv
470.103 234.978 465.258 294.645 465.258 294.645 cv
433.491 295.069 li
429.092 261.724 li
404.947 205.555 li
425.479 202.308 li
cp
.407843 .713726 .847059 rgb
f
381.946 206.105 mo
381.946 206.105 380.499 222.116 381.015 227.37 cv
381.532 232.625 398.11 245.004 398.11 245.004 cv
398.93 296.257 li
435.66 297.9 li
435.66 297.9 436.46 239.329 435.846 233.812 cv
435.233 228.296 410.795 208.235 410.795 208.235 cv
381.946 206.105 li
cp
f
402.023 139.06 mo
402.23 148.387 li
402.23 148.387 403.972 151.031 409.438 151.354 cv
413.51 151.594 414.919 150.643 414.919 150.643 cv
414.247 145.932 li
413.586 141.337 li
403.684 139.389 li
402.023 139.06 li
cp
.698039 .403922 .337255 rgb
f
403.684 139.389 mo
403.713 139.643 403.817 139.941 403.975 140.283 cv
406.167 144.896 411.894 145.773 414.247 145.932 cv
413.586 141.337 li
403.684 139.389 li
cp
0 0 0 rgb
f
415.193 120.031 mo
415.193 120.031 420.348 131.617 418.563 138.157 cv
416.777 144.697 410.823 143.71 407.255 142.472 cv
403.688 141.233 402.022 139.062 402.022 139.062 cv
402.022 139.062 398.706 140.211 396.461 137.135 cv
394.217 134.059 395.562 130.5 397.455 129.674 cv
399.347 128.848 401.614 130.203 401.614 130.203 cv
399.822 126.838 li
399.822 126.838 407.15 109.627 415.193 120.031 cv
cp
.698039 .403922 .337255 rgb
f
414.755 134.78 mo
414.721 134.78 414.686 134.775 414.652 134.764 cv
414.466 134.707 414.362 134.51 414.419 134.324 cv
415.083 132.182 413.478 129.858 413.462 129.835 cv
413.35 129.676 413.389 129.457 413.547 129.345 cv
413.706 129.234 413.924 129.272 414.037 129.431 cv
414.112 129.537 415.857 132.056 415.091 134.532 cv
415.044 134.683 414.906 134.78 414.755 134.78 cv
cp
0 0 0 rgb
f
401.12 135.634 mo
401.026 135.634 400.933 135.597 400.864 135.524 cv
397.708 132.179 li
397.575 132.038 397.581 131.815 397.722 131.682 cv
397.864 131.549 398.085 131.556 398.219 131.697 cv
401.376 135.042 li
401.508 135.183 401.503 135.405 401.361 135.539 cv
401.293 135.603 401.207 135.634 401.12 135.634 cv
cp
f
397.779 134.738 mo
397.608 134.738 397.458 134.613 397.431 134.439 cv
397.402 134.248 397.534 134.068 397.726 134.039 cv
399.909 133.708 li
400.112 133.681 400.28 133.813 400.309 134.003 cv
400.338 134.195 400.207 134.374 400.014 134.403 cv
397.832 134.734 li
397.814 134.737 397.795 134.738 397.779 134.738 cv
cp
f
409.491 130.446 mo
409.316 130.446 409.165 130.316 409.142 130.139 cv
408.866 127.973 li
408.841 127.781 408.977 127.605 409.169 127.58 cv
409.37 127.551 409.539 127.691 409.563 127.884 cv
409.839 130.05 li
409.864 130.242 409.728 130.419 409.536 130.443 cv
409.52 130.445 409.505 130.446 409.491 130.446 cv
cp
f
415.918 129.93 mo
415.746 129.93 415.595 129.804 415.57 129.629 cv
415.253 127.47 li
415.224 127.277 415.357 127.099 415.549 127.071 cv
415.736 127.045 415.92 127.176 415.948 127.367 cv
416.265 129.527 li
416.294 129.719 416.161 129.898 415.968 129.926 cv
415.952 129.928 415.934 129.93 415.918 129.93 cv
cp
f
408.008 126.483 mo
407.951 126.483 407.892 126.469 407.838 126.44 cv
407.669 126.346 407.607 126.132 407.701 125.962 cv
408.525 124.465 410.439 124.918 410.52 124.938 cv
410.709 124.984 410.823 125.173 410.777 125.362 cv
410.731 125.549 410.547 125.665 410.353 125.621 cv
410.294 125.606 408.879 125.28 408.316 126.301 cv
408.253 126.418 408.132 126.483 408.008 126.483 cv
cp
f
416.385 125.604 mo
416.28 125.604 416.176 125.557 416.107 125.467 cv
416.102 125.462 415.671 124.913 415.133 124.86 cv
414.884 124.834 414.641 124.924 414.399 125.136 cv
414.253 125.263 414.031 125.249 413.904 125.102 cv
413.776 124.955 413.792 124.733 413.938 124.606 cv
414.329 124.265 414.764 124.118 415.208 124.161 cv
416.05 124.246 416.64 125.008 416.665 125.04 cv
416.782 125.194 416.753 125.414 416.599 125.532 cv
416.536 125.581 416.461 125.604 416.385 125.604 cv
cp
f
402.73 130.986 mo
402.73 130.986 405.88 128.855 405.692 125.623 cv
405.503 122.39 404.793 121.566 404.793 121.566 cv
404.793 121.566 408.47 121.375 411.51 120.385 cv
413.49 119.74 414.341 119.03 414.341 119.03 cv
415.193 120.031 li
416.122 119.989 418.243 114.361 416.845 113.361 cv
415.448 112.361 407.965 114.969 407.965 114.969 cv
407.965 114.969 400.085 113.115 395.481 118.719 cv
390.878 124.323 396.036 130.923 396.036 130.923 cv
396.036 130.923 397.398 128.034 402.73 130.986 cv
cp
f
410.695 137.002 mo
410.689 137.157 410.708 137.338 410.791 137.495 cv
410.886 137.677 411.056 137.802 411.31 137.876 cv
411.838 138.031 412.317 137.9 412.66 137.737 cv
410.695 137.002 li
cp
411.798 138.65 mo
411.581 138.65 411.351 138.621 411.113 138.551 cv
410.67 138.421 410.352 138.174 410.166 137.817 cv
409.836 137.184 410.077 136.444 410.087 136.413 cv
410.118 136.322 410.183 136.248 410.269 136.207 cv
410.356 136.167 410.455 136.162 410.544 136.195 cv
413.557 137.323 li
413.671 137.365 413.755 137.464 413.779 137.583 cv
413.802 137.703 413.763 137.826 413.674 137.909 cv
413.635 137.945 412.867 138.65 411.798 138.65 cv
cp
f
471.635 171.279 mo
471.966 169.196 li
471.966 169.196 479.953 163.116 484.868 161.11 cv
486.935 160.266 489.833 160.969 487.389 163.707 cv
486.07 165.184 485.412 166.94 485.412 166.94 cv
485.412 166.94 489.359 165.693 492.066 163.899 cv
493.8 162.75 496.335 158.13 497.822 159.131 cv
500.187 160.724 497.468 165.233 497.468 165.233 cv
497.468 165.233 498.697 159.521 501.031 161.751 cv
503.356 163.972 497.004 175.19 493.98 177.869 cv
490.956 180.547 474.998 183.667 474.998 183.667 cv
471.635 171.279 li
cp
.698039 .403922 .337255 rgb
f
488.453 169.386 mo
488.274 169.386 488.121 169.251 488.103 169.069 cv
488.084 168.876 488.225 168.704 488.419 168.685 cv
491.892 168.343 495.204 165.257 495.237 165.226 cv
495.378 165.093 495.6 165.099 495.734 165.241 cv
495.867 165.382 495.861 165.605 495.719 165.738 cv
495.578 165.872 492.203 169.019 488.487 169.384 cv
488.475 169.386 488.463 169.386 488.453 169.386 cv
cp
0 0 0 rgb
f
492.589 171.978 mo
492.526 171.978 492.463 171.961 492.407 171.927 cv
485.41 167.681 li
485.244 167.58 485.191 167.364 485.292 167.198 cv
485.393 167.031 485.608 166.98 485.775 167.08 cv
492.569 171.203 li
495.715 168.845 li
495.871 168.728 496.09 168.76 496.208 168.915 cv
496.324 169.07 496.293 169.291 496.137 169.407 cv
492.8 171.908 li
492.738 171.955 492.664 171.978 492.589 171.978 cv
cp
f
479.131 171.846 mo
478.982 171.846 478.843 171.751 478.796 171.6 cv
478.738 171.416 478.84 171.217 479.026 171.16 cv
482.827 169.961 485.303 167.177 485.328 167.148 cv
485.457 167.002 485.678 166.988 485.824 167.116 cv
485.97 167.244 485.985 167.466 485.857 167.612 cv
485.752 167.732 483.232 170.571 479.237 171.83 cv
479.202 171.841 479.167 171.846 479.131 171.846 cv
cp
f
428.5 152.893 mo
428.5 152.893 444.755 167.258 457.878 168.098 cv
464.205 168.502 472.693 165.482 472.693 165.482 cv
480.234 185.214 li
480.234 185.214 453.719 210.338 426.708 190.541 cv
418.946 184.851 428.5 152.893 428.5 152.893 cv
cp
.360784 .411765 .647059 rgb
f
430.419 177.667 mo
430.224 177.667 430.067 177.509 430.067 177.315 cv
430.067 174.952 425.783 161.96 425.739 161.829 cv
425.678 161.644 425.778 161.445 425.962 161.385 cv
426.151 161.322 426.346 161.424 426.407 161.608 cv
426.585 162.147 430.77 174.839 430.77 177.315 cv
430.77 177.509 430.613 177.667 430.419 177.667 cv
cp
.968627 .701961 .411765 rgb
f
427.652 327.256 mo
427.652 327.256 428.311 297.563 432.925 298.181 cv
437.54 298.8 442.153 303.13 442.153 303.13 cv
442.153 303.13 452.7 297.563 457.314 300.656 cv
461.928 303.749 464.58 310.554 464.58 310.554 cv
490.273 327.256 li
490.273 327.256 493.379 332.206 492.486 334.68 cv
491.788 336.611 452.711 335.529 435.569 334.96 cv
431.148 334.813 427.652 331.408 427.652 327.256 cv
427.652 327.256 li
cp
.94902 .635294 .32549 rgb
f
440.906 320.033 mo
440.906 320.033 434.464 304.266 430.304 301.544 cv
426.143 298.823 415.738 307.462 415.738 307.462 cv
415.738 307.462 407.024 298.288 404.88 303.101 cv
402.737 307.914 401.698 325.15 403.322 328.955 cv
404.946 332.759 416.9 339.094 432.605 339.05 cv
440.004 339.03 450.676 336.745 450.683 334.203 cv
450.694 330.205 443.429 322.667 440.906 320.033 cv
cp
.968627 .701961 .411765 rgb
f
434.441 314.929 mo
422.39 314.929 li
422.196 314.929 422.039 314.772 422.039 314.578 cv
422.039 314.383 422.196 314.226 422.39 314.226 cv
434.441 314.226 li
434.635 314.226 434.793 314.383 434.793 314.578 cv
434.793 314.772 434.635 314.929 434.441 314.929 cv
cp
1 1 1 rgb
f
410.983 152.035 mo
416.257 186.99 li
411.888 186.99 li
408.008 151.315 li
410.983 152.035 li
cp
.25098 .313726 .498039 rgb
f
476.06 188.682 mo
479.896 187.402 li
480.395 187.235 480.665 186.696 480.498 186.197 cv
473.517 165.281 li
473.351 164.782 472.812 164.512 472.313 164.679 cv
468.477 165.959 li
467.978 166.126 467.709 166.665 467.875 167.164 cv
474.855 188.08 li
475.021 188.579 475.561 188.848 476.06 188.682 cv
cp
f
436.434 320.384 mo
423.668 320.384 li
423.473 320.384 423.316 320.227 423.316 320.033 cv
423.316 319.838 423.473 319.681 423.668 319.681 cv
436.434 319.681 li
436.628 319.681 436.786 319.838 436.786 320.033 cv
436.786 320.227 436.628 320.384 436.434 320.384 cv
cp
1 1 1 rgb
f
458.221 313.083 mo
458.047 313.083 457.897 312.955 457.873 312.779 cv
457.847 312.586 457.981 312.409 458.173 312.382 cv
465.855 311.335 li
466.057 311.312 466.225 311.444 466.252 311.635 cv
466.277 311.828 466.143 312.005 465.951 312.032 cv
458.269 313.08 li
458.253 313.082 458.237 313.083 458.221 313.083 cv
cp
f
460.149 318.393 mo
459.978 318.393 459.828 318.268 459.801 318.094 cv
459.772 317.903 459.904 317.723 460.096 317.694 cv
473.021 315.728 li
473.205 315.694 473.392 315.831 473.421 316.023 cv
473.451 316.214 473.319 316.394 473.127 316.423 cv
460.202 318.389 li
460.184 318.392 460.167 318.393 460.149 318.393 cv
cp
f
437.278 293.577 mo
437.075 293.572 436.921 293.411 436.926 293.216 cv
436.94 292.67 438.276 238.532 436.934 232.18 cv
436.019 227.854 422.283 214.361 422.144 214.225 cv
422.058 214.141 422.021 214.018 422.046 213.9 cv
422.072 213.783 422.156 213.686 422.269 213.644 cv
432.172 210.008 li
432.356 209.941 432.556 210.035 432.624 210.217 cv
432.69 210.4 432.597 210.601 432.415 210.669 cv
423.032 214.113 li
425.359 216.421 436.743 227.878 437.622 232.036 cv
438.981 238.466 437.685 291.001 437.629 293.234 cv
437.625 293.425 437.468 293.577 437.278 293.577 cv
cp
.25098 .313726 .498039 rgb
f
404.741 199.372 mo
404.741 199.372 413.362 202.853 415.064 202.621 cv
416.765 202.388 422.905 201.703 423.155 200.408 cv
420.845 196.452 li
420.845 196.452 424.279 197.891 426.605 196.685 cv
428.931 195.479 431.723 193.056 432.291 191.203 cv
432.859 189.349 430.179 189.723 430.179 189.723 cv
430.179 189.723 433.211 187.836 429.359 186.221 cv
425.507 184.606 408.864 182.209 401.934 186.555 cv
395.003 190.903 404.741 199.372 404.741 199.372 cv
cp
.698039 .403922 .337255 rgb
f
430.179 190.075 mo
430.142 190.075 430.104 190.069 430.066 190.056 cv
426.067 188.696 421.794 189.279 421.753 189.286 cv
421.55 189.319 421.381 189.178 421.355 188.988 cv
421.328 188.795 421.461 188.618 421.653 188.59 cv
421.835 188.564 426.129 187.975 430.293 189.39 cv
430.476 189.453 430.575 189.653 430.512 189.836 cv
430.462 189.983 430.326 190.075 430.179 190.075 cv
cp
0 0 0 rgb
f
402.783 240.951 mo
402.301 240.951 401.86 241.088 401.447 241.366 cv
399.741 242.508 399.053 245.67 398.826 247.084 cv
401.362 245.578 404.758 243.103 404.62 241.84 cv
404.586 241.524 404.265 241.272 403.669 241.092 cv
403.359 240.998 403.064 240.951 402.783 240.951 cv
cp
398.379 248.099 mo
398.312 248.099 398.246 248.08 398.188 248.043 cv
398.078 247.97 398.017 247.844 398.03 247.713 cv
398.05 247.5 398.565 242.451 401.054 240.782 cv
401.884 240.225 402.836 240.105 403.873 240.419 cv
404.764 240.688 405.251 241.141 405.319 241.764 cv
405.568 244.04 399.271 247.65 398.551 248.054 cv
398.499 248.085 398.439 248.099 398.379 248.099 cv
cp
.25098 .313726 .498039 rgb
f
421.622 201.333 mo
466.025 201.333 li
478.707 172.648 li
436.054 172.648 li
434.99 172.648 434.026 173.275 433.595 174.249 cv
421.622 201.333 li
cp
1 1 1 rgb
f
425.479 201.333 mo
469.881 201.333 li
481.2 175.732 li
481.841 174.28 480.779 172.648 479.191 172.648 cv
438.161 172.648 li
425.479 201.333 li
cp
.572549 .705882 .917647 rgb
f
406.737 204.957 mo
469.429 204.957 li
470.429 204.957 471.241 204.145 471.241 203.144 cv
471.241 202.144 470.429 201.333 469.429 201.333 cv
406.737 201.333 li
405.736 201.333 404.925 202.144 404.925 203.144 cv
404.925 204.145 405.736 204.957 406.737 204.957 cv
cp
0 0 0 rgb
f
378.175 151.585 mo
378.175 151.585 353.344 178.617 357.382 196.211 cv
361.42 213.807 410.436 202.308 410.436 202.308 cv
409.903 181.745 li
384.424 177.754 li
378.175 151.585 li
cp
.360784 .411765 .647059 rgb
f
376.65 176.144 mo
375.467 176.144 374.381 176.432 373.635 177.232 cv
373.344 177.544 373.287 177.742 373.327 177.816 cv
373.73 178.556 378.181 178.304 382.462 177.634 cv
381.144 177.052 378.748 176.144 376.65 176.144 cv
cp
375.97 178.968 mo
374.345 178.968 373.04 178.761 372.71 178.151 cv
372.492 177.75 372.631 177.279 373.122 176.752 cv
376.165 173.491 383.482 177.324 383.793 177.487 cv
383.925 177.557 383.999 177.705 383.974 177.852 cv
383.951 178.001 383.836 178.118 383.688 178.144 cv
382.221 178.4 378.659 178.968 375.97 178.968 cv
cp
.968627 .701961 .411765 rgb
f
381.744 207.75 mo
381.512 207.75 381.281 207.749 381.047 207.747 cv
380.82 207.746 380.638 207.56 380.64 207.334 cv
380.641 207.108 380.825 206.926 381.05 206.926 cv
393.411 206.983 403.568 204.464 403.669 204.438 cv
403.893 204.383 404.114 204.515 404.169 204.734 cv
404.225 204.954 404.092 205.177 403.873 205.233 cv
403.772 205.259 393.858 207.75 381.744 207.75 cv
cp
1 .729412 .341176 rgb
f
383.628 178.149 mo
383.516 178.149 383.407 178.096 383.338 177.998 cv
383.228 177.837 383.269 177.619 383.427 177.508 cv
385.681 175.95 383.719 170.715 383.7 170.663 cv
383.631 170.481 383.721 170.278 383.903 170.21 cv
384.084 170.142 384.288 170.23 384.356 170.413 cv
384.446 170.649 386.53 176.218 383.828 178.086 cv
383.766 178.128 383.697 178.149 383.628 178.149 cv
cp
.968627 .701961 .411765 rgb
f
358.912 210.902 mo
498.271 210.902 li
500.072 210.902 501.532 209.442 501.532 207.641 cv
501.532 205.839 500.072 204.379 498.271 204.379 cv
358.912 204.379 li
357.111 204.379 355.651 205.839 355.651 207.641 cv
355.651 209.442 357.111 210.902 358.912 210.902 cv
cp
.721569 .690196 .74902 rgb
f
428.416 288.84 mo
428.397 288.839 399.523 287.328 399.523 287.328 cv
399.33 287.318 399.18 287.153 399.191 286.959 cv
399.201 286.765 399.34 286.595 399.56 286.627 cv
428.434 288.138 li
428.628 288.148 428.777 288.313 428.766 288.507 cv
428.756 288.695 428.601 288.84 428.416 288.84 cv
cp
.25098 .313726 .498039 rgb
f
463.188 287.329 mo
437.419 287.329 li
437.225 287.329 437.068 287.171 437.068 286.977 cv
437.068 286.783 437.225 286.626 437.419 286.626 cv
463.188 286.626 li
463.382 286.626 463.54 286.783 463.54 286.977 cv
463.54 287.171 463.382 287.329 463.188 287.329 cv
cp
f
405.987 203.662 mo
410.031 203.662 li
410.557 203.662 410.983 203.235 410.983 202.71 cv
410.983 180.659 li
410.983 180.133 410.557 179.707 410.031 179.707 cv
405.987 179.707 li
405.461 179.707 405.035 180.133 405.035 180.659 cv
405.035 202.71 li
405.035 203.235 405.461 203.662 405.987 203.662 cv
cp
f
449.663 186.99 mo
449.663 189.073 451.351 190.761 453.434 190.761 cv
455.517 190.761 457.206 189.073 457.206 186.99 cv
457.206 184.908 455.517 183.219 453.434 183.219 cv
451.351 183.219 449.663 184.908 449.663 186.99 cv
cp
1 1 1 rgb
f
414.417 147.122 mo
414.417 147.122 417.384 157.084 416.385 156.889 cv
415.387 156.694 409.438 151.354 409.438 151.354 cv
409.438 151.354 405.104 156.855 403.684 156.892 cv
402.265 156.928 401.767 146.213 401.767 146.213 cv
401.767 146.213 403.235 149.566 408.491 150.318 cv
413.747 151.07 414.417 147.122 414.417 147.122 cv
cp
.25098 .313726 .498039 rgb
f
367.927 333.089 mo
369.34 333.089 370.486 331.944 370.486 330.531 cv
370.486 207.657 li
365.369 207.657 li
365.369 330.531 li
365.369 331.944 366.515 333.089 367.927 333.089 cv
cp
.721569 .690196 .74902 rgb
f
66.6612 .703174 mo
62.4317 .703174 58.9908 4.14409 58.9908 8.37358 cv
58.9908 39.65 li
58.9908 43.8794 62.4317 47.3204 66.6612 47.3204 cv
137.535 47.3204 li
141.765 47.3204 145.206 43.8794 145.206 39.65 cv
145.206 8.37358 li
145.206 4.14409 141.765 .703174 137.535 .703174 cv
66.6612 .703174 li
cp
137.535 48.0235 mo
66.6612 48.0235 li
62.044 48.0235 58.2877 44.2671 58.2877 39.65 cv
58.2877 8.37358 li
58.2877 3.7564 62.044 4.92188e-05 66.6612 4.92188e-05 cv
137.535 4.92188e-05 li
142.152 4.92188e-05 145.909 3.7564 145.909 8.37358 cv
145.909 39.65 li
145.909 44.2671 142.152 48.0235 137.535 48.0235 cv
cp
.407843 .713726 .847059 rgb
f
145.557 11.0547 mo
58.6392 11.0547 li
58.4449 11.0547 58.2877 10.8975 58.2877 10.7032 cv
58.2877 10.5088 58.4449 10.3516 58.6392 10.3516 cv
145.557 10.3516 li
145.752 10.3516 145.909 10.5088 145.909 10.7032 cv
145.909 10.8975 145.752 11.0547 145.557 11.0547 cv
cp
f
65.1568 8.38774 mo
65.0631 8.38774 64.9693 8.35015 64.9 8.27642 cv
64.7681 8.13433 64.775 7.91216 64.9166 7.77935 cv
69.1964 3.77935 li
69.3389 3.64702 69.5611 3.65435 69.6934 3.79595 cv
69.8258 3.93804 69.8184 4.16021 69.6768 4.29302 cv
65.3975 8.29302 li
65.3292 8.35649 65.2432 8.38774 65.1568 8.38774 cv
cp
f
69.4366 8.38774 mo
69.3507 8.38774 69.2642 8.35649 69.1964 8.29302 cv
64.9166 4.29302 li
64.775 4.16021 64.7681 3.93804 64.9 3.79595 cv
65.0333 3.65532 65.2559 3.64751 65.3975 3.77935 cv
69.6768 7.77935 li
69.8184 7.91216 69.8258 8.13433 69.6934 8.27642 cv
69.6241 8.35015 69.5308 8.38774 69.4366 8.38774 cv
cp
f
654.198 110.505 mo
511.205 110.505 li
508.814 110.505 506.876 108.567 506.876 106.176 cv
506.876 34.1983 li
506.876 31.8077 508.814 29.8697 511.205 29.8697 cv
654.198 29.8697 li
656.588 29.8697 658.527 31.8077 658.527 34.1983 cv
658.527 106.176 li
658.527 108.567 656.588 110.505 654.198 110.505 cv
cp
.784314 .745098 .807843 rgb
f
599.763 92.4805 mo
599.601 92.4678 599.488 92.3721 599.454 92.2413 cv
591.512 61.625 li
578.539 70.4517 li
578.466 70.4996 578.378 70.5176 578.294 70.5005 cv
578.21 70.483 578.135 70.4317 578.089 70.3584 cv
565.105 49.8985 li
533.241 73.0293 li
533.11 73.1246 532.93 73.1065 532.821 72.9898 cv
516.778 55.9034 li
516.657 55.7745 516.663 55.5723 516.792 55.4517 cv
516.92 55.3316 517.124 55.337 517.243 55.4659 cv
533.093 72.3472 li
565.005 49.1822 li
565.076 49.1304 565.167 49.1099 565.253 49.127 cv
565.339 49.1431 565.416 49.1949 565.462 49.2696 cv
578.452 69.7378 li
591.528 60.8418 li
591.614 60.7833 591.724 60.7715 591.82 60.8072 cv
591.918 60.8438 591.991 60.9253 592.017 61.0259 cv
599.846 91.209 li
609.208 70.6685 li
609.249 70.5782 609.33 70.5123 609.425 70.4898 cv
609.522 70.4688 609.623 70.4903 609.7 70.5533 cv
634.235 90.5054 li
634.372 90.6163 634.393 90.8174 634.282 90.9546 cv
634.17 91.0923 633.967 91.1119 633.833 91.0005 cv
609.618 71.3096 li
600.054 92.2935 li
600.002 92.4082 599.887 92.4805 599.763 92.4805 cv
cp
.639216 .482353 .564706 rgb
f
605.205 96.3038 mo
605.044 96.293 604.926 96.1944 604.894 96.0586 cv
594.633 53.1138 li
568.508 73.0249 li
568.439 73.0787 568.349 73.1001 568.261 73.086 cv
568.173 73.0708 568.096 73.0201 568.047 72.9458 cv
550.945 46.7579 li
530.103 60.0699 li
529.961 60.1612 529.768 60.1255 529.669 59.983 cv
517.189 42.002 li
517.088 41.857 517.125 41.6583 517.27 41.5577 cv
517.412 41.4581 517.613 41.4917 517.714 41.6377 cv
530.018 59.3663 li
550.868 46.0494 li
551.012 45.9542 551.211 45.9961 551.307 46.1436 cv
568.395 72.3086 li
594.636 52.3086 li
594.722 52.2432 594.834 52.2247 594.937 52.2618 cv
595.039 52.2979 595.115 52.3834 595.14 52.4883 cv
605.28 94.9239 li
617.567 63.7823 li
617.606 63.6832 617.692 63.6099 617.796 63.5875 cv
617.899 63.563 618.009 63.5958 618.086 63.6705 cv
644.718 89.5118 li
644.844 89.6343 644.847 89.8365 644.725 89.9634 cv
644.602 90.0904 644.401 90.0938 644.273 89.9698 cv
617.985 64.462 li
605.502 96.1016 li
605.454 96.2242 605.336 96.3038 605.205 96.3038 cv
cp
1 1 1 rgb
f
533.053 59.8008 mo
533.053 61.5254 531.656 62.9229 529.931 62.9229 cv
528.207 62.9229 526.809 61.5254 526.809 59.8008 cv
526.809 58.0767 528.207 56.6788 529.931 56.6788 cv
531.656 56.6788 533.053 58.0767 533.053 59.8008 cv
cp
.360784 .411765 .647059 rgb
f
554.162 46.3184 mo
554.162 48.043 552.764 49.4405 551.04 49.4405 cv
549.315 49.4405 547.918 48.043 547.918 46.3184 cv
547.918 44.5943 549.315 43.1963 551.04 43.1963 cv
552.764 43.1963 554.162 44.5943 554.162 46.3184 cv
cp
f
597.953 52.5625 mo
597.953 54.2867 596.554 55.6846 594.831 55.6846 cv
593.106 55.6846 591.709 54.2867 591.709 52.5625 cv
591.709 50.8384 593.106 49.4405 594.831 49.4405 cv
596.554 49.4405 597.953 50.8384 597.953 52.5625 cv
cp
f
620.986 63.8995 mo
620.986 65.6236 619.588 67.0215 617.864 67.0215 cv
616.139 67.0215 614.742 65.6236 614.742 63.8995 cv
614.742 62.1753 616.139 60.7774 617.864 60.7774 cv
619.588 60.7774 620.986 62.1753 620.986 63.8995 cv
cp
f
647.619 89.7408 mo
647.619 91.4649 646.22 92.8628 644.497 92.8628 cv
642.772 92.8628 641.375 91.4649 641.375 89.7408 cv
641.375 88.0162 642.772 86.6187 644.497 86.6187 cv
646.22 86.6187 647.619 88.0162 647.619 89.7408 cv
cp
f
571.437 72.771 mo
571.437 74.4952 570.039 75.8931 568.315 75.8931 cv
566.59 75.8931 565.193 74.4952 565.193 72.771 cv
565.193 71.0469 566.59 69.649 568.315 69.649 cv
570.039 69.649 571.437 71.0469 571.437 72.771 cv
cp
f
608.327 95.9844 mo
608.327 97.709 606.928 99.1065 605.205 99.1065 cv
603.48 99.1065 602.083 97.709 602.083 95.9844 cv
602.083 94.2603 603.48 92.8628 605.205 92.8628 cv
606.928 92.8628 608.327 94.2603 608.327 95.9844 cv
cp
f
119.239 138.322 mo
119.239 138.322 137.335 114.033 138.553 115.581 cv
139.77 117.128 122.279 139.752 122.279 139.752 cv
119.239 138.322 li
cp
f
105.171 152.273 mo
105.171 152.273 112.025 152.182 114.962 149.412 cv
117.899 146.643 111.393 140.636 111.393 140.636 cv
104.966 145.281 li
105.171 152.273 li
cp
.866667 .521569 .478431 rgb
f
114.081 137.337 mo
114.886 136.738 115.851 136.399 116.842 136.239 cv
120.197 135.699 129.863 135.849 131.147 139.206 cv
132.378 142.421 127.005 142.504 127.005 142.504 cv
127.005 142.504 131.347 143.303 129.791 146.076 cv
128.491 148.391 125.664 148.008 125.664 148.008 cv
125.664 148.008 130.101 149.271 126.972 151.982 cv
123.844 154.692 113.902 153.68 110.825 152.09 cv
107.748 150.501 111.92 147.464 111.92 147.464 cv
111.92 147.464 108.828 145.314 109.717 143.455 cv
110.659 141.488 113.654 142.002 113.654 142.002 cv
113.654 142.002 111.181 139.494 114.081 137.337 cv
cp
f
102.179 136.415 mo
102.179 136.415 114.303 130.042 116.607 130.318 cv
118.912 130.594 127.686 137.599 125.65 139.653 cv
123.615 141.708 116.797 136.764 116.797 136.764 cv
116.797 136.764 110.294 148.445 105.767 147.281 cv
101.24 146.116 102.179 136.415 102.179 136.415 cv
cp
f
127.005 142.856 mo
126.998 142.856 114.743 142.585 114.743 142.585 cv
114.549 142.581 114.395 142.42 114.399 142.226 cv
114.403 142.032 114.554 141.916 114.758 141.882 cv
127.013 142.152 li
127.207 142.157 127.36 142.317 127.357 142.512 cv
127.352 142.703 127.195 142.856 127.005 142.856 cv
cp
0 0 0 rgb
f
125.664 148.359 mo
125.652 148.359 113.36 147.937 113.36 147.937 cv
113.166 147.931 113.014 147.768 113.021 147.574 cv
113.027 147.38 113.167 147.201 113.384 147.235 cv
125.677 147.657 li
125.87 147.663 126.023 147.826 126.015 148.02 cv
126.009 148.21 125.853 148.359 125.664 148.359 cv
cp
f
58.4215 113.7 mo
58.4215 113.7 65.0074 122.921 79.7022 130.915 cv
90.254 136.655 106.241 133.978 106.241 133.978 cv
108.251 155.723 li
108.251 155.723 73.6993 168.763 59.7686 153.978 cv
41.8072 134.916 58.4215 113.7 58.4215 113.7 cv
cp
.639216 .482353 .564706 rgb
f
108.003 147.669 mo
107.856 147.669 107.718 147.575 107.67 147.426 cv
107.61 147.242 107.71 147.044 107.895 146.983 cv
107.965 146.96 115 144.572 116.452 136.7 cv
116.486 136.509 116.665 136.383 116.861 136.418 cv
117.052 136.453 117.178 136.637 117.143 136.828 cv
115.614 145.121 108.187 147.627 108.112 147.652 cv
108.077 147.664 108.04 147.669 108.003 147.669 cv
cp
0 0 0 rgb
f
50.6519 112.896 mo
50.6519 112.896 61.524 117.456 65.8228 135.359 cv
71.1666 157.616 66.9605 181.242 66.9605 181.242 cv
66.9605 181.242 58.2203 181.015 44.3238 178.612 cv
30.4278 176.21 28.5074 175.936 28.5074 175.936 cv
39.5611 111.972 li
50.6519 112.896 li
cp
.937255 .643137 .34902 rgb
f
73.8458 286.219 mo
69.9703 306.568 li
56.6378 314.049 li
44.3282 309.86 li
46.2989 286.219 li
73.8458 286.219 li
cp
.776471 .458824 .443137 rgb
f
42.9556 310.452 mo
50.0914 324.08 li
54.606 332.711 li
54.606 332.711 99.1265 334.403 101.384 332.711 cv
103.641 331.021 103.641 326.236 101.384 324.257 cv
99.1265 322.288 72.6387 307.915 72.6387 307.915 cv
72.6387 307.915 72.6387 303.966 70.9903 303.586 cv
69.3331 303.206 58.3594 307.915 58.3594 307.915 cv
45.5513 303.57 li
42.9556 310.452 li
cp
.937255 .643137 .34902 rgb
f
50.0914 288.713 mo
47.0216 309.86 li
24.3072 309.86 li
23.3497 288.713 li
50.0914 288.713 li
cp
.866667 .521569 .478431 rgb
f
18.1593 329.05 mo
18.1593 331.494 19.6558 334.876 24.9229 336.001 cv
30.1812 337.133 57.6915 336.001 58.5455 335.062 cv
59.002 334.572 59.2896 332.576 59.4586 330.784 cv
59.6446 328.881 59.171 326.962 58.1231 325.365 cv
46.8619 308.194 li
46.8619 308.194 43.7589 305.006 37.7227 305.565 cv
31.6861 306.131 28.6597 308.194 28.6597 308.194 cv
28.6597 308.194 24.7706 306.148 23.4517 307.095 cv
22.3609 307.881 19.7823 320.538 18.5567 326.498 cv
18.3028 327.723 18.1593 328.636 18.1593 329.05 cv
cp
.968627 .701961 .411765 rgb
f
69.8057 169.366 mo
69.8057 169.366 78.2579 198.657 79.4932 228.906 cv
80.546 254.681 78.4171 297.209 76.2623 298.76 cv
74.1075 300.311 54.8946 301.128 54.8946 301.128 cv
54.8946 301.128 46.3785 304.673 31.6929 304.293 cv
27.0098 304.171 17.213 302.704 17.1602 300.546 cv
16.7164 282.259 14.9381 194.333 26.773 170.841 cv
33.5914 157.308 69.8057 169.366 69.8057 169.366 cv
cp
.572549 .705882 .917647 rgb
f
32.7852 318.66 mo
32.6324 318.66 32.4918 318.56 32.4473 318.406 cv
32.3931 318.22 32.5001 318.025 32.6866 317.97 cv
38.9044 316.165 46.1168 317.892 46.421 317.966 cv
46.6099 318.013 46.7252 318.203 46.6788 318.392 cv
46.6334 318.58 46.4454 318.699 46.254 318.65 cv
46.1812 318.63 38.9156 316.891 32.8829 318.646 cv
32.8502 318.655 32.817 318.66 32.7852 318.66 cv
cp
1 1 1 rgb
f
31.7398 314.731 mo
31.5875 314.731 31.4473 314.631 31.4024 314.477 cv
31.3482 314.292 31.4556 314.096 31.6417 314.042 cv
37.8599 312.236 45.0723 313.963 45.3765 314.038 cv
45.5645 314.085 45.6807 314.274 45.6339 314.463 cv
45.5889 314.651 45.398 314.769 45.2091 314.721 cv
45.1363 314.702 37.8707 312.962 31.838 314.717 cv
31.8057 314.726 31.7725 314.731 31.7398 314.731 cv
cp
f
73.8453 314.401 mo
73.6627 314.401 73.5084 314.259 73.4952 314.075 cv
73.481 313.881 73.627 313.712 73.8204 313.699 cv
82.6436 313.06 li
82.836 313.032 83.0059 313.192 83.0196 313.385 cv
83.0338 313.579 82.8878 313.748 82.6944 313.761 cv
73.8712 314.4 li
73.8624 314.401 73.8541 314.401 73.8453 314.401 cv
cp
f
70.2706 310.803 mo
70.0933 310.803 69.94 310.669 69.9215 310.488 cv
69.9019 310.294 70.0416 310.122 70.2349 310.102 cv
76.1368 309.492 li
76.3243 309.478 76.5025 309.612 76.5225 309.805 cv
76.543 309.999 76.4019 310.171 76.2091 310.191 cv
70.3072 310.801 li
70.295 310.802 70.2828 310.803 70.2706 310.803 cv
cp
f
39.5611 111.972 mo
39.5611 111.972 24.2603 111.224 9.90632 129.399 cv
-4.44719 147.573 1.9864 162.95 19.9215 170.208 cv
37.857 177.465 56.3721 178.692 56.3721 178.692 cv
59.0167 153.317 li
43.066 148.773 li
43.066 148.773 43.2374 125.133 39.5611 111.972 cv
cp
.639216 .482353 .564706 rgb
f
63.1075 162.36 mo
57.7735 130.041 li
35.3048 128.962 li
34.5616 128.926 33.963 129.564 34.044 130.303 cv
37.6466 163.032 li
63.1075 162.36 li
cp
.490196 .639216 .858824 rgb
f
36.6065 129.024 mo
40.3629 163.165 li
49.7325 162.914 li
60.5357 162.638 li
65.8228 162.494 li
65.5548 160.892 li
63.6431 149.31 li
61.3756 135.556 li
60.6671 131.277 li
60.5606 130.632 60.0172 130.148 59.3638 130.117 cv
36.6065 129.024 li
cp
.572549 .705882 .917647 rgb
f
71.0191 163.032 mo
66.2144 137.245 li
46.4971 136.299 li
46.1236 136.281 45.8258 136.606 45.877 136.977 cv
50.0792 167.291 li
71.0191 163.032 li
cp
.25098 .313726 .498039 rgb
f
48.9034 136.413 mo
50.6964 149.377 li
53.1959 167.442 li
56.4898 166.773 li
61.2418 165.804 li
74.1441 163.177 li
69.5401 138.474 li
69.422 137.841 68.8844 137.372 68.2413 137.341 cv
48.9034 136.413 li
cp
.360784 .411765 .647059 rgb
f
54.2906 296.836 mo
54.0499 296.805 53.9156 296.628 53.942 296.436 cv
56.7491 276.042 55.2667 199.547 55.2515 198.777 cv
55.2486 198.635 55.3306 198.506 55.46 198.449 cv
63.8682 194.708 li
64.0445 194.629 64.253 194.709 64.3326 194.886 cv
64.4112 195.063 64.3316 195.271 64.1544 195.35 cv
55.9586 198.997 li
56.0479 203.706 57.3751 276.646 54.6383 296.532 cv
54.6143 296.708 54.4639 296.836 54.2906 296.836 cv
cp
f
46.3424 178.692 mo
46.3424 178.692 55.651 181.163 65.2374 178.962 cv
74.8238 176.762 75.8306 175.789 75.8306 175.789 cv
65.8228 167.02 li
51.337 169.736 li
46.3424 178.692 li
cp
.937255 .643137 .34902 rgb
f
67.8116 173.241 mo
67.8116 173.241 70.2081 188.775 70.5631 189.129 cv
70.918 189.485 76.7525 188.572 77.2525 187.831 cv
77.753 187.088 75.8306 174.128 75.8306 174.128 cv
67.8116 173.241 li
cp
.639216 .482353 .564706 rgb
f
39.2891 105.52 mo
39.2281 113.842 li
39.2281 113.842 41.7491 115.228 44.9141 115.309 cv
49.1876 115.419 50.6519 112.896 50.6519 112.896 cv
50.6861 105.204 li
39.2891 105.52 li
cp
.866667 .521569 .478431 rgb
f
39.6207 106.615 mo
39.6207 106.615 41.6412 112.601 46.4996 111.917 cv
50.4161 111.366 51.337 105.58 51.337 105.58 cv
39.6207 106.615 li
cp
0 0 0 rgb
f
53.0499 88.7046 mo
53.0499 88.7046 55.7266 101.744 52.2418 107.032 cv
48.504 112.703 42.9693 109.689 40.7613 107.96 cv
37.7828 105.628 36.7652 102.676 36.7652 102.676 cv
36.7652 102.676 32.6363 103.461 31.2911 100.088 cv
29.878 96.5445 32.4693 93.7178 34.5328 93.5674 cv
36.5958 93.417 36.8331 93.7945 36.8331 93.7945 cv
36.2603 90.0186 li
36.2603 90.0186 48.9141 76.1963 53.0499 88.7046 cv
cp
.866667 .521569 .478431 rgb
f
36.1124 99.1968 mo
36.0333 99.1968 35.9542 99.1695 35.8902 99.1138 cv
32.733 96.358 li
32.5933 96.2354 32.5782 96.022 32.7008 95.8814 cv
32.8248 95.7417 33.0372 95.7281 33.1773 95.8492 cv
36.335 98.605 li
36.4747 98.7276 36.4893 98.941 36.3668 99.0816 cv
36.2999 99.1578 36.2061 99.1968 36.1124 99.1968 cv
cp
0 0 0 rgb
f
33.171 99.6739 mo
33.0679 99.6739 32.9654 99.6265 32.899 99.5372 cv
32.7882 99.3873 32.8199 99.1758 32.9698 99.065 cv
34.8599 97.6695 li
35.0113 97.5591 35.2213 97.5914 35.3316 97.7403 cv
35.4429 97.8902 35.4107 98.1016 35.2608 98.2124 cv
33.3712 99.608 li
33.3106 99.6524 33.2403 99.6739 33.171 99.6739 cv
cp
f
47.8341 101.438 mo
47.7086 101.438 47.5875 101.371 47.524 101.253 cv
47.4322 101.082 47.4962 100.869 47.6671 100.777 cv
48.0816 100.554 48.3443 100.231 48.4703 99.7896 cv
48.8819 98.3457 47.6788 96.2305 47.6666 96.209 cv
47.5699 96.0411 47.6275 95.8262 47.796 95.7295 cv
47.963 95.6314 48.1783 95.6895 48.2755 95.858 cv
48.3316 95.9551 49.6392 98.2496 49.1466 99.9805 cv
48.9688 100.606 48.5831 101.083 48.0001 101.396 cv
47.9473 101.424 47.8902 101.438 47.8341 101.438 cv
cp
f
52.2413 92.2642 mo
52.15 92.2642 52.0596 92.229 51.9903 92.1587 cv
51.4776 91.6348 50.482 91.4629 50.1412 91.441 cv
49.9478 91.4288 49.8013 91.2613 49.814 91.0674 cv
49.8258 90.8736 50.0025 90.7247 50.1866 90.7398 cv
50.2476 90.7437 51.6881 90.8457 52.4923 91.6665 cv
52.628 91.8052 52.6265 92.0279 52.4874 92.1636 cv
52.419 92.2305 52.3306 92.2642 52.2413 92.2642 cv
cp
f
41.2584 92.2666 mo
41.1783 92.2666 41.0982 92.2388 41.0338 92.1812 cv
40.8946 92.0577 40.8824 91.8443 41.0064 91.7046 cv
41.7667 90.8506 43.1954 90.6797 43.2559 90.6729 cv
43.4429 90.6495 43.608 90.7847 43.629 90.9698 cv
43.6505 91.1548 43.5181 91.3223 43.3326 91.3438 cv
43.3204 91.3453 42.0977 91.4937 41.5103 92.1539 cv
41.4439 92.2286 41.3516 92.2666 41.2584 92.2666 cv
cp
f
44.9488 103.647 mo
45.1339 103.95 45.3546 104.139 45.6099 104.211 cv
45.9097 104.296 46.2242 104.219 46.4898 104.103 cv
44.9488 103.647 li
cp
45.8697 104.949 mo
45.7227 104.949 45.5728 104.931 45.4224 104.889 cv
44.7735 104.707 44.2916 104.14 43.9898 103.204 cv
43.9498 103.08 43.9815 102.943 44.0728 102.85 cv
44.1632 102.757 44.2984 102.722 44.4239 102.759 cv
47.442 103.652 li
47.5655 103.688 47.6588 103.789 47.6861 103.915 cv
47.713 104.04 47.6695 104.17 47.5723 104.254 cv
47.5352 104.287 46.7579 104.949 45.8697 104.949 cv
cp
f
53.7286 93.0376 mo
53.7286 93.0376 51.9508 90.2012 50.5162 88.1983 cv
49.0816 86.1958 49.0816 86.1958 49.0816 86.1958 cv
49.0816 86.1958 47.7447 90.9395 44.4927 92.8941 cv
41.2413 94.8492 37.504 94.5762 37.504 94.5762 cv
35.5489 97.4668 li
35.5489 97.4668 35.3809 95.1612 34.7589 95.0874 cv
34.1373 95.0142 34.4034 93.3985 33.3287 93.9312 cv
32.2452 94.4683 32.0118 95.0103 32.0118 95.0103 cv
32.0118 95.0103 33.879 87.7486 34.5343 86.3096 cv
35.1895 84.8711 37.7115 81.0357 47.0367 81.4209 cv
56.5279 81.813 53.7286 93.0376 53.7286 93.0376 cv
cp
f
51.0557 96.3833 mo
50.8692 96.3833 50.7144 96.2374 50.7047 96.0494 cv
50.6041 94.0284 li
50.5987 93.92 50.6436 93.8155 50.7257 93.7447 cv
51.7618 92.8516 li
51.9088 92.7256 52.1309 92.7413 52.2574 92.8882 cv
52.3848 93.0352 52.3682 93.2574 52.2208 93.3838 cv
51.3145 94.1651 li
51.4068 96.0142 li
51.4166 96.2081 51.2672 96.3731 51.0733 96.3829 cv
51.0679 96.3833 51.0611 96.3833 51.0557 96.3833 cv
cp
f
27.8448 200.733 mo
27.7315 200.733 27.6202 200.678 27.5523 200.577 cv
27.4444 200.416 27.4874 200.197 27.649 200.089 cv
27.7091 200.049 33.6895 195.996 36.399 189.915 cv
36.4781 189.739 36.6861 189.659 36.8638 189.737 cv
37.0406 189.816 37.1202 190.024 37.0416 190.201 cv
34.2476 196.472 28.2921 200.505 28.0396 200.673 cv
27.9796 200.713 27.9117 200.733 27.8448 200.733 cv
cp
.360784 .411765 .647059 rgb
f
44.3375 96.6412 mo
44.1519 96.6412 43.9962 96.4952 43.9869 96.3072 cv
43.8863 94.2862 li
43.8814 94.191 43.9156 94.0977 43.981 94.0284 cv
44.9493 92.9947 li
45.0821 92.8526 45.3048 92.8462 45.4459 92.9786 cv
45.5875 93.1109 45.5948 93.3335 45.462 93.4751 cv
44.5958 94.3999 li
44.689 96.272 li
44.6988 96.4659 44.5494 96.6309 44.356 96.6407 cv
44.3497 96.6412 44.3433 96.6412 44.3375 96.6412 cv
cp
0 0 0 rgb
f
54.7257 91.5015 mo
54.7257 91.5015 48.9034 77.4961 39.6207 85.481 cv
33.5367 90.7144 35.6739 107.886 45.8712 109.199 cv
50.1441 109.749 51.9913 107.282 53.2105 103.847 cv
54.8243 99.2994 53.5206 89.3594 53.5206 89.3594 cv
53.5206 89.3594 55.3057 89.3443 56.8492 97.4815 cv
58.0616 103.875 56.4259 112.191 56.4259 112.191 cv
60.8067 115.041 li
60.8067 115.041 55.5382 119.894 46.8336 119.894 cv
35.5489 119.894 27.8448 114.801 27.8448 114.801 cv
31.168 110.574 li
31.168 110.574 25.1304 96.5835 32.7037 84.9209 cv
37.2843 77.8667 50.5201 79.3858 52.7037 83.4668 cv
55.6588 88.9893 54.7257 91.5015 54.7257 91.5015 cv
cp
.360784 .411765 .647059 rgb
f
45.5128 115.665 mo
45.3145 115.665 45.1138 115.664 44.9083 115.66 cv
35.733 115.513 31.1124 111.015 30.92 110.823 cv
30.7828 110.687 30.7823 110.464 30.919 110.327 cv
31.0557 110.189 31.2789 110.189 31.4156 110.325 cv
31.461 110.37 36.045 114.814 44.92 114.957 cv
53.7183 115.108 56.1197 112.015 56.1422 111.983 cv
56.2589 111.828 56.4791 111.796 56.6334 111.909 cv
56.7891 112.024 56.8233 112.242 56.71 112.398 cv
56.6109 112.534 54.233 115.665 45.5128 115.665 cv
cp
.937255 .643137 .34902 rgb
f
50.5255 116.371 mo
37.7857 116.371 32.1715 108.648 32.1075 108.558 cv
31.9957 108.399 32.0333 108.18 32.192 108.068 cv
32.3497 107.955 32.5699 107.993 32.6817 108.152 cv
32.754 108.255 40.1475 118.369 57.3575 114.967 cv
57.5445 114.932 57.7325 115.053 57.7706 115.244 cv
57.8082 115.434 57.6851 115.619 57.4942 115.657 cv
54.9683 116.157 52.648 116.371 50.5255 116.371 cv
cp
f
21.9888 165.547 mo
21.9888 165.547 21.2994 172.265 20.1871 179.296 cv
19.2696 185.1 18.4996 191.688 22.4532 192.223 cv
28.8023 193.085 49.1641 190.058 49.1641 190.058 cv
50.2027 172.383 li
21.9888 165.547 li
cp
.639216 .482353 .564706 rgb
f
67.191 154.335 mo
67.191 154.335 77.3253 153.919 75.6417 156.788 cv
73.9581 159.657 65.6646 158.273 65.6646 158.273 cv
60.6392 157.273 li
67.191 154.335 li
cp
.866667 .521569 .478431 rgb
f
56.6466 157.27 mo
56.6466 157.27 61.2828 155.073 63.5128 154.603 cv
65.6246 154.157 67.191 154.335 67.191 154.335 cv
67.734 157.614 li
67.734 157.614 74.8927 159.54 79.8702 162.335 cv
84.8477 165.13 83.8092 167.403 83.8092 167.403 cv
83.8092 167.403 86.9542 169.646 85.4967 170.969 cv
84.0391 172.294 78.7745 170.647 78.7745 170.647 cv
78.7745 170.647 85.3746 173.519 82.5201 174.892 cv
79.6661 176.266 73.5606 175.508 73.5606 175.508 cv
73.5606 175.508 60.1051 177.186 55.9234 172.338 cv
51.7413 167.49 56.6466 157.27 56.6466 157.27 cv
cp
f
83.5186 167.371 mo
83.481 167.371 83.4429 167.365 83.4049 167.352 cv
73.1934 163.863 li
73.0098 163.8 72.9117 163.6 72.9747 163.417 cv
73.0372 163.233 73.2379 163.132 73.421 163.198 cv
83.6324 166.687 li
83.816 166.75 83.9141 166.95 83.8516 167.133 cv
83.8018 167.279 83.6646 167.371 83.5186 167.371 cv
cp
0 0 0 rgb
f
79.4615 171.193 mo
79.4234 171.193 79.3848 171.187 79.3472 171.173 cv
72.9473 168.962 li
72.7642 168.899 72.6666 168.699 72.7305 168.515 cv
72.7935 168.332 72.9942 168.234 73.1768 168.298 cv
79.5767 170.509 li
79.7598 170.573 79.857 170.773 79.7935 170.957 cv
79.7432 171.101 79.607 171.193 79.4615 171.193 cv
cp
f
30.1143 142.465 mo
59.1505 150.528 li
57.7955 178.76 li
57.7955 178.76 23.6656 176.072 11.38 165.502 cv
-.905689 154.933 17.1163 141.464 17.1163 141.464 cv
30.1143 142.465 li
cp
.639216 .482353 .564706 rgb
f
26.4429 141.657 mo
25.4644 141.657 24.4913 141.786 23.5738 142.101 cv
22.4996 142.469 22.3609 142.809 22.3438 142.904 cv
22.3121 143.082 22.5225 143.284 22.65 143.388 cv
24.0894 144.562 29.7393 145.581 34.69 143.915 cv
33.2652 143.195 29.8228 141.657 26.4429 141.657 cv
cp
28.9849 145.494 mo
25.961 145.494 23.3101 144.834 22.2056 143.933 cv
21.6573 143.485 21.6016 143.059 21.6519 142.78 cv
21.7496 142.233 22.3038 141.794 23.3453 141.436 cv
28.6817 139.605 35.441 143.504 35.7266 143.671 cv
35.8424 143.739 35.9097 143.867 35.8995 144.001 cv
35.8892 144.134 35.8038 144.251 35.6788 144.301 cv
33.5494 145.149 31.1695 145.494 28.9849 145.494 cv
cp
1 1 1 rgb
f
64.8809 141.22 mo
64.8619 141.22 64.8433 141.22 64.8233 141.219 cv
57.3306 140.872 li
56.7496 140.845 56.2579 140.409 56.1612 139.836 cv
55.6549 136.812 li
55.6226 136.62 55.752 136.439 55.9434 136.407 cv
56.1309 136.373 56.316 136.503 56.3482 136.695 cv
56.8546 139.719 li
56.8966 139.968 57.1104 140.158 57.3624 140.169 cv
64.856 140.517 li
65.0152 140.521 65.1749 140.458 65.2847 140.335 cv
65.3931 140.213 65.44 140.05 65.4141 139.889 cv
64.9791 137.258 li
64.9473 137.067 65.0767 136.886 65.2686 136.855 cv
65.4586 136.819 65.6412 136.953 65.6724 137.144 cv
66.107 139.774 li
66.1685 140.146 66.0601 140.521 65.8101 140.803 cv
65.5723 141.07 65.2364 141.22 64.8809 141.22 cv
cp
f
56.8492 134.093 mo
56.8336 134.092 42.4312 133.471 42.4312 133.471 cv
42.2374 133.463 42.087 133.299 42.0953 133.105 cv
42.1036 132.911 42.2784 132.755 42.4615 132.769 cv
56.8643 133.39 li
57.0577 133.398 57.2081 133.563 57.1998 133.756 cv
57.1915 133.945 57.0362 134.093 56.8492 134.093 cv
cp
.360784 .411765 .647059 rgb
f
48.5206 178.027 mo
34.9005 177.337 21.8414 171.686 21.7115 171.629 cv
21.5333 171.551 21.4522 171.344 21.5299 171.167 cv
21.6085 170.988 21.8179 170.91 21.9932 170.985 cv
22.1226 171.042 35.0684 176.642 48.5377 177.325 cv
48.7315 177.335 48.8809 177.5 48.8712 177.693 cv
48.8614 177.881 48.7061 178.027 48.5206 178.027 cv
cp
1 1 1 rgb
f
82.6822 133.313 mo
82.0982 135.058 81.3609 137.926 82.0367 139.008 cv
82.1895 139.252 82.4039 139.377 82.7115 139.402 cv
83.1182 139.438 83.2818 139.274 83.3736 139.152 cv
84.0279 138.277 83.3829 135.413 82.6822 133.313 cv
cp
82.8121 140.109 mo
82.7618 140.109 82.71 140.107 82.6558 140.103 cv
82.1304 140.061 81.71 139.811 81.4405 139.38 cv
80.2911 137.541 82.1417 132.69 82.3565 132.144 cv
82.4097 132.009 82.5391 131.92 82.6837 131.92 cv
82.8306 131.921 82.96 132.011 83.0118 132.146 cv
83.2364 132.732 85.1724 137.92 83.9366 139.573 cv
83.7491 139.824 83.4049 140.109 82.8121 140.109 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2202.w037.n003.187B.p1.187-temp_01.eps)
%%CreationDate: 2/8/2022 7:37 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj26Do/QZ\^9?jMLBI`G,g>oIi0K'>asJ8!ifFQ[a^u=7d22i/rm]@ZR=m,D7o,FX:e4L5>?+bVf%$=fV+e!s/XED<RG'lp
%$,]?9)igM/FV!?mJ,O;"l$;MQB_E-4$-b92Um;Y%/tf_DdP[$LUkGn==><l-Zn"GMFk!?)Jn?fC/(Y]abs_8\?VTna=7F.(]F2mD
%g>@`\fe;,GSb0(-ShH@]I'$99>7!Bf&^WM8b-.:2$Q?hT'#%R%PhX18#jMZ6h$Q8_dM(f65+DbX(5s/X,ufnK1=<pS-8bS.o&2R<
%.Q(E>^K%:65HSDBoWHH0Scj2.+$a>_%fBO^LP]8Tl*nhf*_iA-$Jr3l'A16,iinH)-IoDq,G"gJnfNA0h%67YXm>bs;sa3>HnQ+%
%_W60+NcNd-hu^?Q0J.N#A-Mp4#7+J+5p?b6K1`iD[fW"&;ckJ!Yq@jB?D8N@@@/&bW/Ho),.j5FQN@WsVP)918XA`t5k)H$r4SMC
%*r*^I+m1lABUtB:_L/qlQh"t59UM7qT,kDa60!*qe,n@W"S6jrp1qX?bd/bQaHq=Fh^F3JY:=PW2m.`JE,_r7`lWc!_Hm`+Ps,.;
%ctKE`^%9-f:d(qOd:h.&Pic,?ST(]qmPkLR]UmJ5)s0i0B][/m/ppXsde(]5YpjK[FlD7`*<B([2G.&IlK5ZqV+_Dsg6)PYc?C2'
%@Y\M8TITu8k#60Yf2KG)gd$Qo/#XpcFE*o.n$E5h[soh'35'32/uj@,W@6PT"mFp\19^h[3PXYX=LS_[k3AR,k!t?\P6O7+JU_MU
%s*>acc"7^?0_!UHn>TjS;o@Okq)h[?C:9,@C`>Ul2AWW9/8!Z4]P>sfY`.aR)%V1p]'!KVcbj5e%f^"CC_hq?ZWK)S`@'=iQHA=[
%Bg-Ii<'?ko!r4r[i^*0tGspF85K0Yf\R@aGI)09J(]MB_LmPuET-7,-(X!q!pm5r$jP\1:(]MBLL_Tj-VO1K@1a7X'$$UcL@)NG"
%AX`/qYSa*hJ$D[2O"`Fa1jGlSdum:VJ%7%=cNs%0H$%h+%:2bo.`+DP$us5#fG%+,A'WE]`8MXdL,c3$B$tX0`"E%/-Ua'l!<:3X
%,7+<Y0uO\(nmjMf0QD@@fVd^4)SG&T20D#LVEG])i[NS8p5At\Sqk<KF5(H`\;:!t15MU_;+-MG1ZnTPEQ#UoN-QF`A@c_kr/5+t
%6)^rr>cf7u+8<UAY1Ql3NT*#<4L5GPKj#a:DOL>`5,LL;bf$9mX,0^KnaNfNlCXR/#5C4YaMII7A^9GKB**&dH2:rMm]:l?"4bre
%mAr*4XNik7:025(_hh@+_bFn-G@k(,\hb9b-:L\0hB@^oXr=V2R2b:g\usEk^.M8%b9%o&;<O3o9Tq\b?MOi+>8DiPYPdE?r42FA
%5H`2%>rV-+Ps=Li5O,oP:F<uO40SPaeT3_TF^FlVH^d6D?MR)!J#&UT3Q/Zp^\h5_i`F&qQs%n\k;8i>)ZP*P5*MmG1InYE[+kTq
%Q'e&ekn[<Bc*YM%deU%Ifr1=$'uOCIhej#(k&cgaf<G:f*(RC)J^nhQ5s<(H.kHYZ\k>*=<5#?I]VL+Jc1!B\UYao-V<[h6T/1@n
%VM6TMdQKKVbb;ide(F;^MnC/&S'C#8_NC'YMtk&CEIZDZY_RD.)&u4Ok?f--Y4Gu5@dd0UK?`>YW&IfO3q0O5GQRQ`/'gA<Wq2X-
%_qsLjD#/98YCL7<qAEWH7GrC5YRI1VVjLKrCIH6RH!!3rY!0%A\.6JU-;$2h^@R9<&sBCr'W^8/'\gJ<H.T@MBg%r?-?[;=`+4/U
%a!g17)D$H7YIBiJ1(B8*8JgJH75bu&N5il/HCr[][\49dNA=5<84E:YQ.-pr*6_b5!C_+M(%H84MC&/%qCH'Shr;0draVPOZ$iEX
%["otO'ZoLDDUqNt1e)fB+XHeW"(T1K[R(I$d!D&JSe4R=@Wc3S+@Usupc!s^,,.>S_;AIEM/4DlR+>Z,+tF@u'aKEQb$bBG2C(.:
%N'<c+E%bd2jam?SVB]oBUK?L^*QOJsBur'f_T.fgTl2FqOuWtoXTtVBq%l]cF&9QfNnsVf.uHhAaXKcp=YuhZCb=/s@N,M<nhoJ\
%'GiS1ABY>L>Y.a^E?X$iBca,T.n&$83G96X%?h&iMakm!);tiq/t!c`M[I?3P6s299MX)dQ@Q-:3E2,S!4`5O]1!uFU-UT3O\nI_
%;SOG+'r@IkJAu,@&L?:9+oi(_B#aG(1<_Z=!(eZ-da5KOjZAG5?<rZ4cimJUHsG,UJ@p.`9@MqL4>?@f1i*C8b]b<5:9'PcTpelr
%J-KlR\Hc^a@')7.P%RW8d"[<2;H+-hV8V7Oipb6+Ka-j&kQA'8]?2B2q5iOW:<k^CVY]5=+NenZUCnBM9@eVZ_E.>;`2kr+7OAKS
%Zn%!r2<JfsNZ&Ts/2Lf#aCE0:BnTX)jc427OLS.Z)ptH>b;,l7<.0M>V&u'KEd?T^"00Ld"Hs'kZ4SDHi87c$JJu1hJ\E\Uato<&
%n/h95_flA,8"'ZtOj`M9?jNG1$5%?riKMH;OomfH/0lT=b#`:iUlj[X$S<W7)d!c:mi@@(nIk'p)b#D>=<pts)JU=FlQj]-Z`V_e
%O):XWThHc`aQMZ+a4[n/i>=JS+]Cu\S9O=(cE9Ss"hY6,<Qg7n#1t6JS5,M\>L8g/[4Q&LT]&V"OCCmegH*Jrfu%u4lUeo1g-7]E
%+n>/?h6h4lg:FE>\s9^H1=TPt/3=rVa?5V*kFJsfi2VnZpHm-i\J?'YfRShIV;rFj:$&H5Bc1*9)Cm-lVeD6tUmD1K)@h]@YD_rl
%/`N39P(=d3^P3a]O.<FonA*L8"qAV2CdTZWBo6RXblJ7afL6-;keP<;6ac#!jnY5ImooLE+/pnlkn0G2J=BT.&4D)C9>R<KBu!)K
%/L./Z0$tXsQgQV,E*dK)H@Bl'+V374g<:+lR\Z<.WUX7ACRIpMCNT2!>6<K".&bV+RDD=b4=JgW0mJKirZ`-Kr0jLn;'rPB3.Z#k
%<_S^f)]Bh?2/;/bPi?<NO4;5_l-t=L9HZ/YdtZ<VNTTaG]KGF.UnKM>-lHUNR&%oIWK)Nq5d9PK*Ys^Xdg:p;J's9*EW@e4T"-J7
%P89]SIYAXtq3C_O3*fQB$8,<)T\Uf"&.qHmE&pG++Le]ALpmD@nqtnY"e_b%1TP<MHD:cmm0:KsJqC$3UGA[9EtM,W)mYgg1!ZmK
%f3LAF*e)84aT_7t3tpgKr@[7J\XDWKf:7dLFIVTi]TlN/2G]5Uh_VH8Pd+cRQ;PKGA?mIY1g9?_BtBTe:V[D?;ZXNWF@Yi6A[#-8
%8>10c/!P$Dl&?q/itu_\Zr"6Rn4RsPPK8NCM+h_@*%+M,.pGbS<kY%]:g-.LR?!E`&Y$oP,`AKlhQmYaFQZMC(+RKk/1L.QD<RSu
%pr`>FNsme1=V`8&/0akRAcmV9+\j,IKoRCN-!6b;AO?Y3,u6-KE=U-ZZj+]B6Q+OOUsM5$/k8EG8Q<J05Z:L]8,TE`%1n5jWok2"
%=+!_PYP90jR/jqH7^AVO]`W8ibXE4BGCb/C_EeN)=)gF'9i@OTW6nSmQ*>:Hq<U6cSX^,r!MKk<)8KfPo<,T_`)I60!#^IQ!S:FQ
%d_S-U(H'Eha+bJ#q$+F)i)eQEe$,Yl[@7hE2<F4u=g#)QmY$"7NJ&_9>rKnmF?;===jm*c0p;Y>LFq"RiE$`C;).4oJ:TdJLog4m
%H0?AD/6%2MG$6=a`Vi]gk9;h_OGI&[Irj:A&,eGHpoT>7eLrT`%T$jUS.DE@e7aPEUXPZ$4s?LFS8iQ4ft84A\_B-o4NK\r93+h@
%e89T5b_(_Z5Z'L:RY,l>OYi_!W$nrD/qAYpCe_T![2g4YL5nX@*a(d:8:k=hA;gj5P^sl,U"R;X:a`YE>_E3?l;O94AR-`,=.k7U
%JmdL(TtKH'8,7)Oc4a?Hp1uR2;QQ6/jTR%q=@7ZF/:[96+\0^613DM?i]WIrgib[LNc]sZ5^eC<#9!uSTO94<K$]U&SYCDZ!*@<H
%^3[p]k"/LdEo+Y"&bs\r,"Id]B9I3V)&EcD@bYk^/2$eJgJ]ZAX<R3d'9L"]Hs.9Mm"iQlip933C$'DYQ%:#NXGR$m)EbcG;a@nq
%jEbuYQ[1!NmkMsi-FU5C,DIO@)\-5Cko<MHomoY1*0H1^'k@fRc3#F(n%:-M@q@3lF>@!a..5ak6V`]\Mo.e-"ldrMr/0-1/mHhW
%'b7U?n"G3%FFHU_Z(4J9Ek<OV+g4NK-Z8Z>6t5tDs0-2`l-[)hEVKloTe%XU7@/\lVS6l6/1X0JW*+rVU=AW=ZA61l3A7,.dif5@
%BPBQf&rKnjO]&a\]ac).9:9&*1fM4C>Z;lm8(X&sJV`]rI\Y?)s5:MK!EV,r8t9+,^mi;Ha(J@8$GR2ejlF9YL9W73.&;7b;FjH%
%_!@.Fg\_sNku)1e3?JDrr_ae[R^o&hh_c@/#"r-\!gdSp+TGZ:GmM)U0,dUm"0lAXFJ_AmjkGT:TO8&uc3>^Z^ZeQC7[V8\9mUhD
%P[rpm97r_20'Z4\",Q,jA(a_/L'O=tdiYYKnmXG_)EftiS6Ie2%p&g/bMoW5McE\6+*+ufF6BlMrRDn8Z=Rb!`U+ZqDau!O%Ppa]
%8+VF.(^khi',mQaO0hJO2[C9+8ID$mI:cb!Eh.=LUV(G8q?)fQ@qo3m3R>lHd?Jo<N'loGQtZ#_b9)n3YXaWJ[WJFW'aCY)"),K[
%9Y@<"Mm"o*,3=+%J>7[WgL>iRXjWPEVbR_h@Wb@M*%j:NK*41D?ICa`l'G693^SJ96!@7-13&Rr'@Kr;WRYE`Ng]BK6?a\T&&Z&n
%oZ_UDgK/WtR1n48Yf!0@/;\<Ga%s:"BnX.[$4W]5OO6G[MNN$Mnq!3qfS1j!ESquA6>gFhJ`,qB4NLEJ0XA^0bb3<*FHpX?Q5?_a
%]eaK8D+1ak1lEtNdu'(S"-P[OXDWq"-a.-S##(^b[K1)Bi6$8>H%9o>L8gqMNnS@k+i.#i,W!SM*j&l"i9@!KnoA[DJS:$1VLdKX
%J0Hf<J1F6I;3=V(PDGL$G9W!=dsI%H.1PUJ_aFGDRY.seE(3\D%71HiGRj=sd7U-rBq:PoQsBnf.,@Fi&?V3FbKc9.PiaCL'ZrP4
%3B="]StV"<&Pl60&]:\C'IsWq;*7b:BGlPo3L[o+9C*iP=_Deh^Pg)lAe)BB=jq[2Ln`.S]ZNC!l8ZgM%2+c5ONNSe>ng4*Tr+l@
%!:r;^[>2qJ>-'J1ai[PNiZ9]og0dLYR]oUfi08o%ojm\+5*C#aiSr578>KGDQ>@f+Q+Gs6)<q:\MI:0h,)dJGCCg]<=e<]`J:2*b
%b;_s]&)_P-EXSlQ"+rlbW%F'0%eO1FC*uWB!a\:GOtk6G(!C&lPCno!]c:`7FTjXb#MIs3(*+'X#Oc7b7\tl^kA?N4`5C;pO_[b\
%J*3YgA(_@0#+=mkE-hV71OWOqTk4=SW=*_K41=^Q='TOhFE0`7Aoj%oZ74WF1D9'N&AD?J;;dHOZ:(Xr_eI9:OMg!RafnQI"g^5I
%R<F,s=sVV`hJr\2[,ad/n*06kR_cbpj`j-E)S"(l>_?]P603B6b@.2t`1?nT<9,L_9'm(df0Q0gGS=2DX/<dHO9QQQ&(eIp,X025
%_s3DJBh@"'DTVD*>JA<%Ic\L.4:1N#CYVpns/L:'=:]%XW4oWE/Rg3<I%.6<0T-tcYrPPUW)5(sY2n'W#C:P+[+b2f3!5]Ok6ElC
%:o[tSpg=%_i+MKR;7R,HG8dl4ICFN*qs/_^l!j$(8=Tj;<io6q)&*a>(LQ.=C1;mW;C#!VIKA/QcXE6+?`L;iBJ<fe)aT(J6='Gd
%?K9P]"dcVdV:,E3\#\D=EigBsR*3H_nYkeUrC2A[KFR@7^;CU+kgX;Z$O3`BZ.]U)brUr?>+m]7m11WWGnd;0bk,gQ'ALJ=beene
%L6ajqgM[h0pIZ7H3;mFeEk-;BnE\]&66all2m3mm[9>TWX3^C!K$e6'#\sq='S_'b=fN6i7cL4LC'C/WC6^iO6;!bQqfN$c8tOgh
%DMM5nf+/H^ZlU48N>C-&M82)s$Z#G$#p)i?0.-pt9YWd&+,0Yan-&I%`$u#B@P_hl5BbaLaht>bj8ModW0L$#8nYXGaH>@nPmZX2
%j@?NkN"C^p`=oj`&j@]i)RVuAh/(Uk316J1+'N.Jkkr'TC?Ohe@@mL/S**,iK]XREY(/?(A?u>$-2oMsD=ce&B/nI&.'BLX>$iAN
%Z?2'JSt,3/9B?p1,MNL]-T9r4g\ng<=tu]E\P`H(HhiXC,9C\J<rT(_X71'KVRKF6BX\&1X+sM*h.ZSsAI@%cEj63UWJ!fYm"2qW
%+6&pD&!TfXE(*u79l-=bPLZ`%,2`?>>F,(t5`r'Ri=ad#O(K@[kZSrOY(P0QFXmYCWo.E_o671d\rM?$/2o1ld_"],ErF]Vf12T8
%.`T7/$]PO^3:l\c"qEl;LI.!%jiBIHd26/Pm%S!m0lZG.r@f9BP9prImD_R6FBp%,9c^AoOt:&%@maod.ZL+S0#s*9Wo1D6&Yj?F
%[O[,eQN'+(_m@b-A!8Jnbo2SmL#3=0NSn"[Qnsbukp\hLjJoVO<XG;,d0MY0*$4!u1N?]s@g\\k)!Jjk(bI"cdnrFV1@X8o0U=.K
%WO3\!@#(<2(qR9s7orb>?0%9NK4IP4*b'MQ%&@tJNESJYpu)"e^njtObj0ra,u"`;`)nXABG>!YN#oc(0"=Skc!@jdnU9Q&gfRiB
%F7.2q?+DD(jXqK9=SCj/>,aN+k5$8XDJ(SV1mp[C/k3?dm`Wk'\[a@PpZ6_JR/:oF?g`ColXCXB3HMXA\QJ&hO#NC3^'Eb`CVO!K
%HR?2aiiSXD?JRI73u@#P+;m/6c9\d:bQZlsFK9C41G`3^>^3N-7cBThCS-U8$J=n'c">)$Ad7kbAD>A:bKFME)D_4.>scLi19if.
%T/-reEGV?.(lb56P'L6^qB7GUWEePP-@"/a2"kWgiaoKT0gDp.h\YeVojCRs96'qZa,+u^EjN)i`e$[=jGmiaETn9kPCalp?Fl#T
%bph(M+9j@!?1o5ls3ti7TGhH7h6&Lk"QSO/X]:iBs%`?3W_BD0J_phIK*<Sa;R'!KUJLiSi4=`"`m5K8r#E>.EE"Gg>C5ml6P'4P
%0M^\,h32#cDY-VUd1[IoM)Pn3(^uf#Ef<R2h//KgdNh)ge=qSj1F*$2BY'[!k$&N1/2Y3*jc'iW#@lNjCj,NAn"<i2?5WR!;X:n,
%[,Od'Y6sBJ>rZh9k@T[:'1[Q^MLB[,@*XdQS44n$/fP&E'&hXW)HQr;ElP5Pfpn*f3f83KcYj2_/PUZWCt=bso[uk-ajt4g9Hsgl
%`n1llr!]3"]Je_7gA/:=3,ZnJKdl"Lod5+Kl)>MTmMgV[e;hG?Wo/+((4RJ*C+S!O94^?5LAs*M>k`#nqDDS"(dk5tTGoXZ#IWP2
%_3g.c8Q.0]iADEX^Ui?5KNP-BHHjA7LKR11NHLJ(3b!,.S-;!,#NIJskk;!<=##f)G^1#Kl#l::p;^&VPAYMWEU;WZ"U4K*$NABj
%)O/W)Q'+041(u=?B0rW;d[?;kZ4hk_RW6Z0N;%9^3lYc+p=c]NKCVT1VVBkcm+pHs1+rKbA*i(/*P^?/`iO#tV.RF-(BXM`Q[QV4
%Pq&]k6ZXujg8;d:M%Ku[*rS),pBehp![_3&C'jPdEU0a`ol`0toJV_4XU:(k`b"](m/A[^1"l-b,)39a4X)$R1(u;RiZ&r/`k+lQ
%am7h(^n%j_(1Z>Je-J-#+RDT2VPj@%-G!H^#(DMiB(.M^qmAD?WKEq86HUt]mJe$!Qb$a>bAY<5Q<\HHC-)V\(Vs+Q2(?_.$^GJ/
%)Ik_C0,3-*p5j^_Y/M)(4>+"B(c,-MF(l8R)Aa<Y1%Rph9BC3,4N6k.k9Pd8=Gu2Gf#EJ4,9X```el2\9DHc&ERmcbFFjt"b=8TH
%LVp(C=?R&,>,oLR<"K#Y#\N"([_aS,U;T?0iglQ]GFjZ^.uqh9';^ai0lra2KiuPdM1a$jbH!VSPYGF58h<[lnNl@6(EYi2kG!p_
%[[a1!PW6`X]W@\2YnfuJ:4=ff$o<C)M_`UIRHL=BT?TeRbYg&c*+UC'J'MRWME]?TR25U!R&+&P364e+8=7q4PZ[L&8j^&&F-gJW
%F)#/9ZmhEdl+T85<r1X"-Dp6dLZt4_5<=[ANaSaP021i+kNMo*oA:O3S4<Gl-]U;@2p9G!NSa82B'+.$QfOSuQYS<H0UHQr\Mfdi
%;^'c$)ZZ:qCNFQ6P/UUT9KJMTF/a=AWAZ]dk/Q+[Wm.BoX@Tb_NmRT?c:jTpi>.%Ks)o3"W\sk?bNSB;aI+]V(aPJ%U\Q\1>t.>\
%ItI5gg&H%U$O7M#/RcUh*TL9bNg2aC.6B/`k2.a)K1Md"FS]onC"DhBQI4p@Df-H]bq5c,0t8c7#CgN((L$LIDrkHa&eZWT0%B$M
%dL;BS'6#C[*bUA-i)UaZTl15hTj."f9>L!3]SG)jG`_\Val-a@m%mT!G_=2Hh7iL$DlstM#BH.M?RF#S\qp"oel.dE*tOp!pJq1p
%LOG*^r]fm0N)LI?Qo#[WW)`,j-J5,Lm203&5&7H3dPm<V]I>c/8'D4$I*23%Z>(CS]bHj1gXfoQr,)_t)oVmeNQpL?J]"/QVCijI
%n_nFG/Me\^3OU@mnNtoIPZl\(TG9u;r2O_-fX2B*G&G;Z3H8T^TY9nK*6d)5P1-oQECV$2/KW::Uu0)ChZ'.#$R+^1^Kh]%pOE&Q
%B1hoJkMP&LhuB89s3C@gs%i"]Os\3i@%hGVeEZWght`l4I*[#Nk<$NZaaDEYMBX*?^ZYJ=.$n_!O.MGRl0>h`"kF'+7:hG"l)cWl
%[O[Xr0ACK\?Y!p4>\o?G?I[6@c@"tadZ^%7VK\:HRro`=&%*@C@+W@dX1S-0c^%gEfikf:nuHb@_Q=_2p!TY8K32T3*[[A3al[$;
%H'iF!_dkRojh5KiDd>5PTXk:R=0MkOWcV7qqHg1eK@X'J-uRQRIWaSGkraDQO.X\WB=FeXNY-4?b4$ilS0h-WCbj=rJWp,?<,&fG
%IC3>sPGs^T%b'K2A<u\XFZ\10PT9Q,Hd^-09""tQ0uNOUAj%PmiR+$bJXFAHbKL/:iZKR.F8MRj(u2C5'"=p#%D`m-7?.!NEL5E[
%k(/luRWoluR0R'\JX:Z?AKH*l0,G4T=ZGmpUG*C3R0R'\JX:Z?AKH*\[JsiH97J!JqQg3u'C#![FTcD:@k;i@C>qT4ZZ`KsIbDXb
%8qM)_Fl\knL3f^o%)b/=53_f8`&VHol1[lqg6Y@K:]$Z0@6Cl_9Z1'no1LFmb4/6LEIJ;EA80(e\:lBGiAL._nW&(M>WGRM\sY(h
%ku3Vk\_eH4[nb+L`;/dn&-&*7gQt[<rF50_RJ?'<q'AHaLbrV>nmboB2F#JN.4SlnO0dFj0:P68LYiAp0dgUKQ;WZ[_(<V$)HJ=E
%aZ'],$XGai1Hle-Ikp[VfDHdDRK&1/^on$%BpmM`3<PI'1OjB4ApPe8m\*@-LUO?i9;=L(N_17c7aheu"qoNR]_&,+i7QC2j.Q!f
%W>I,j9pQ_717\ul/DRrZDn3fk@`N0#cJocApYm%`4H;-ZL=SJI1!*)1SUiai*$"*\N-QCQ;ME)sbj%<N1%g_cO(1jN*!>$@Q6.XA
%B]>T,\UPBI8='e#d.5?b[8NNjEiq?a0OaQ_6)bD?68CE!EZAU:IO3"Ep8-KG*!.L:O*/)u>'Oj>o:(r``fnK2MK.b)L#3=0NSn#&
%W#"B;A3K%pKj1s.dOMX3K7^^@+WDtV=t7R%^95m_.e_mrl27-H5+'U`)>XF`c1!k`1O;(-N82Z6;qKN4W>Jt\e>gKmheV8BP!=?I
%cK*\^Q]5/p%[U%tR"iYR$$tCgg7UYFpc31M0%sm@?`#V-(sB1RFSB3m4igH)VY#1rH([!K5[TuZF>%L>d_0+`1Hju/*W:.FkSX+P
%`;nplc91'$qDT*lUWg#XgJ1"eAnXOT7`rm'L#TM)2@j<t(Lc[@0D@+f`8$iOHZO7HDXPco]t+0thHUIfAa[gf]t&t2N&-hB2Il_k
%N2mYid%?5Ie_H^b]5r%;DXPfph7:'Xf>B''qCFUJend?gZ-\m[L[Im=<kN2BEJ2cYHZS`.bM8_ZIXc7TY%*95G'VNf?OUjcMJncI
%\V%*WHR1"A-Ide+!&.n\@H&r]Qs]JGBu931>`^\3Pj)@sTP$KKOt%eB'/-::bMWc1'/l<rA\W2jQ!dFjmMAKt+.KOp\]r]dEh(qf
%=`2I,.$"X/jXQ^5jkljq'!jC"Yi6"G8WQ:>g=8U_JFo4>gN7pPhVZqic4QE)=(e]I>@c.Gl)cWlY)E5fTMm)Bj+!ukU^QPHmja8D
%<Zd[=:'uG$S#ra`\?LjQGL^Lg0)\*J(Tm,b'0KK>Kk5&MB$2:kFcTf<GAiJ.3bd$LJK<e9TqDgd@KojXA]H[cUkiXB=stW8P4X6i
%.d^>bJmlbURnpR-/Xa:s)m^(Tj?RAfmn(E.DTtnK20Yt%XdpAgDFWucRC*l@-q2+Bg],c=eKC1&E4a6qRm_"qGHcpA=.(!r'4hm&
%D5+R81h%RTEXbgP;)Fb3_k"$#GhZYuI6A*artfF2^VG;Q`'=acm:K1_-luK(>WB[+YAOPMlI1H>0l@$c8!<TnI$\:4KsBM`[B;#G
%XRBlu<M;O[$Ra6dgl-5ninuL=+/TDNF06MGb44o42<i7<Ne3mFjVXVt-=/@^dI!Cg`^sJqF58g(\oAW5aR_&(S:75G2Ws+]NaaIu
%@Ku;j)0s'>1tqXZq(6<1m#/j'K$F4b=n3El(DDd@MCLeH(ZShSWK?(#:qJ_5D.X\Tpg*O?`!\XiTuhf_hM%'=R*s_KU-]S7]4Y3J
%2>2g-[E00t1O?KJ[Vs9T0dh;4n&RJYj^YU^1!J:,^KY/q(+tr@bn/SC?S[1@?(@/.ft&O*%bC?l)lC@oR\sQRC7\iml1,t:Tt@99
%#^W"ZUn(,)qJHpn>#ae:)q6i!D_H`4^=8OHOO#"HXOF[.h"!,XOC9W5P9LTK2hhl-M]:L;.QqBXP&FD0a&=EVAr4W-:-qUt3h,N\
%fkfG[VU)t1bD\;=KNoKZnpK0\X3JgIhkVrW4HET`0RC`T[(D`t'-I7ao?!MJk[P\1pk;kEPdbbFr+@:k1jV-*Q&sH->aVr6b<Ih8
%4+7La;L2ErcF9jnnB6n!Ag-C9TN44-<p5R;FU?@s=/B[(a^>'0W7*PhT,j3OnFr$YaTMg40%MY,7&J@L?75IFWdba?&r2GjN,d@b
%"@(0-j`9UC'nn2b>-!oIi,?5Hh<4=JC*Fr/"A!VFk7=4D@!mdHTFn>)Ar85)^S]CsjPTDJ^W4[KNReEm4Pb\`pp+*#]1S]7;6G9H
%IdfY)I0.t[!&gN.HW$lnb<]6$9,uq5Psp?*hYIL<L-I--oGdm4HHLCnh)";T"u(;^BtA"=ZJsUq<`)FJDh$]C(\$iC_#=O9,k_ln
%5&#l5?h!P%QNQkXKY^JS33m@bG<I3@"Kg)D3V(?ZWtd<47i-@eq9"J&BVF*o:iI7"KkS-tM:Cj?nCR]#$LjPLN$mubDA0D_NHS%A
%D5=_`0Cf8tI<p//UN03^@oND7<$_*$#PB2ESZ<LZ(%<;cILEYpl$Pi!OE^2(Q\&F&f+K%CJR;0RABI27g^>`=B;$=2I<o(t7itq"
%iD-q,iKoUXHFqs3!W1`ba*:<N[!"r!!iC8f*9Ki>C=a-p18q@K$BjTY1k!_C*%7d(Bc)q,lj'cEO8UEHbgK:Uq8@:"XHhPB4sRlN
%L[A-Uh25'`jF=qLmJ5;52Fts.;6A]X.q6"s01S;1O2A:shncZP(!i#@g]+Y14]Y5=/&Fu:<7I,G8akfrjg+18$sJ1d^f+Crf!KQV
%q9h:eY`kaXgi#LO]ir6*,H[D65ZJn&)Ggh\]=G)MdH@FkRq((@)/-tt86$jlP;m:.lS(?D`#H?m06-bMB[dut&BjM;cdZ.#>,@"`
%_T&t$AN8YVG,nlJ#)QCMO(ufGB>[Z<JRj,Xp<0;`O2PAo4Xf3Z3,sCFYI-=pO"?Grh1>X+h+2ml]<iS-mDI@F5js/Co_]BgG;6n8
%kld`9$Psk$i5K=<MN"@#_#;NE_2gcY&03s[7*t]M,\h'4qOnJ&;(.drM*_Z:b<LgfaGsH3H(0W;)@]k+le_`P=sF&@hP^9N7O_e8
%pIB1Q:"mj_s%P;aWL#ojj3ma"iu\E>Ej^2lh/>-Z7U#df(a"]qUkPRXG(6$.;I,NepbdGoZ\+r&O;()>X,7bTMAH5_9`44t<bp75
%c6/?%f*XIQa;a>V,c^(sA;Yk4LnXfJe2S:'f-M,mYuX>afcBtNUJNAGS"M,.TNIQe/FOq^2S[;Q'$K-ge,LhSDDloBY@riHTS_!o
%s2DQ0)4ah(?]Sj.Q?)Tfn&\Z"PH[`Lj\fN1`44d%K]\]F)&PL'nYU\#`3s*!.F$;rO_D`2)K?ZejGUssO.bNJ.G*%NOU/u'@W<;W
%kGuSBO5@J,BIRBU@O-CI%r9N?IS:#RTfY@JT*kug?ju2%;7[[ZO$\K0?"mc,$Bg^fF[TS64rIB).(b<Q7jVjE7523"_dL-,4da3_
%N9S:?\Obs;cGuSZ$aW.aIKL,S-a"Aa@\R$%WTr3'AQY)3I\V$_o,GXOI3V0ILC-<Y$#HVTOI)pCoq2=[<SD"K')^5a2Dut4't.<9
%RlA#Dq;mcC,V"l\NN'>p>D]/e?W;KSTrAT&Z!L&qY4ZD?f':U6]phR%>I?/Z)ht8E.GVaM&W)E:.!nqH-j`Dl44<W>ZAm3iO2gGV
%KOT[(WEFkq$)#[r![2PR4L3q8C9;GRCUX;Q=r>91]?21oT]0\T:Fi\U/@GD6&r'XkC"mTdE"FLNRJ!W<rT6[a-FRlJ$aiGY./)Vl
%`5Y*Febra\\Hc'%QAFqj<2WbBSdu/;k's;f(JBRJ?S0D@J_ko@EE%.a4Uh'Oo2LW%]N)#E00QRgFE7-$\6=jJm_%dlk[l2!%S2:r
%NZ,=K;E799-=J,t;Y3_VA9W6'.gImadN7FH17?p8HUf_EkK.pDSf#"t_rolWhHt"[cCA/-0CB]^#K^N:NL!g-T-$;P4FG`N9)8FH
%5Ma5$mHa]@c<gJ4c_&>?lBba2q;D6=1:csb!Le/5^$W_0SKI&B.@rD'mHX3'?3<E`VO^LaAU(QR$N;Td4.0`t%Zb<!)@KZnc9?Y\
%KfAbpe&Ui/L#!R?EJm"m%!V"dIQZ].Vsb"_pp!(+e*\`]%W>A`Yjk4tpZUoh]N]fC+&AT"SboDY6hp-N9._.P/DV9_nF#69<o;2g
%R\q,"ObRW4;TJ)tGdFR%dsO&eI)D#Kn`0K>QRCZkn;Rs.4=_YZ0,jJFZ124<[T2Q+aCd.j4oT01\*MZ#(T5tRr_]hh:)SCS*uLE*
%oqV0D\)pS;47b];]iRC7?ejE6OLr1*Hn"fqD1!\1&NpS:Sn;@^]pQGJ\Qr]PjR.HKe@qI;a$5&+fC(Sgg%L?PQ$p7Cm_.7JY%KYq
%.o4aGS3V4ETo$c<I!mHAnA3@r#"G3@CB/Jm(Qd3`k6/`g!.P$JhLG>=i&;r^G[V8`kjTR`llL?Tlk%WV?Ca3$NK4;nI4+XSrGh\D
%piJO&]s28!LfRDTh`e7*T%lHb?EUtiY`nlrJ'$J^(*>a;p9'X:E)`ag6f^1B3C8>Wo$+XcV0:D75K`F9g@i_,=gmttq<$E)rgs,U
%gXCb\[_8"lY`4"s_U"hn2_SJaf:K>fNhfSG`Feu-iNm:-FB-9H?)R8`8LbN5T/t`q0CtTERg3;=2I9^mR82jrrjl`)qcg\WkD.e.
%g;A+1jh&K)R*VsOR<@uKLYQcepHCF#.6f=%RBj5BiA_e$9-`7@m-8@FhBuPV$a3l%hg;d'8NV42QJ!%?4))C5^@j+)s!$j5V\X<>
%lQ;*kAq0hPn&3?drCP621V(#qY9t,F$C0[=nbLdI1AAckk&"Xmaepdq377sj@B0o&/L4C.hL8*]f^p3rZh*NM&\33h52iEYr(>5a
%IbJ_kbA5FmX&go;>"9o8/ghI$5A__`+6F&rpVbcSElil4]_qQO_GtQ);qjmH4=u%RY&9l]Oq1l:V35Vt(,F!eB:mM5lQ<UN-;t`H
%X3$@%dc7-(3I6t?Rnf&%(0gNr7f0Ta[$DfI8D4Rj5:7KM]TI<.m2JVMDa$s7^.s,PDA=Q],PcT[NK\b\jMbQul.P*tjKkl#QHX//
%a<e/7(=/3!bDgkjr6_udalc=iO3-4qqI9$WH97\Qo9[ad#>`rPP=NgiDXu=H\s,>1h)CP$[C<?'BC2l1ag\[5gWB3QO0>gXO)JAe
%aj705+-U&,XbY#VZf@6[nSS52o!8%$06pjp>KN@Gm<Q"Cq<hImG*puTIOi),Q>A\ucPMbVIX>M.T%RIQc7CS$XB`Mg]s*fNW\(;2
%QbG"aqu5/uU$l'URg&-Dk)0E;i;Um9en4U8_NXlrUP3??GMa1Af>f6Hq9L_=L##P:jb:C/cOUg%Mu2YREVWUWiH=JQFQ&bp%=Lp:
%(Db:lP332h($PL7CKE'O?:+g[`VQKdqN8CJh6cUb[MK`T)YY#6c)90OX/1_5MsDbao0qJ[k:Tr]`nI-pf%o>\03ad$c]5cS?d'P'
%3*^i[U?*3chV:5"4Sniq>Whu]G^],<ip-K]:L8HXd6I1@Mo!q8AaugGq%^JDX<)#X(RrV4X*Y50:G;1mJ!dp\\+Y+1qOY.go'8Fh
%q7:Umqfr,-hNO<!jLoA)^OP^_O^>f3^\5[YGPn]@pthLik0CZ$)eV\8r6<1kpFc2I?JiBjdVRgA[rtYBafY8Hk[nQ)mD7Z->5S<>
%-2kW_0%mB!g<uaKjX3\=mIFe%kPEa%df.G1X%Og8lIjUtL">"TcfLX79?"(\Hg0klQ_UDRAYHE"/GeN"rL;fIjj\=I^2,h<>K`L+
%qM40FV=Y+:Zb0e?]j0EDHW+36?%2Qnq>I@bMe-6GREJZ_ojPD"H]qWNYHP[N^YF4CIXaN5G^J=1qin\,okNgQrQNHRH%5SXUj2q'
%j--D8hiq1,pHQ-jp[;JCn(-o.p3+dN[r.d#7;7#HalDGSlI($k@XIh2b2][CCLoTBolamgAE:mIoji@0j%$kg;LD@!>:F2AH_m!Q
%\ZgBE',4J+Z>2t2cJIEAeYf%/WR[PX\`W0SlDD)fp-n]"lBb]Fj_F&%.<`&oXmB4%Q?(m6*i,)d/3^:&jh<m&qV8`/nD(Mi4F"8=
%o,kWG"eQlAPl6XRDG$Nb4D<9j5HLui?@>ujDXDgglhSE:>4.;l\T[Hr='g6[s0f2p0/T$H^@&V4[FW4""5Q(E3FBum'`$R;LQC#%
%+!,;Yo;.4tL$%C4GFsnSLP7D$p;>%lc("B[lKQRiqU1S8F_>bY]q.F_p1F87q6IGXAplMe^O1F8^ODA-^0Y_b^"6.tR1K0DHhjD+
%H?NT7DGi.6<o0Xtp)`$_q(H)>:R,9db8UgBN(4iQa2\u8DK4(XaL7^jhDj;,)&r$O^\GGBltC6`48O>uXfS<?Bu]JX)ssWdkHu,.
%UIFS:.ecEEG\'u\'fsp4G$"C1)dP[1h9[79XBt5)^:(5[XuSh`d'GUCqY]PN/:B%FKm7up9g#ClQc7/7kBGqQK@Go0"t,H+[^UM=
%=O!C9%GP.d@UuSoYDjbSo>::`h0Wa]h7I^PKf=c*FCT3qZ>8U_8'\F9in`=?q=_Y<Q5R?If//u:]r&2\o:TZ?Dk$uH-_"DI?>ggd
%>(uW"c2./'JR^ohOEkTQqNpAg5-o6<T,sVpgDAt:ZMi$p\*Q6PB\JKU>0Narg\Ld<X`O2(gc38Bm=E_;U9`H:I,dD:rk.[5b[sQC
%rKF>c\+K7E=)[WuRIEW6o#T!*T@LVVgXhM!0>TeRq<k#5Rh&-[?>XTB(QooTT'gF/$a/fbV:3IFk[s/;bAqICbjOQ$Ek2(lXjc('
%]rg:`(\bCB^@p]O[^'R0HC"M5H?=77fR;hm+'0P4]6sY?nbU^YfuHl0'NZ@upt(5?k@aNq5-DZ)N$f-[?8eB;c<YgDEq&Y9mZ[8:
%qoAh7lD=@Je+ND#c-n$FNDE=\l[),trVXRgdmi0fSo#J8Cck?P`r0Nt.ndus`QCn<Sc&EM->iN"9'Pa&];tRnX#HC0YP8"]bl($j
%?SgQ>FsZacXu.u,1HUM_HD@\Kh.0Fh%ub=.loiI^Zs#,gQPV_r\U/8L`LM!od*00_9Vld%hHZt"oe61igDe=39%t6X_<Ua[O3.$;
%ks=E:rr/Cjc2?/4[?j)`DI2KZ%U72KjQ>af*GaL0]X,4rJDKR>=t8n-Hs9fl4P.64g#oo@`m++af@s)m=!!U0Fs!<iI'T5J?2_A3
%qElF<qpjG8]NB$/K,7=8`O-L0Vq7PI>b;0q?EP8sBYJllrq"f9E)8Y.Su(#pMVEBbp\8!$Y2%mUrUb`Ula%+/pK.%Kg&@15-G+d(
%\g7!aB"!j-CX1K'6/(2pE:CkN4?09%qNs?<mH:qgF.Y=0pgKlpnF53+c2Al,m4TOJ55j+t3cBFa]h3abCqk#^[=q\;hT?IQoBLA@
%?9MWJ37<hZ)IK&q1O%mDETQ-OMj'-.q=VkT`pq$ikJPjHBl`1mg8TGqo[2pNk/uZI<U958on1-7ip4gDQ^b29T0.Jn\oG<(F(TiL
%XInle5M895>i,JVAi4X=68ri2=-p,J]Q]\XhD?jWCqmBMJ,9$8E,B1PmFBI1iSE4SHd97YVq2aR5(+"1qkRT1I(ss?p[nFK_p-p4
%b4b,W#Q:t(i584JlLTejkDL]0=!&6A+1"V:pE)V+e=V+\IS)1Z2kRMg2D78-IW_sjWHMHg5+B:"q"ZW>rpk-PH1:Ymp%n@Tq<j..
%S/:$gYC0P2GM?K1<W2('k7=\HIrG)@U]9u>fc0tiZ_J2K]mKD:@dEgQki/[gG'),VE,f-%%pEVm:#VnIIjifQmeTBLiRQQ>X+JnN
%<mEn1#3H<<$B?1BcNN@rf(#U,r*/.NnBK_]jiumCj2qqQma^:<o(gg1Z^/6^?<+J;O#AJ#fB&JkUL\gYh($*a^%n@$4kN->oW*C>
%f_p-eENSf>I^T(J``k&3DpEB;kGJ'_m[##4^N.Ndg3QRuG[#GkH1pHt;Y_m70<4bJ]_g7Hqte?J@7,BHHg%8/[27/K2mqt0-]dOZ
%4'\j/SXb2/f@H*<TUTlfQRC@n2nT&U,AEs*`j=0mZc;eCB;`;OFQrb=-XhD#T4aXg+CB?:ihYkkhd"(J>f6TR'.O<\hZQ/=37\gP
%[U$IN&,\mBLZrtLqmGn>c?V4U_TnXGb16IAFgGG6XA=dB"kbdpOlQsnr/Ymoo7<l_r<dbs.so,=r<aVO=8RI,VDlo'?dZODCqU--
%c:Yq1Z%mlBo@9Q0#qUGOnuG3o;&iol`1esUe?Xt2SmDZH+Q5827-cm)'KIHud0s3G$JS8PI2u9#9cn!miE$])j`5^5"4Sn`aHIb/
%nXK<81WQ2Q0IE)X]P^Wbn@-O4\f1QFCFACYW*65KJmo%YcnMuW/&,%XPc@uL\sAmN9L-X,"'*,`dAgVBKcj6-6'[+q./R9<#=deP
%HG*Q5E,',$Ze&X$]2e>_939Y=A)+EW&#Q04UTRmG##o=ag=7.d0Mb+=d/E)/=tVX(ofaPWIPZsr="s)!h&*tJeFmSYY_g@DLU:9g
%2)9V*%We4"8sLGe*l4;8J/Y3I,QB7GX^9Rf:kEu,<5",OMUP`l7_:aLD@'5+oX\>=W;<?r6;q"[Y\FXI#@<H1M>@[RGF:/b,E`,+
%CVsh,d_:7.QEO:ma2jghWAu0%G8)B]c%%6MQDu/HBP;;O8EP\]9T-#7aa>4(K92beH_>LOb7#,^4LW_[/l&LAENXVr<^g/4.nn`b
%H#[(T"..#AB<TGtZ'k^hY.4IM2PYEK_e3.F=MpM5Xk,MZ4oaJ-#!0kWm,A_Z#R:c:/<RJ*WdtFU#d&L,#C5..6t5SV#0XsKSAB81
%JIl*3eprGqml1AK+3OF#]PgfYLJaK.1Wq^l'p-[if,?TgUT#7i-%$t*oO"agV-Na=QeD<,8)$7<Ii*N'j)MP3!8ZGR,K#8I?`V`b
%f0Ir\5>)KWd2l?&25TH^g=UPGnnnW<;u36^4np=PLtH@&4fVg8Nd!nRDEW3ChdLRORAp%RcbOWsd@I)pD@nG2dUak(43^)oZ.Ie`
%3Y16\[8!)B1hmhUCX<"m1jXAYLN?Jq`H*sFG>*qRM"\(5SM9G:l.p,5cLg%WUM<FS`2H@h4Z*fQ3<Sc0HY?t-*tB-*(I&g*NMV(j
%j0g_!_,h4M@[k&kXC(.]peiO7<^&p/,pERcqoq^+<\=W2*g6hVD<R7m>rF5fd-!P@p_!+1Pe5\2:gc8LS#oY`euj2XF6GZ04#[I.
%o9b?(5)\JVSG:uoIDE#h,ZP-P]a=`c=jJF@h62P<`Bo6(O)#njI531O8.;6b:Jcd\QU0MmEKj^i79,eAWq<eoQ$2=m?uEcRe79q4
%R`t"ANlZ5lOZ1RQQSVp[gjN'0P@DlI:88]^AYc=m65tg/#`D9J3UE95*_eMleiG2-d,Q^"0!si+U_4urBuafK`XrUO6S_7m)WWTX
%l+Jo;lodQlRM&kF`0&Sfp?7.a/JdWt'm^C2\&Nca]nZ%9Y=,A(eh0kMUL,YN4c?N$1<8r6E;\:+Y8#0Zp:sV<)Wlocg#c#.IK=M8
%1U>OlhJ!O8E>2Fu3c5(6S-1^\,GA=ZOoL\k;7jUL6<&4.ML<@V/kW7'O6Uo(Olg?QqGlW(Fb*tUg>uo2,&2,j2'o2K"f!KTb4hZ-
%GOt36TOMu[rTn-sb_-EDObCaicqqO5`Pf`V7'6Qr[kU-Jea&2oUn2?=.C1Z_:p,J[9K+0`W7%eOI2GZd=RtpL]S:f%\a-D=Q><DR
%iLMnOrg=VCPSZ+*G:9Xk8[;;b'J*--d2rs!+I";G1bLB'_o'71#r5s?)'Td"^LFATR>7Fs*'S%>,7444B;NNhm%O[\Xpc^'&K=&4
%/B-fL'Ko0=0S=K+0R./KKD#'pLHA-&Yi(V^=t`ok`Ln2RFb<+uFa2!/:i<)5Z!g'N.<TmKf"19oC]0/8gN5>CqI(=WY>G%gPf$+m
%oY[m-M5*5mGiD_T4;kProIso^RPourYeB8#l<asA<jR.!#7N4ONZg"MeS6[fj_Z'4;Td6u%MK:VZ<]$jU$P#:<)[,dn2K4d&.6B<
%7*_Hb&_oVr$*&7*:U-U4qXR%LR&W"tbBB\C!X:/O[%N+eiPXl077/".%#9GoNIG1ZNdqPfiS=U](iK%cRG!!V%cMMp$3a$$!"9X<
%CS8Rs"8\9b7j@4C>Pp[D1T=?Ig/P3IFfqFqMdElfDc<d0f_>Gm!![#L*hk\<-rk2_Rb'`*>J[Q>-2XL-]1-uAI9:j#Si`X+;&qUc
%*h]4mRYnA'(b&1X/BHFDWDsuSA#HUThpGS_C8uhP/Mr4M6=!VrWFC.+eF"0+UC&k&[kbq37O+eK?p%8??Z^-%N\ZJ^=F8kX]>lV*
%FOZV7JRI)#qW!?K9<#62)5GU!Lbo+%g1L5V3N>cX>]3lu3^0CfIsI8'([q"(MjiS=TZ]-=PuWGe+2]b,efks?eIdMNqF7#866kL:
%o`AuX%9'NS<j7_+q?Qp`-oUpIBEMd]^"h:^kSsARp9&;@f8mWd/\l]UER`;g*J!OB9>gN;9%<-[@2lu6%u?tVFfk1T<("o=ZUlI#
%m5R:jhde[VY;;bN'b^I`ZK`B%9UEpM!P085X&Emtm?-`'HL>'C_OK:6k4i$=p,C\Bi61b7H1rBZFhEA[gk;m_pg>7en)CPNX\`a0
%<m86,"V>'XrQ`!hhT[?)'3tAR8i-%l3>?r`SsdHHT&X[7FR@u?^]4.;)on)DX8<#u]&r4RQdAX!VjX2j1d(2C$P,aqEZNagFF%G#
%o]iuUiQ6u_A)AKol7V_(H&6[]2H,?A\qs$<e4J?)m3ZYu8-r(ZM9`A;;nt34&eRt!YQ"o7Ubpot,#EF]^=-6g,(#$4&YKUn,Q0]@
%=lAP5Xqg>'JY6agF:&r*5rR="=f?]CfDf1KXbV.lU7GCh9tYmAZdB8\_JhBg0S%<3ANR%(DhP#-oL8q6@H-A#L*q(rR'&+o.VtT7
%B%)tMc[h7fP??Eg4f.J]5s"%QbCF0OJX-=O\gbt6g^$k<m?HqjJ2M:68i'l;UEDX0_QXT>%MUU=>XLCd!_#`FY*nKq@0<,>0!K[^
%'EopR8$.;Q"F;N?'ci[8kp[RK[F9L+,"I45)ZmnXQb/q(Z`o&nrBA`kM&WZ'HN>XGBlasK7*Dc?FkutVn3'Th-eEf1f\ClB=,Z15
%&\WYY<`9727`@%TZk9a[\XBQWW^-_C4Z55Vjg!X<P5ZtsKWJ^]C_L?6<&T.T*;eYV2E*RS?Fefp)R$.:]+c^tAT78UgT?dgfm;3B
%0gZlJ<MV9==nWIi;XkUaBCOhdONP'per%&!kJ8?cN.JA<%#2I_<Sos9d`bM%L9c:&d>Q@BJT^'Vk($'B+teYOH$7=GQ9,f.GJB#g
%)A,fpF,WDU4HDtWmXVM7X2?\RG"9js5OobBV)dIR[r*7d(4KCRl`Qea"Nl/19'IB&44FIpP;7:8MEppITK7%nXt_bLTJ%usIlpVL
%\,+o6Q\ou$PBX%'s&(F'@R^<`132Hk#DgG_+`,p?iJr.>*O$+1iDS]2ipi&]l?=.j.#),(RT:E5W9ZpqJQ3Xb/DbC9C,j((GlqdU
%]^M.W4F)1lnbbsuphs`;Ye?:]TogE3L'"GLgG=//@0@L2H]]*?6g*HJ/e7oH3!<jD;Z^mMT0dN7b=\:__atGqRZfL#9h;Oc\H^`A
%Ssp>s`<6ls0+.BV'"lnU2UE6WXZmVVF(+ho[\<)cSEVj>j2jVi/4)>m+-hP7PB(IoaAe]<6PbEn:$IsVFULR1j3=K&[k%o<huoO0
%1`+'pI=ZH:3#@;K<YW,Ob17PB)J*>>2d+VGM_^#3phs`;l)&8a)^K@bZB/W@mb'S&_fErI4SFsJ%h":$F>!uDXH[?)QB5MWI=]fB
%F(mV#L;2^olWVFFp)kSqqPBn@9,ScTpp\\unkt3Z&)&.o"_e5rYMX]7\ahhF+<8Q+PKs9ef[S7Wp/"q9J?GA^"cL/+cneQ\>)A99
%K7L=OJCk\RYnN/^UqgTL4-2#OA(`<KJjG++4Tn)Wc]46s6,]3%3TRLE%R^a.>76!s^jAp$88$8TbXA@W6_mE1JG-lh-j[32)6a/T
%V@"s[m,5&#^J23(L`D8S/MTuPR.>fR&[&6WJqSm=_"mQ:<-$7O2m+a&h?aiTO_4?@R7>=U%',jGrIM9N?GADm"sPjD\*nO6Af3&D
%nr.J9/2Lj`VQ$f(:!@_C!EtL.3^A;\i40E;G+8h2+[h](2bO0J'5klhZ7ZOi0M+[dQc"^i6UJ*WYS]/N0o<qjokn4?cujIoS:-<9
%>"ni@$(%&apE[Nd">F(B!pLnu!q,^]%9ob@_V,Thl2j7WK.q*h]##-_K3-]T6:W^7d2K+Y^c]fj6\_kI5!WO9*?Ys86XgTp7!Xq)
%c>M?FY=;%'WLB]'RK(.TEGSoj0LZL:9%]Na&Ru4jfFaAiT]\=92`nTG9#J/+a=@PCV)W(A;NNMo.:<rREbNAUk/SMcG9UIXE<*q2
%3Ok'dh)Ou6%f[Q6[D<E[/Mj-'.T'T?c34jk;="OGkeGk(NeM%\7tY5r:,cW*0T#u5FiUio!2HLKC3)M9\X9!Zp-]%k&/`C'eM,1m
%)$#ViG,rmXT]QP']4#fV(':75G^@Lj0S?V`0T+Sd2TI&[1a=:T;fn_a!Cj9nM3G5.:EKRqg7#M)]GkVar.9EVVJ`VtgP'5FN+)oT
%e(0HY^aPY\g)SEI$4@gu]*G_T(r\h/Qm=!_!2HLKC3)M9)5s^NDTieGMM#?74CJX"7M4s'EBJK6R'"u"Q39Vg0YqjO9m6RkMH*H!
%G@#1c&FDN?i!A.+<,LFpCDp&m9jMi1N@*#a!/FDpC4aC4.4lUB'[)\d:Z.f\]-BYp*p^KNBRt1.GLcd\WM/\aI]]Z'1"&pD$A'`,
%\-Zm/L/1pq#+$,NRAutMZg<Zd.@@p3+?'mH#3@Z;5+UOU"RC17'c%1tXdZhThVFCF\'*kGS\b+<EE!=#Dfm@HaB"'"O2<)2V-po=
%N!A8;QTMA?6/ZFuY)$^mZ8^W#A:34L2W/U"A&"2_TsfNNS@&2`X(R5sYVdua5LeteL<Z5BGQ;[^</@XSqc98G6'A0B=6TcIi%fh@
%CV(c:*+8,U#@&iSF[BT^[E)@3&6]>\pfclDKZ2l/Y_=*3WWSAH;T03']#IB2=u*l&euWP?&q]d;isL]uA!\e'_Jm6YrmellD'n;q
%(*4N!6:R@-L$&_D%h@;h.Vr2N!a99*J3,CMPb:B](:a)UI27'@b&p':!NQ7m>NjptKj\%s\qmd.6=b:>0*E1Bc,TNrV^4LfBcp_,
%rCI8p$qD$J$V)6reViADj)cN_r0@f17Jc78""ssp%-6#718@Mg1*3@rA)!\?!&m5U6O0_dcA-tkgmH5FGU*>B4Q%JT#GL*i5W=n^
%&^],248Y%5MN3uFL<b@QY3"@D"G,!``t0iGA<>tN.3"(UZ:R;fO%UP'%4_gjG>'al&--!$fu+CXb:rK\/hKmti:[;nk.t5c+9r"-
%h`3Z7_V4#^)P2ZmJr%>IFk!-/*0XREELCA&_)pES_1Qh8FYsMN=;oJPSoAM=PX\rJ\8UK>glD]AD%[PD='?I@!QmESBP=8JY\:#.
%>Eg]M&Z[E9AYoiY=%%^R1?h-!>u;7#/rS'&2-=G"TKL]_o9Ha2aO8W[*MZ\>b#Wlj;aP%)c#R60.'LHU>Kec0i%@[.Knk?#M8Yqe
%;g>Za9]S/5R41Ccq#XeCbJ8qDJOTq--IChBW5#R0-_Nhs7rU.uVBg#[+CCd)-tn7Q`'[C2&:(Nlc,9oE?i^PKUtfnD6]&Me86_`e
%ogu#A8/r-s:L[V^BGc@u7FnaRFJT.u%TrTrFT\KG2tYZ)O;Q2`Mb*$AW7itshgkEWFLMR6Ubd-u<Yc@?7,k?-Hloe`-&E`qE8V"E
%h'#X+>E7aJ!jFi.-M#MI,Dmhc'1;tf9NDuBedPf?@.-?X+h&LY=F(`O%ktMQ<3YVG0T?T*;GT"8JW+U<*%Z(E\0f"eY"m`COb-+-
%(WDDBZK`j:b'c>nb!6.f!@#>S4o>B`$`=.6jES7KdMlS6#<cEg7r(tn9.0`U-5>SmZ*(uZZZT!R^a@,JPc?cX(DF376b@^]SSJ>U
%3#[]0PcI1c*G-8_&[+^R_%ig,2.!-oQQYa%j=mP#JrJ\Fd=$<oa5Dq=+UB&<39M36N6WAB%O`SD,K^j:,lu3nAqMdVJB5RB,D[Gq
%f+cT^62Eo.cpM40l7U4/`(pK5Qe;A)!/!CdQj'h_E>(UH:c]Fe/n>_[mKue[GTGUkjp]b<8-0or5c=;\:Op7$!!T2":+_AM(Z&*i
%3=l\e+]qtrb"0j=N(.P:Qc(.EQA4tt2B@7bTJS,FOtm6k2/#"=Y,0=O$:RfGiiRR9hQagt#(^s**+TirUkiONcBa$mOG&^Uqf!mN
%:j>t?iWK<(,SVZfmqhclTnbr?fZD-UMDKsHMSKPF"^=0VKo-"!T']Wr1O1DX.g_!L%SAAsJ`B:_$2R`'D[iY(5g2#R$:,ns7Y20'
%6aJ$C\;7hqF)B+:IUR+Or0CdE0+c-CD*H`C+A3!K(L7969,85G`1\;7CbC9H=?:>T,"TTs!C?5bQo:u1VKA<g$4O_DEaT;Rc2leC
%@,g_[XMB_aYS>_U*gjW?'jJ-&OS5oYqFnqj&S?\$7]#lC!m-*a8\uHZ*>jT6-dpG;U_8G_(XBaI.'WJ9b#1\KSq0;XO^->uljE8I
%fYo`t(P`bN=l9;Uc>5s,eku9a1#O6T%6u<Qc)=q\jD(+d=g#d\2_6]1Op&1((H;DIAl7/Wf&L5VrG?!m?,LLk[Q/l%^dk*0+P2]*
%?rAD/7?)j&GJHcSP=F_1_'e.I6\b.o.VIb;(8b%hB[n>:-;Z+A6H_0,PODiY;je)&#:-NC"_!pU"se9:')"GOms"hu`ng&ej;d<Q
%UICs*cgP:mJ#ge1&,2BPZ9"Wd99[7@!+iJ#%`X#ndOB\mkS2O[\rC5(#6:M8BW34<kQX`QGIbhlTnLfZ'H"E@Yn./NL!+0Y$*Xun
%n.)p=KB:7l&?#S$&YV%`(q0OVmh3`Z?ijc"OMPUgDUQcR:sdcYc.FF4kk5[+d7(5D#6QL-"]Q%jG),B\!7nqE;D2FlM+p;Y<Kp3*
%/=fNieW>T;h;V<$<#C?.TWO?6_WmRufj*A(?k>4YAj"FQ1.h,T!_).hjUlfn`h?bo[?(eF<:N4/Nn?6\K*%4s0i<2;L9V:e?+TG-
%#*#*f-tgAK!ob.mR+q3mb.n5Y_D]GB+CTdo'8C$QU%@4JS46=^L]C0W;A]M^RR9%X<F(Z<kaoVdK_`)>Tq^2dY@+:T/=p[^%86sD
%(uhF(\gu8M$5pTGE_.DK"Onr8&inJ\>+u:S"`DDM-EBReid6D@R&pK^fT*lNVT5QITOp2:K.JJ'&1T4P0L-(@<cZQB'=&`!K*7lB
%<.oM;ij,Rm1$@J((D[_gD.Q0Bg5![8e(oIe)M+7&RjX5;cqCH2-u%?GMBLMM&:k-EBGXM'!C8t)Qh!FMIOnp,0a$^2!2*hHe6o58
%JQ6$tSfSNa,`l_CP#df).JX$fU*R(C)9`mF%2hP?50+P;RPbqO*0#Zl"Eo]#&s*NBbFUKc8LT/A'5lkmSg0rMF=81f.5@M9)!;%M
%FZSN!]?&Q@(^8JnB"EpW'sr+95pl:kZI#p'aKf@!O[H"L/ue'&0%13$\uhi`!n+U98LAJ"8p]Xf\$H<C>ImXP%*O:`o8("g7\Bl>
%Khro9MF*Ee8-mKBOU@nT`juIZ!gbB3#Q%+Y(UP(m!lgn/VhoI<eVbk5#mJm7WM!sm/q\6e#h4!bn.+_)8(@dtfp.bZ'1:6"GB#>C
%%<S%X`X?FGNE)E=9p:!=(gfWU/=hL-L-[]:*u:ec1de8c!.rq5,h2LS-l.QPLaj)MTMj"E!$[SZFbqRXC2(LifXf[%oq(E)_Z@M]
%GG:epZJu*E.$tTSXK[k08MFBc+S&F5@7t>9\$OtGd7B`a.Rm9#/:tELGc^@N,a+aDa#481H%^c>#^VJ/TQLZ@+t&LQBk"`u!+@=t
%PkDh76I53aD_fK^%+PMNNVe\3h1&kkF_sigNbq]A31/5M+A$KI\VHa[*i"kEV+HGa-]?JCdDi0E8/O$dEM?maJ`8;OFD/['+:t6X
%7GCU'9p=5e`TukeMn!G1O[R2ifT!1""0EfI0a1)jC(R%u'VaMMTN:X1i?h(PVS!&&5a7=f&0!/SD@a'!Q1B*8NqX[GEt,\".*'s5
%d,.k>Tk0uG!0H>HEa`aLC(]'g,>n/2d?cjjaYQMZ!dRHIAMSegQuk'+$nb3q)NM,g%0=2"20..F%q"1jTsH]ICrrbbhKB.*_h1FU
%"YpWgI]S/ki18mHpk(N8h#W6!O:Oe\#2Q`8I0('V)0^&k^ZYSSN7"D)'^*h?Hu(2$r\j.F'aJJ79;`m\Gb,C-ilE<MXl2^B%UEYg
%NWpPA`Q/=>_&P54ctg&BBYkULnAs`^1X+?fEtGHBLL"I-2dm7!k,SVFGk47Q"&e&:Gmq*7^b%&*I*nHl2qu<X"oo9&aANMR>_.)k
%n4HX4M9b4IkGI8sS:X!17;W("HgFa0H_r0a_DVr]>M5id>bZp?!A9k4C_uO\i=R<aUK]i8[V^O%7?GF'Au$Fs>p?StILMB<=&m'A
%$#,>Q;Zrd9cqX5*q74u-V168M"%78+!^;V,[A*BjB`C?u!RT?9(qW:b[CSY46ChsDY^&quljWN+^uiTOFZ)d9mt*JTDKRaEMar;/
%BK6%3hYNRQKYOlW"?^/B"q;VIG%;:&4ZutN&r7+:E93pOYY%RjaW1dp?C40CA]n(`pDWe6/\^q01F^G"!iUg[Uk432('FL_C(XtB
%]W%T7d"?Bi9K[N3bITas$r@G26dZT!Lc-?,Cko2;_c8)1Y.tl[RgYZu?1W%n\sCrXT]^TZSju@MN/MNaaKa6GD4tr#((Y5,Y.W9$
%YTt*&1?0RSlDEe6p19(U'ML6#=4]8Cs*L&D7\C$-4PnHfitiLiJQtVTE;Lqb(@IL1h'A?MK(<3sDBK,oW*>g_8d&R9>Fp@e*K!r"
%eCGU8O]\s3f>Kg\f9?-L0h[.XF.GUo.9lFPd#,o];T"5rSd\n7*l.Q]kAnpUkNtAFGLUcSI_%sV4/.>cWgm?+H?L*A&4Ctb(T<7n
%s/fD0E>L.Qfi5(-b`J/JA"_Q6>sb#9:ZO]jKj,P,mHq+oKUK.`oV5\YglJr+`Rca1;IeF6`h>T?H84OD-9g!s448Jdc\P&-EI4Qm
%O*3\cSG_]DP.PQU.qAg%1KAZ1;&Hqd"bHlD'';TLJcZZ8&hQH`>(B?k9i#S^H!DB_!A/n]06gR(VjD*Bl+cBO!U0lS2F_HmI;+7F
%8F`j,Oru)_J?e[b4;Pu'1BQt%@6Ta_P;^<8$Y?f,5q9$QEqfe!$LPm\@_tiehD7ZAW"d"%[aYi5-uc#knh;bJqlk<)b*H`C!fom$
%kH-b.ln>Rr*"5\P<AGQq4V*T!ias4.02\);5oM-G@aDJQq?<NESP$i1KYrGi:_CiuC_4MhD1Dt_n(]Sfb18,t:XUu,"EtAp;tg+X
%*FN"JY4u(TA7MiFE;P;IQ9`&cGRHupTn9&6$Aot^O;G?m0$Oj0#DP2U"EoBc#g^lZrM9QOT*]%C;M/b^Wlst`TH+3al8[NP.tSX(
%fD+Dc-">NF!sZd1/XtD0oQ4fOGco;]!j#tS\q7[(JG=n[:*NZqDNht"#dU,f+ZEk9NAbFrYf4#8AKk6B-])5?DUTXo9i'G_VFRDt
%5c&>j:ofAQ^YNY`r"M.&:Zo5<;UA9q(BOo[;//cTo5(:SApDbD6L0?0F],l%@:28'n'3$oSms4OXu!5PTe$H)6W4RAGT;r<)outE
%+(,/(B.=kAor&uR*+ogp#Tu[L6YN`4o!IH[e'r6R6[$NUG)2!+O_=e6Sn'aKnpPN87jsSLZ"8)'[V2_",[K/8L+t70S0Crl7=Y3)
%=_L*a!J-8n*o?<n]1c*,,/eM,K>k<Th`3tFSH5mgbEP^p3ccSONaqQ%IGH^o-bJ0"EWQAiURWk;:^&XOW++&*U^uQ)1WVJr/]U2&
%;hqI<$F5p*b,O>@jMi^P*l/)u>tJ8E[P1-PQaJk@%8&K51!<:c5ktIp&SRF.Lq&n`4^[.&8_rF]o,JW,5`ir&E^1=tD,X_7PBB#n
%pp+8QT\or>4f5)lgL`Cd]4^:#cTT8mLoCQ4[AB`iW2B2&5nTn!9n@7j$'i!?%]$nU\]kK6_C,[e)5+-D;)stAf$K<fZDLTF(l4N@
%'MRHIr;lb()O-ke!MP=p+A558L*5*58W@,VaBnC%M^@\pr'\/!6#:Qq&;%3[UBeYZ<)q,<SR$g$BN.[nE8gJEPfEkK_%Ku1cC([[
%9\iZ%:"nD-/J3Q:[(uqjmiN[3j>Y7)<5slQR)F&RKqc`R-@*qmr-iXFq+22N(MCB)4V(abTp5N$2kp]'GU35Z8Utgk*DM_5O1[<>
%M+K'6//R!o@&ej)m4a@%M]!f+@N\jLp_lIR)&tr,2G#%3+l<Jh/u_:0IojlZqWsd^%%3R%S[bPMY`cDUfS43:TNt^YS5roo%15mD
%ganb"fUBUT75)JU'G.,bd1&$[EPfhq7Z_LY*j@?KTB^I^JWQ!S=Vm=-Y%VQi_6BpbI.%1IAUt*$.KpfWTRa:?6V&Y6X1T5P-0aR5
%4CJeV/jjjo'LSpm:i]F9!sJ2C^cRZl[?qe,eN"^Wj*bVAR?hFAY%n;=b#CYW'U-pu`<27E/-&"h36O*,=FebQX"H&f_(7c;6?SVq
%3%A69QD5^)J64RkiF/\9;643L5QbW@)!m(2*h/.bdgZLaL+HnGP-D$'\@SgSG3)>(DSbskS(%TqPA?No1+\j-B]2Fk/"rh8_LQYk
%N3::42/CDUH6UCNb$4c\"NRT#R5f-Ur[:JL.;*Hc;fh&^>/u:&>L&N$L+CK04u&Yhd^U8*8X;/dcDqVSK5:uFb=:g"Z1*>0#Hrmg
%ZWtNkL%XNS3@9e6TD'(N].Fsb:`%=U?uWfCEQT_)kcR#<U_nu2c&V5L7mIPrj>sjZVF[Y$V@6pQ'9`[kG_LnDBZO9_$77\=/Mj!V
%HdZ5Sa2sfJOMNq?hn'5)$4^edQ=)!:eA-QQ6%a6$:]VeZotbV28W9gcIIKof3c4'<3@[4<,4Hj?MJZeL,7o6Ii.JoIDWf4\OV_85
%Q]dMcNop`aGps/R.C4V,O3?%G]bUghqR=Om[2_\g/6FA9oQ)J+#k&CL*GMDZbdO5SEt'o:?#EJH,_D3'2+gf&2'?ic`^G:I?qo*)
%(ST#OF9H<Fh'b3d>h7L$bs&(Rki@?2a^ZHi2<"WCa']*:Di$Ci9Qmu2c6+!!V$nq[k.j''&?<sZ!h5np^moWY&-`k'S]Gl>@UNl\
%M*=<I]&A]Ap+A>,`2e,-)>HjQFs'P_"$c_+Gn#hBJ\1K";Cu/fDd>W:0l2d)@-j1SFD@I&h'f`Ll<p;'\Ng]h*E(T6#(T"8O+H1d
%LPMDad"$agm4q1d%?hFh%6ERjBDh8A0nO*6D3D7dTQ<Oh8Bmi<$BL9_oTj34F#r_sT`9\HjC1^eJd`Z`EflDF4:["Afef2IaQZn6
%3Cn!pdK\C^QlRLi3=7[*%!OfNTQ^7+'oP@3]f$mNdgXP"^jQt5S\gUV?-^):R&r+7&5=)FH3..OJcqW[d*[d@fJDk;iT)ag7,n.1
%=<`jD1J.%[PgXBHOFle[^#sqaNk5K*8lCGQ;`tP_O<\[rVD9G'4@rkj[XgBbfaNS#fJ7P2;`4kCWQ[jf&hs,P?9pjaPk3ZmMDUDS
%ep4aVZdFutJ0)8(PkXS8(6at@*pmXgYlP*c<0Q_Z6jRCElAjT2[/![ZL=$0WI40[$E*,m,3&-uI)=%-ONC5J:@AQL#IGZDi>K]\r
%MbbZ">A0JKl45qb\Lq0<njDif(abRO$^gl*d'FK\1da-V9$rb@/+A&kSlYAd>IN^&)R=uUTE_SK\iE4e:@Mt?5!+="lt@2dM"D*&
%Wm0;PI:dmU\)ZEckiFa[]=ZbAUlJ0@BhrTK@L.P`;$BCM6aFXOq4o`3Cl^KL4?>uEW;qh;a`9<-!)Yc5`WD7\@7DDo-u@"4_KB[+
%B6c*i)BL5uHh-GkbdJ1J]Rim7UG6EQnt?A#A'X-k31eC7S@&,D2?c6ARr%*+P\HX>%FZ8p3AlAZ`jsV6jPeou`#)4)4UDj6DgGq(
%F*pNr['sp^ohb>UDm85P%+jJrjb+P/';d(7p5E]*"MdEGhF;,EiP5Td'fomGa<Nt\`as!>W9J>B$OiVg`a_A-F#Y52<C4Y\=`N,^
%;SFMq7#+K1JS/3K#,#U"%;/U;"/S:;_"!Ygm\"FVWq0aBQfF')+FOT@"Lp1lL_(h.hIN#U-K;rLRrW9ZUQVF'&]b2KJU4]j*)`el
%SA.9f-.%P!q#Hb:._<JngX)]lg8@jL<5fWER:$W(7u2ig6c3=\d#u:*-D/l<.><PHEZNi#+`A0/Vd/_:0Lp)N5.U9L*J@7X)iOn:
%Cp)LU1pVb[EF8oH@^h:!J2:k0kmlNg5t]QKhSHN%#Vu1^)L_^LiCMf;EXSMd2*?.[V1@-RUC`;8*.`4fkoj":7>FXl04tUOkt<%B
%$&4J61=K1BGG,=gd*BPbO"s(F-VU/P;])GgCn7VRG^G*=+N*jta?j6:D=^kopu%j.`a?#FqgSf=cnXVt[fWKNmtA1f'-N1eS5I-0
%]Tse,_<)&hND-r[dUG";P)=A[.,"52Ih)OW/^l=7DC=.u8oD(JaN-ddQrQ07A'!JT]WOcWNY3FYF:boN/L`hF4P8;AN$FQ2=E@kQ
%cLZ^EjpC'or4eRG/DPe`/^Q^XfYUaY1RM5!?V%uSmXI,j3%bQQO=-!DpirA(T?\*.XI*?i&>)ZE5>V&U%eS[^4-):O-mM5s&H"/-
%O'Fm(s09E=E9XB%:1_BE*oEdOJgrKo;b4K0K'r_[%AC*J[d]+JO03pcr*sL.\D?R9c35#.;NZ4<MLu7\PXTJ[j#Kt#*N#JDGN,_<
%4EH0'L'a[I\JgAh"rX(SGXKSA?W8MNaFPR(Np:X#"C>i:bN(cHfu:c8E*=Yg&eA?ueT#hYfJFV_/O>atC'3MWCffSX*mQ3VE4\j-
%Ji3ejZ(-YZD`eBFWQO.WlZ0qHXnI7kRD^=L<6jE#GpZn4Kcl;E"U(f!*'0ij]2<h=K7PtKi'B3V`,Y<j%?j(uD[%X:A@*A^V)q?W
%9)F$]*g^r%4,!'nTX['<G@La1+<p+0Tln1Sc^=Lq:dT^9&qmttJ0=&N'8U]U&>Z:P"Y`7!k('gogXZXmB:].b@X8rFF:"\:Z*LB<
%3O5eZ2@85%kc(!Bd'gd&.m-#ELh(V(7I+]i/,3X7B(V9Mj')#tTo38)m*K=niIOA\rmLVb&82Eb700na*oNi"-Tq5RO6m9dDTN#6
%DbiA?AU*8!CsE?0cl'_/V!sU(DlFoZ[Oi3!SjC!26n!r/iV/1JE4A:.m`C=R\):,/_[92-g,sLkfBL//5`$'2.7a]!JfqI5"C=YC
%a+P$h>3^@EN5oG[D*I0"F!R='EG]h6!n0oMgoW"F[CLkOgMhN?QEB+c?A'0d%"[?-+%^smpA$8C`<A\TDA+s5#[:%.iM2o0e^\K2
%)d>J%R9hPBRo%eMliu9[3T5]T:UV_H=[Fd62@n1e[OJ/+nOSQ]%d*K+qfam.iE!G_Wa!%c90uHC!k%,A1`inL'[oe!pZ\LGir*tN
%j*J.jf:Eig'bk!?'Z>>_n:ipUT[6B#&SuOJ$YD$]"[cr3a;32#F[uX>FPRQ+Gs*Rr\K^7?`sE`/Cadu!O7$,;CM:lHHd/;[<g[ib
%f3`%UPh]`sD9`A?n@fDld0K;r"(AX^Fi5dnE!9.L_iSSu(+*"0B6"%KA1jI))bl\'aq7(TNX3&R&#R*nb#C%U*m2["OLm4#b)(-o
%fu:k4FeEX=0P^h;LM(XnR4Aq-*.rG(;3&_HKcu(^FKZ!h0)tt<^"]P58\1Jg"F>j5hGAp\g$E_m#[2>sCg*r1FX;3d">,Fk)BBI]
%mG#B1Ie,S_=t@lKU+3Q$Z_/L3])-TYj)=s+$pl?nBfPnb/qV_)WN%])YMuc.5#k(ZGrNrcnN<#,A9eZ^`_gjfBfbuQ*6ppqagsF9
%gSW'(Y7?/Sk[<U7BE,4u?[]`J=G`!MK"$,Df1h?5#Z[m(hTis#SJYh77O$G,.k'0oW@RC,#F?ZR9r?^9Bgj#JV2ZO37IqTaZ>Cf&
%9ijAK.rDkg]^2cRR6"[N(i]0;]re`Ma5D'::,m:)[mlbemM1Ks@5>^tgod(#!c:iC3>&I)KfDY>!Mt;N55r%gee)V6A)uD99&q@l
%>J0nqh:okcmMC3-p&/rIP<eUNCg8(L5X$d"ZI-a=YTk,gZRe$S8<"OjM-TQ)IhhcE/Q/E@l`P*6BOhUYA?WS\@87htY]GcCk%A+C
%.W]9Vj&R0:0a/jboH&E^gPDAY=Z4_,JgOsUSLs;PPF@NfPLlk:S\.^9;U_H&P#UF.+KRB)ZbU4U[g2VtT*R=-IU94i\R`^C>%6[p
%DWqrUs7LHPLeHt)o&8e4'X(2+OHdhTFgC=r-Q!,1s#7R_%]@b58S.Q-B:^q&i3Jh^Nr*%%;).0ZYIfp_&%eusU!MTWZYS.d>2s>b
%@>1nj7Z\`uQM*e!C:=5q*>;82\]1b2oQ#YaTaEi4JuS>F5dct_!`P-GfK1LehW!B2g9Z6\a-eiAX@IHT"OUT`6BPFrOI`PL($X$7
%MA'cKEc%/`&VuEn?R:._h)fe7F5M8'B7H20ifJSMZp=]jgr?)mEf"='87Lbj=/k'oQBkiQ)Xg6JhqQZfRq`,aMU%)$NFpSWE_:;.
%0(0[tEHBc=4]V1?YaME1;!.MB1EnEQjB#H=-Ff(sGjj+=P$R`[(rpp"Z4^'efgJ%JUL91@eGURehY<QKge+<Qe/>SdCrh-HE6ChY
%I3Weha$-`p0mcAF7r-4.NK7d#<Plo*F:u!,9oCbNG9%Q8:i$^t1KRJkP^?.0pBctnX.X>RP["XISb>'G>1jQTP:UGYh243/Whm]!
%N#t;nUr&j!U4WpbKC7Z(,e$B*)bRS3&I22S^H7@Zpg(:VZu&s:L6]hbM'3B_N_^SPCWr1gY?-1Xm<a$T^n1tr4c,*7:V7jc\bWPn
%nTEO./@@iclSJt`:<T>`kJ-ppcDg9p"BFRV]!>tW4q>do%T`c?jJ+0N^bl*8kkVK3VqFJ237iSI?c,:=CjbRLg'UU%4t%RHWE_O,
%Rp2FN\qVa.hYVjY!uD3E@Uf%?M[JZ%&pl=AZJE7fGN>p?H4ar`*_`H9C]n'+6Obl:.p`9TrOk";Z]Tln:S(&[JMYqeb8X<^UCnB6
%*#=7K=Fl_9a(=F*F9NJ2%%(%u]b#.IaGX_h;,S0=c60CL@-LL5Z1b<_NoqTmMKH22"-V::hAIlf@K1Bl'pGU>SO4/97r_3iGU[:b
%_ShK*#AShaFbsQ8OEoZN<"Pbo)^U>].qrO4r>c@i/%^O<g,l(C6l+(r5u)g@4W$sFF?kH#MC+^T?UVe"=u\+6oSO:h*eoC7^I9CE
%E4i+_ZQ^n_kB\\*Y0Y0.VDM_A8.!bD"A0pE4V%$1Zf0Aff1X'\5;jAeF2JqYgYZs=ELC?ta>,oO_WYo'P+5[^/Bq9fr4pYO-TKDO
%EtAA-Ci^FgcU#hIM[6V-YS')";/SS=\IRr>WcSAM"7f.rki]+l>&)lV9\N;h:Ju>X@Z)2rgRe@2$F/\^%Pj_-)+?'?eJ"KS0hW2m
%#3jE3!'E4!%A#cnU?qhDV@\"("IpjEI:$'e1EZcA7&NCYPXBXpIU2Q?F#UW[i5B+-=Ju;'(^N->/;sptWHAUO,\Cl;U20>KcK!c,
%UPt!?P_Vum6n&%j?TaYd*H;*QSUQ"KGmdb*/n8`"WB:i)U?`US:(:hR4Z!W&KhCj>DX^&EFJU>pQ,jKn8G:.4m+c"Q9Js+(.#S\^
%7hGS6ESnp%US1#\E?k.V_`*lKmnSEDo+T%h*a"-7=;[S1del6r&_[rIjkBeR4t'F^GJuHo(s*^#)00m/ng\m:`]@*W,*1hH0gODf
%J=4^g=fPOhE9Eb8-ULe-=G!I4*^A9`B_lE`>6^m=T,?oic%nM5&.%G29o;NuX::tal`(Dk=UF;"8qL$P8,jj/=`^eKcB^%*<63pr
%W]STnP/M;OdZqk1X#cO@7P\,s?jkgrDWJ%$?PM=/'=*^'"$)\_fjPWT%IH)nlB6fuWOa;di_NMKh<.%4CH.%r5Mes!K?[OOhM'/=
%I%:Vr^,adTr);d$Q23@brt>WD;peQY@;&S/%hSWN;HmkHT>[HePC?KGaV)'RC4#ESPC6QQ3Cn7bOu\Z!i2;^/pql=kfn>2HSSpSu
%IsiUHLj9PJ3a8q]*MOPNQ--J<>s#+oEH[/6mOCsO?&\,EfBVd)PK/8U@mU)2CSne_#GUWlIM#TqQ/,.S7Pu,p&e'i_K5/\U*m9`U
%;N9J*\Ol'n[glEY/ZJj2@>cdTh?F6!KCM5SN5l0=]Z.uPffVG8UDb4oT*IoH!HOW?)B^s!1dG0DT7?.\09G,NZ8h"(7Y3^M;GCV[
%n[D1DnU-CGpW(utT7,5$?T<JJ,>I+XDKt"fmp=oB)#M<oHhb57n\;Bkd?J"!p'?*Wel^<8$kdlIoe4gFphMGtT0-$Mk_bsOA1d$i
%oc!p5`Z_CHeV+(d,cN&rK5a7k,)+/q.2Dt]q^B!VJchF4U[mA[+7\%N/"7,OVA'QB<4Tkbdo<7MeEMljc_Ioce+Bt3n%&04rfl.$
%Gm^^4KkST_LQ2RI%'HV)1Ih%R<O986Pi>;3FAC*^V(tcNUWiCsPuKL$)^S1#6[7kA=4Oe56R!*FBB=Y%Gq4iF,D+.iUQ,n93A=3Y
%9%d%[#j6&N"@Mg=c$g<k&Wlin#b2!"EDKq8:/@0#^#WiFa*Ft<YpnD-0\CrFL`,VAo3&8HI7j,l/!knso>F:G5YXU@M5jP`s2^,>
%0cn8q#)tL?4B6QW3(R+me@AK"\I\03T[El3%2??tm:EciH=OO0eJN6_.VoM%<b)lQ,K3%;Un.fqKeeRdpsmXpZ<YTn_G<g#<*G&M
%IfiT$<kKd>%fHqP`/JOPjY[N<AI1Q\NMD8@XZK+J2usGQXm5I%'(3i$s'R[qU^9m>7"Gs!3>\6+CPHIRpfT[c:B%#/7//Tip3gN-
%=4o*:lQo[\`tG5$^)Hm!rhn[E@AbQJJFig0Q5[$=p%?u;nA3;l\F9ISSF(INs!#/#p\dkpOXb)fqB'^frj;Q*ns#\el[DC-g3p.[
%FGaV^+1f4dGdBX%IaYo5^@-NJS!?]ch-VCnm_8F"GBj.mpD[nmCA5F!.RUr+p\rVGr$umh&"iR$aG,r(MNQ7+?j/E7J]\VNcd20n
%7P621(o;[m[=1KMp0Pj`!NI\k37$!5_TeMZ#OULe)(O"5#?rc;&VChuI#4hA)js>M92l2jhT$YTYMr?_B[_)Ie4hQ]\/tDB9>B+f
%V[8m,H[eJ>rB+BF6D@7/Y:**2_S=]&-`6YUQcU'*M+'3oqu;rBM9iL2=u>KI-VsYMH0L93[#OOo4**:l/kPg/MPX"?TG0-H;-`qg
%_@o++(\u<si>\"'IT3/33/`#F=HH%]^)-Un`CpRW`Q0@j.rEG!PDc_3QUDV[;tT<a5C9OUN-r&tk7jg\^X<2`UTMFk=c7#dn!]$c
%BW65>HlXPW'f5B*J;97SB*G<;M_b5Qd:^f(A%#1\3Tb&QA:g93C&9T"6jQX1fm@p-^E1d8:]8hGF#V!cpf%S`8TnH6rPqiQW5)it
%U$mq@EKXY,9Y%/*RAe9>TkmI>eB,>'3.rVY@@C0*lTuJ+C.G51Koh!4W)JNDQ<OUYI4MfX=r_VFCj%*V94I"Ld4egF@=q43_ac1,
%GV<%&TpO_gQq*g:(J8jP]a)nTENaGfJ<]El2U4I"^LJ.Q0mBbp!(scn!`;]VY+[5+rC:N(o>i/fi#fU]=u?3dIJ5=eik&moGm$*o
%:2S6VCfd4g^,oTd@jM7ig8-Js/##N@(K6-k"<<f/THqEJSOh4qCc<W9VSLLpJb8Xr'hf,=GV8)V"fR,CNY"V(GcO>*78N9m%kmn0
%B6Uab&Mj2>]CCq@>fBk-2BlYgJl5%M>>F>F:);d:ERBU6%ohC]Tgd'l&$>cHA,cb%l%`%ijcGb/gb6s5Y1<^"H&Y't<%7$L.I'9q
%.CU1.N>YKZ]Z_eE]p8.A\V%9cPU&;jlGU,&PiV255>NSe'NV?qK-2C`A.MN-2pS[!>1ko1PIj@#Aop:^$<t4@>m*`0ajF*%\#;>n
%\S3>G/0P0t;^H2go\t6KjSHAU:NSW2^JJJc!_R>Ze9`"qm_n7A6?ucfUqs[.;LA1A)JI[hBi\[4.W>EdIWpolAI0CMr\s>%ajk2T
%j2'24!9-ISh*-EW?Kk95*\"Qt`KMF3Q@4mWF=\R!7P$p3!Z&)D`O&Ph]QJZ7)emV[!DpqOFB"P1Din5h._]!Lj5JLOLTuYX7N[Q_
%!2j.sB]n$#B/m7u`!k1shmgIl;%top7e"I50Gm"r"TC8Od<B7$&3#\4(D"`AEh9gqMa#;c5^W9rP^=_!ftu2,rl"BGeiC.-&fEZ+
%#"VhV+VW;#)!8=!67'!r2$b9];i[lm8@P[tmK0CWhJ`1M&*GF/+WY?XrU(R1m\ggdBp'm6?ONQf51`g'r@&)7o"Y@-lPDb\Za/24
%OB"'rr)+h3;5U.IdniZ/;L$e7>8qb,THfmK`QWFBnkRu1]I#]C3dOLp1oQN+aD`UZCV5bh9]7AUdh=3c7P^Md0oI65=&<3'V=]n@
%KhHmo3N"ZUSZ821MS.V+b7bpAc.8E0Kmkr!C!gX)bEO3B,;V]qV(*mrC/Jl9Q0IHRWN=%n/+0Cr<8S*c9i`lY$p1c[[3\@lG^/l-
%")JupoXt`5?cD)%6igkSjN'jlmJ\jq\"1j#Iu+dd<jt?p's#>W(9E'E"@4gUII@Es$/0$]TE`cLpRuY^SUq>s-qh1kB!ScT'sVJ,
%b1!L$MfN^fRQ@KQk$ZupEbNZb*H-\):`3%t,!Gj?62F3^a&9k7KVWRO%3<L]c`5p2`reg^GYk@m;%uYp5<6E&@5*.EQ#,V]Rb$B]
%.Z)'k'M-3`&`sj3.94P(oQZnrBZ@s;4)-%H9E!AM;[Zkt27_DKk\Uhh056YXeDl"CPIWu]d/B\^\'@h^K)toe9FECfZb1R'IeViK
%Im/V`eP"`[3;f\(r4i6?s6st+m=4ogs7)`\ko]rCgOJsIrnmbP]6h]V'Lb>[s))WJg_@'=X%?&g=NdV!;=@>S/1NhL<&k6TL/PXo
%VV]a'W[8!-Bj(d-WUX:ECUUIL+S#'FS>p4Gl;h,.'W@Ll\&_X4Mp_,meodNOcTr2^jeZeQG$Td_n2>+VbNM`;b09oI<f\m_Cm)*H
%8e3.Fl34aKX2Y2iX(bFL4gFC/)5PIY=]>*hXe%B7=-Rqmmi1ACCGWf$,";B=T^cKBWemJ/Q8<($PgeGW):(%n2^p0D0mWYrd5gH-
%4P)DHf;]XPnWgVg5T?Z&Q7ZPlr[%:Kp!5[I<XOU:4US#r,;))<ZiO;D(.deoH5lG=F7jQ$DY\KGPDI/bd#p"0B^K<G,Y)598hU]g
%"Uh9$\D)Qd;O7@1T/>,_<rJW8aV"[+bNIu^b"&5snf%`nPYWL%BQ$'dH-A=2dggHE_,NkiYXOZL[Wb3)U3*%7O.maOPA1UU`;upE
%)Op\-:AP34Bj1bs08$I:`P#mhqqbK+YLj?.r-c5#)k&fj";]7#"-JH&U.ESO&t#DuXSZLR'i[>@p(tL<]iFJ@Tq(P%$:SKdXnAJm
%^T2SJ@8254WBDRmc>rHeG6.q_c!N\/:B=FmD'THgP3N1+Bm*8mCng>Q#XpeNnH)lB9%J]q`J(40e-1j,W%@LkpV,/ZE@!sdKCu1=
%ZrZ1tF+qf[/h=PokZE9KU4bR]SOVc;S+a2JOII:k"65!FVb-1H+m1-4e%G8AYp3L_6b0cY=p6bmTNPoUdSN_CoIDubLV9XV1JK9\
%.3G,*B;gR..c5fI9SZcb'/Uq^)Tk2c0gNYh[Yrf>1fIhW$W@Ga_6j?5eCOp_ThS.<_8Fq_39!IG"3P*eo1]DhctS;Zs2$L,;ARZF
%k<Lb3F:`Aj_dZcC:0'-(=d>@3>QeSTLkQD)]hE;D,o\*G5n!1M.oFaO_F$TMTYGqA]^G+6MH2h&5s8PM4bC8Uq36a]R0>HdU+KAX
%.(AHkim2u6QOF.bLhh!%9%iU`U"W_-BPuRfj/=@@#3_^9"V&"'EBV6<-[/H)'0&Dc3&P7'<Ur3:DL$"hJXW531_\"De7pi?Og%V0
%HB:dbF8HC1)aA<WUS9=?12i*odOB`neH%l<s-;FQpOF73n8j]iq9J2LW*DfW:+0dj/3BVS)B'NT,X@ruS"FqY,Fl2E`RL8AQ*ElT
%-2_Y$^kqXSC@E&9i+onFeHVSP;a.cB2pW"cm,E821"T(`^n!Z-nYRLe?WBms+^7Vg.]];C3Z')q8$Y#^-)8?RU0>1dU=ZL(JU`T"
%8(QJF:%55N1MP)(`,V.Y?72+]G#be,2a\>&SDUt1e`laXCbhMo\E%62QElHVjEGr_H4<I,*:2*5EU$uk%+-LX3Ldn;DkriRQ_acE
%6+'l3"Oagr]h`dd\eZi&]/cLjcHg^(I316GYNi\0U@g_8@C2:ee_gb)(#"i?KWA"l3A<)eVIPnk+dmnna@fa,CK6H<3a7J"5<HEC
%QO7VH,R[_hVUdq[3S!=]Uh.c&K/JV@%)6^`+]!j&hsW52oOf3EA="=7rVM5,q^S9N!i./GV8/7/O,niq+H&V&@Iad!V\T&gO:eb'
%iROl%3L!Q8F#U%d<B4Y(kt1HG-`8+fV)A/"N3@XXf81d(i?VpDlpE02!Zi:6qXnY+OffVtG;$]0B2@0`dILZ2NGfa&cbA[SJ4Bq!
%Yli=`S4oVcL56,5b,-"T.(8daDL[8IQMTa292_m$(X!_o87$?SIbsR4^T$2lb"_dYYs2b@K/%*5#b'2=?=1nXK^XKeedM^LasMRq
%C#1DEPM'#?CpC/gEAE_eX;,BF:`l.e>)%%+\hYh[Zt,!uYBcl[][]Xg6of)lX%Gp>eS;321_NGP"g_U5gd=:fUS"4(+QXa!RN)k-
%GD;P-Y/&Jh#g]MOp0rATHC:K%J4f;bSU^BV2>_r^UH.O7EKY&a+t#LXX$1=M0.<7fZpF7gP7[%uZS(o]<=2o?3DFOh5h!-&-lpI?
%='ajPqWqfd;7(/iG[TJAXS0mhZjmW!Y''3g*Omd.hKiruEX?TgKc&3!UM4Uo3ls/ZKmEn=*nnMlbtY"FNsIrkprA$e9PHZ$DJ^RK
%q:0^lBgIs4Ra^tg=@@b_#rN<u#<dH\6E)[>9"iN*VL$gj?Xj(b>IU_m=,Y[7Z$;FkT%b88.$S:19*T'3:_'ET[sbkJEsaO\3q`eS
%PAHO*Y#]l?&IS9'I8A4Y_#d\:GQYLc?B[3!fagTtEN@0mJ9#NnH'_'KH0YtQF1GYTNS?^s/T/=LrEPuTMiX\WYsLN,FsXR7,@O6S
%_P5AheS(FJ)sab/?bPKu(q!`Thj[=mB".-<"1>(pq*Y-O)'!nYEtEB:m.t.;EK@ICY8KE,9Gi$8+\<efVjgbHR<SG5YM:2H)CbG>
%=jq.3/d]D@VQI,drO?=6*)I`R=@Nfh+9d&$`F_haCXP71h,o\I]74;o8sI+Dm28Ri)UsdJOe=%NY1*d7];>4o3e@>5T6]-B"WNn8
%k1N^D_;5d5[\NMT\rk6rn^-]"qWIO,!"A`Tg8Q*T<!!srGbDA6UJZQ)&Q@BFmYZeo^9s#3U[UML[H@H8FiR&I2FW*ah4]"71\)/l
%jc(JhODV77`XV_W3:4&[1lJ\l2"FNOBPa$EiWjP"X=-LP'`MKhV"mh&]J4X5W$mP4OoBX=[8S'!efN^HO5q[c6O2<A`d6(5YMX?U
%FlrN,&[m&q[&.u$$At,M9)Xae,Y,N(SCS6L[aciH/_TleBoHR'X:efLq+;B/g*Nqd[jomA_,BY3([>"jG#eB2,o_1u#>@3C-(=nA
%3bp*`:qG=C76=J[/f_jD??*2L6$mT;b.=\Q2CYK2?b;<`D>K-5(b7dgjjB[.eml&#Ia>]HY\#mInd?jm5U.2YdMYlBlk*PWn*Bhc
%K2n]5dB%c[Wr*oF4)SnrH_d@lZ!s4M[`I?B&!sLn<QWrYBnB*-&US1'$i&Z)d/dLL;_+.QOnVji.BoVr2E"VsierIV)+hhmB6t?2
%\28C6h_.46J!]9gbc1-[kjXmY8DnA5Um5?QOD\t2N2e=M'AL@qa[')f-\TgU7GC'(S^4`8+iWUa]719n&T5E#/@q`Z>kWVeNfA1:
%!hDtWF!mU2G;gd;+4)U"Mk&o8['&[%Wti0ENF/u8PRoOG-El-@AcoG3NI4;fXPmX0hIoq,Qrokc)^f(M>CHlCeG5Bsg@@td.,E+b
%VGNo>@5Y$`d-lkb:CujNgM!'k$<13&g.r/]]Ej'HD]]IE4>bZRG('=38HnIc1R;aXFeRo1GGmjD1C&Cb_($U>`#^N+NON5q%a,*5
%g@>NQ')m9^0%k&-Js*TW<B;a"b@9_aot4jc>##NeB)1O[(RQN&8i!p1[G'D0c80htXK-5N9XJUdhEn1dd(-f\0!g$@ZUNQ`=0;7*
%M$:SRHgC[n,HfeArk#Ubd\oB?5AATt3E_6I?Wkmr^8jMiQF/B1F%)K@3IIcMdhQaCh^o<mDC,3.2Qo+AOUe1F]PDTX;@71c/i:FK
%D67.<?l85Ma/HW%oMr&iTG87%gh3nK[oJQnT.OZ]$k$kT9CM5b+0fSGq]hOC6H7g<\ZU;kD6.Udjfp7'jCo8jC!3^EXrhV8AJ+FR
%PLW[QCd4;Q[GYI;bu*_#TfeK*/WLhS@OG636Ciqg9j=JU2K^klXPQ]VI+<L'Wd?0f<Or7Yr#t*>J"^*biD_1CHA"h3;DdrfToKKC
%!r&2]3dH&"ZAWi5O'WO7F2AsScPTJY/`/rgRe2$+D',c6PPCT`5pR8)^^(iWD#`Z-p=ZfQLeGg5H_%;.#NB4bca;I5\H^+.EO!F2
%m,Ckk6OaVL83MI$*"_pF2ZAP",fqB#G"gFe";rd4.%6GjX,eAF33>;i$43cF-5i0!Z1C"hh;U&W]D.qLAH*]mQ<hrS6,m`kc#.E:
%ifMDW0(<f1SRYnL58asQ6H9!4?i>]83Y%DA?`1A^A6Q-#Ri[%p4H8b[KkYZL>0n+q81r-&4aWlV9%@Y_;DS2BTbB_]ls'mE>)JQt
%Z+U-P>)kH!r+JC7=jX)CMn<O/\\;+ap!&1JE^>fK>L8M4s4X(cYonTuLV3f3-.f_01Qo]Z,lh`2'eFGZ9N1m@%@=u+49Bb5P]3jm
%'buBmkrbV4NYbJj1d;4Hon77mLst*faa@c(]pU_+(%O*-nfnp?X$1Ie:u:l`B:\P[CUVM1/=>MZjJ5<Mbt<kf,]]]%]gHB*fdfN?
%D2n&X32R,fmm8S42=1b^,R`^ClMcoSJnnZR'3g_Ua0eII;$0fYT5E*ul6`7d#%B^8<Ch#J]kaEl0-3&9@iQf3g!]%-LerKY+I^AT
%]Yc#'SEhm'^WnN*j\bAJXq.1]:KDh[_q41T2c-BX/lZtQUZ5Xj2i-k>2'Z#?gSIT_o2H(EF<DAF!\o%HHhTGISC8&D2L4Kl4s-ei
%_+dbdbBd21lr&[kU"/19Z.k.m;of?g[V1lTJT(McCgaoe.E@*=c>&N8j^D't1tQ`&!a0FEg-?'K+\bE:cnl%^l[CY5LkM,3'ggcB
%I:,DTa`"gV==&oG6.-=+X_<jK7/^-6mPKo8[M5AeI^Ptf\*eU`WdBW4'JEtDDQ?'#+n<k9W[3n)QEn=tcD`<^[o1QOhIS/+a`6g9
%'HV-M^7"WtkhKalPI>ecW3>&r&eh[GBsmfea$;59Yu.X#G3Z-@,C.+d_[k,&IA)W55@"nqTbV6,S\PY;To2md`bY\;`,Y'UXoo>Y
%g^6-g%nPQ6an5kC+9qnb(@2%HIn_+]FK>a85tR6PhbiF`$GBEAJL2B=J`[6:OQ6h74Urh<3K'"+/Lbk=%[iN0,9?_S;a"jDTAtcL
%%#76.U[=8od9!qIjj1>M<)n_0hXB[`'2#%E/#,;[:u>DuT:]:4Zg#hg]dLn<:8L@M'3Y$Whcjm2EpB-<j['Rlfn&56+'Y$VpW+Lb
%2GK'hR:@>3S6)W4KUf4J<&9/N6&[iElE+eAVi7^4T0+=CHlq=P3(0%o#ThI03iP<p2'/4P=hFZl\4%j8#ph@H_U"IeFe/aOFS'8D
%36iV^Asc8[F7l'/M_/f]GqGl[0hn#C<aGH)7"RJ1>csIXEGIXFpXK@ETVX%s^(L,I;69+6MH+[F&s_#%p(IV+4It/L/HdnCGn5s5
%I+0)]`fLuM/h/S2Auh7'bs_I.hWY&HS(3Yh)X9nPro?a=EhCriOW"qP+7B`YE%U0cD.qJ7)T;a"/lEsXZ>:-=3c)urK[U>fR%i"F
%`;cnbdKmkP/:=&*pYHDJEnJ+Z^EJ`?&lL7VOl'MnnIIiQiS-ej8g$<:Y*ZCtkj7uhX$:f%]A/NgcjBb&Md=:.>)[tA/4!9&AS42)
%RLl/oP%gCDFZ>.raaGksgHHggT`eOcH6\FUX%]F2QE6@,K1$#9?.h:.hK'p0P3&][6Y=+[U3!G*l6q3CLas64X%YHjRH^_XBfL))
%0o67A%n<Ua<n.sl7PX(11g5YGk_43X;V#Erc&r".nbm0]Dl$ZcSQ,7]65nb=nC<lFpE<CrrlMbnpp`BX2Y1QrHq0dP[qL/1/t?:J
%nLZ]]:RCi?E&2rs`:l4_fAEOFpUBT0"a,tensFU#`M4'N-$bQnAua]CTE9*-Ojl51\1'[6iFX@$Q+\0h6fBUECQIfFjXh0$<P7Q<
%N+V87&T$V%#]ssX`M[<JfB]Bh;rfUtCnj]QEKFluq^7PT4r@R"2@^&!QnC">.n0k'K^<HuVNFf8HocrY5-OI:efahm*EfNlAV+Ce
%aOdO"HGd#(O$%9scgDUt;4R7$?H[iGgBAL,s5J3[YPm\*c%7d1YLtH`n32!Z.r?&/qZYl^=&`r,deLqR"U`E6;iUE[ZhW78r>XQC
%?BKBYa2..P]NgR[:!X&G,]PuJ7n^^0\0gF$7KS[!Z0rp?CaE[!:N@FBO0/>?%noLb#YHP]S?<_"#]NPXI+NOu%M9L/0doJJ-=sk\
%M7ha-?PqeG?05I6mMi":,m>6O(#^\8.qRV*/PC#1MkLNr0k>![mN2n1-:C#%3S#_,REul=%$#;qUJHdjpr_?8g$@@!>3uciTmj&&
%&:saHP<\<$cQ:X:i>&+44q[\8H3p/g`7*lbq@j8n8)GMe\>'5<FCoV&%DMSM,J-0rJ7<KuV%>H-#Fn8p[DbRT3(/TtZ3h_s)p2DQ
%o2%sPoD%2W,paD%@W6SqLknL(^h%aXWZ9.Fi:d19P`9/eW6?1,9Ml`Y$"S7_lF^CDm%D3<ZUdq$EYWpdF$%]PPRMhnf&Z,XXFb&4
%rh33o:?Ec>F6<o5p,mO4kFhEe4i+8NTD$RbS)u6Y>[0iV'XFgP5!,s:mnc<q@i$s(E^BiSMXVqSP"L_i'WRuYS,<3_`/Hd3:Q.,,
%(c=\D=WBX)ar8C!V!&Uji*n.lVuqi7&^=uGj#JT([(#V8"RU-.Xpa]aP8@1rYI=d9NK-"Ng?q5UocmNG4DCh)h]auU_j/\KZlb?^
%'n@c?^-JNOX:dW)ElN]e@>F-4(5!WHM"W)E'U!U0?&V$k`N;ud/<*,3R#-YnP7c]u4BFrH,3bc7.4Zdf!C0T7[[7R"O+PO:0M!cB
%_,,GJh4+p6[!CFV.0p;L6c/:Y(\kdSTQ^h(NG*sCKH@PG-S8hnpdaPA9n,kH4R5XE:V'F*60mKhJVr2i3M)n\kHX`oog\[al<SE!
%"`l=R,mp<'Ko;f4RT"S`codJtY,b$P>Ouf&S6/SJ*Aam#%;HDpIN8hJo7V)Znhh^#dk_b<%d&nnKR%2ekVjAs)4)DWe#%>">a?Re
%^o^,p;:[o4\f=<aXOAPp_XZ9@c^XRU4o%YqS*q]?C';:'$qu\FCXd5E!]#u?Sk%&Va[;\O*m&lj4*3^F_b3f(CkD++f7e]uA":.j
%MmmpmR/eB>G!f9lifeRZ3ukH:3uh^jk^LC((SCRTgZ+&l#TL0+]nNEU\T0*LW(CJdJh!LN3G22f[6*>1bBLI(Za#?E:M3:M:@kn'
%ZpZb9n^3k]-_Z>s3Xd7p%])nA'f>4b?L`(uIFB$6b-9*J2f21TBl!n*8`?:=4b%O8LgC>rpo/:c`WY]iG]jlb7jBt-hYf.SK7>-A
%Fbl3O'=\[hY1b?Re!G4p3BgSN6G-uM3Z_7P`i;rLobC\&Ke4u!/a-?qk;el0b+sZ;1G:Oo[Y(eQO5u)5EUST&q"aQJs7>Z.h_0IE
%/(SO5-1^2b%(1ErdC(unFGek*792EW9kq@F7_1pGC=rfDMYLr)kDD!??;/MI3+GN<69]EuOGVJl;dMZ-mZhrt,E%Ls7,91*Q5GDN
%moHruB&3*r`T\85[;=MIP+]?C,r<_:_phJOCBPlX[("q5CGp6oBHlt?$COChG7LpTE?n^B*S$[[>Ep"uDf&G.4Wq(g4f)S@]W%'R
%e?25@;RV$'W2eDI']gu>(XBqrQ')[@/Kk$t5tcJ5lY%PqKA+SC1*PJM6;+9d8KA$"CnRb"g`kGVTD7\V*)qNR/n&/<7:j;A-l^:9
%(!U\4q/D3T-^NY80e79@F%Rd?FYibdhhd<R?Pics3.Hp%a]r4I,k!\J):+bcr7S,'8L`gPE&XMk1'>Z$ZoH+*iU9SQ+k^QRpF&[<
%dAY=;*>fZ,[l#o/ki8+Rr45BM*+a9e,UMnEacq5cMGf,[`$FRh=K3s3>DlM:-ndb#T>rCG=Og`FAR>cOrZ(plDm-/?N]!XH9^a9\
%g/^,J76gEA_;\_!P]*e,%r:?b:?Usc\,gZ]]CiiHQ<n??\j=4>;T*,i`bD0g5l'oF3d[d:&AI,!f,7Eo?^+"85pS%&K`?r`/6]q/
%oaSMFW;:.bC9*T,%,)1C+q/)i&mJuWBUlop0qChh@!i^H%&:1LU1KR\'5j2K9u.5R8;Z*%AbLiU%_Idhp/!$m?q^qh(I0Ma'Jn+c
%8'Nc--0"jZ*=rbJPVo8:$g6%fSQq9n]'8Agb1A>)AMo9SM8!Worb0eAB0t"3")?7``Oo#Y^E=-&b2R*;:(Z-r%&kd$NOf?LFg4b`
%MJZmj2j%j[.^fq5:/8dW]\ADI&"jgDBP\a#4b:Q1)#%'bK!LDA$m_Bu7l,7_ja4TH9J_V<h<Bnn-!I$P/*='_(P^l%BI8/7WEqPk
%(Nq%oH@iMi@YQTQ>+btIW@nt/GS\3'TgNIs/F"cf4#Pl$SDq2'4.OOu)O+o;e[Phe=ZMX-[-:&f7S]'uBtrB@KQO:+\97"qgnYA,
%PPGLfl-p0<JfWZ//B$j,kOjB993CW@o"k\/Re-?9X+;o=/B7rrMTIAZ$r&Oe"q#HOn&iPDf7L)r5e4!q?eBt^,ugQF@U7St&C_3X
%!-0*jMQuK)%K3ZB6HXi;IssmL/bn*g5bUNNgdpYT.7d[:r1h.?NQiSimF@r/>e6pq<QST\(@aN9-8RK`Xt+W&WbH#6Q!UuWL!;L\
%kq<J"f\W[OSuY`[!&T=V)"PWjRK0p;)3#>9OZ)Y9B3Zj7%R4p^*c_[0:rnkK7nC7Jf)19)EbpSjo@qQN97jg8W$F(\?9iihdEVuB
%[XuL)?K#.#dblogRoFXple\;*(9_\Z]!0EB8EEP/9oA/7\S/LAO&f;TNF$3piiKR9/PQ^0Fd"EDQJD,MP12`LIM\6>HnY,2dkgjS
%dY28BO7!55PEG`8B$@eVfQ9%gE&,<pBUeEad.?JA.Fp%0I_i?,ro18$EF\OXkC`o!+m>>j4p&lRrgaSk8qP7;"NKF?ct/\`(iG_L
%+1=)VFV#V&Xh"BXdqlPjZUr08`P@fa8OL+t`1Sd-NonR#\>W<$Y?-8[5pdp2%bRNZ.0E?\)L/$.cL/m1XKhVD)qPYQEo=?n<gDII
%GRdj'".dT01]%22'aLF4ikgE",=nXU+p1rmIh:=W5A>o%j,S65F"_Xt<u!iH^Vf9`aUhs7K+O\E7d#I,jhCIH&`<^:NZ3RBnA^!I
%?<X(83Lg5G:<&l]G>XE"AhZ=0SC'aG`8uo`Q/GT9rlWHWkbW<C397<EL,Rkg:b=5k=ekL(+nbnXE..sGkqLI:#Qc#eJa;/,5@Q)[
%rGIKOnL=mqQ4N%Ch(D:u)1JBL4';-[cuAK^4U_ZcVft4jS6]uj=UJ^=dCVktdQ9[92!?W\Q-5qsj7%0;[%WF0IOt5b\QGYES)h9B
%kZjB\/NPSr-4Vi)/"9Kg6bS;VWJF2(Yo5tAe8"I!6)A=%h2^(lLCn4AdX=:n:TE/R3s-MEjr,LTWi_iC6l-WU_b.NbVs-#Iludr(
%`;/&i?ZdHAT/=J>XD7_53m!*bL-gtBng&QBBmSBO5a73lT4:rBCq_\K]3+u+MhkqB-jK+Me$!9`"X@[;2YP@rKE.%#&P,&46^X+2
%kNd+2B27P3pL3c9Ncd-pkd75R*5LOm:n_F_\T]N\Y8<<O8IVqB8`aIfM9k/2%sZoSTQ_\\eon/+,=7fX=EZnSEur_IOhC_^$eqoo
%/;\.dm'F;L!%5$qa],9HE9a3eNgZs:)Q%TP$pTi"*@FYCp8\+'Bus4/1J)N3"-F60;q$uuGcit>A9QQO("_Y,Z(^p==$?SYf:,&l
%IYj/4AP%-tl(8urB1&3o9R`h$hJ]A*_<5*/5t'*c1D`WH$VZMc";]\^95uXZN":''p$k@%F-[55jQPC.'\lHZQIkWB5Ppj%OL)UB
%gjPIP9."7ON;RLE7(i2fd43NGac5bqUFJ@"1fHM6NI'g+oWgG,RTDF^$b5I9Ee8@^iijjTE=&A3&,qJ?S(3I4A>Ief:T1+W%^:dK
%rqbjk<@t>AJFA29J+nZFEYR7)h[JW5$_R)H:bs.h#;O-DhrX^318g8@+I?eCAMoDVZc,KTh.u-#^mZ0*P?CM"AUuOhhDe1hb"3#6
%hqN'apqLh_s1i:a(O?T-V,!QGULR\)*^rq&e'?2$82l-bMR+rZ[??g?P-FMC(Iso?D/Q(6AIQb?lMe`CdBsK"9pccskK7Ze:ir54
%j(">6!EhEOh;NlqZ/H281C/de8!W<#Z^68[3>$GdA-cf$6;jaq2K85R@4DiL?*G&B0cOS@SQ_G\@>8C#$VeKbS<Bl:mD6;<;.LqO
%>@"S6&u6*EB?j"Z?IDVF]hLBG+oEAMPPjhVa5"Tta*B;#eHB5J&;XiWESc3%:S/r<rJAG[H_rY,mjSG7lac\78KHcGfc\?Eg,AjK
%lpF$.M`Y,t%kTpk$cd(,"@:p68E\VfKT/ME:`l1jY;eR@2S5t;h]c7H'8+T/S"GYBobg72Q./(PeC<9s5^jXfHO@J)q-@GY/u&Se
%o.aa+&lja\EZ>\e;(P7K[m?r-QLB3B,J41P-:PH`lY2j&G!2hEG"S6J(H(B:7WYWp%WtF@Mm@ODZ2gk[I=o^.W0:WNG1C4:.efGW
%(-%YRW2"OU<qLZu#W_+oF(0MB1Do4f%1/\JlmGD!6VoS8eMOi'Hf&$<O.p\u,(W7h\S55BG*Cp!?TNB)MU16u[*>&OD2QHkL%[Z3
%X&fPtn_^h+P=BunIUi%W^$M%?Kl*pUm1';g/'"Qa5q!AEmTXnj5ukTSBV,gZ(1g(=)OB;t!VN*8Kn@`ERd:ugm<,UA\8/Q*AeR8X
%.?918SGEM5\1#'_];#TqR0lsueJnrD**Tr('GMr7V.8jn2J]RNNJ;qjNZM"CXiql,"NO]($r2:B%eOT!Y+72FKgi_O@k>$p*m,2Y
%a2/@LEm)j.#nKE[9l5@-mS>n-ou@%Xat5%,`\_05BQi8)7[l6/BCN7\G62mYc!Qm0I_^07SqDGd3_SoC9fZ;aI>fY<`ZRfOJheCq
%&KGoukM+YVXa2?/9h>6Tnt'gW9=D"[fn'\0L%$aRqQ"HC\^7edSYbHHjr.AJak#+%8".o?H&]Sd?#(bYkaNAiHT$jCg3h=R:YPL)
%H@s/kY$"st?K>uL60aO907g*6=,TbKV]a,;4U<W7K>kAt%A"$R2PkJbe$sC6*Lj!:/g$82ciP,e'T5lh7Y6Jp&VoFUbnBpn7oc2!
%r-t+)P_XGF)g*.UR"Df>DN2Ie*35Bo>L<+<_P=VtnoWtR)80m%g'gb;HsgH>2E<mgW92HN5B!l8kVr@Hdn[ZF(.Cc@7>OH9bCM/4
%]B85XL+1<Ni#]h`'Lf\-XiE:<7EqJM$fRba\K=m8d(r1IAo&EC/]:)c`A20pj$!5-_'sn?pKZ9qgFSiLpCBs0oSIRRf([B]ELLHo
%h%P!q1BeIDPgt'O1Ag6h,T@[UZ^R6*)Tc8G+7ppToqY<3in>l!ZBY(:)B<mmk`KYrRMZuX1VA!_nc$t,q[]]n0#ojWaM<?G:lm-h
%8`s6'B<%g`,S=_SBLUis"SqS^6:"hcVhkdZa'LHP@$6JB*!&&0>i+e0d]#BVAh%eoUskkrg#B#Q\^,W=4BKXL)\4G2(:JVB1+tK8
%X7lka@:QY+*mV4u4N]-tBS23rD<BRRJLf)`Rj,>DfU+Y@Kpb^iBV9@=pVat66N2\M.<D34hP5OWDT%rGH&qf:4WJd.25s^f+PKG>
%LW\bh`_20\/,:]9BtO%^g4tjCJ-O%dTVdZj[I`?nFPa9ur?W[f3T[%lkDIst1E=IWW`sO-D:[<'?p$La7oEufFW\8odU=c+$VC$M
%;j1]=D#-N=.r/*W5uTiU5mOD,nYt]tYO*p_e\aRAQMB!54iYf*Ku:^p[Qpl""n?n(<nJ[7iO08PV`^`q4KFMs;D@`KI_m`[PjQS^
%;%Ti"72h\9fLt&dL.j>I#T\,R-?Z`EO*h,*B[6V9_)W/N757_snl[3'P/KHrmTd$QEP,"WL.&srnT>0$`$Qt+/ZkAp'OU>cr:MsD
%3M(jkGG:#l0i72ZD%nB,<sbd`@Hbd:^>qE(m+q9?8qNU)_NB3>>V5`,'(e5:bS5`N<lr81Cl":H&sHeF8o^(TVlk'kZdOj-),WtW
%g<'k<4MCE39TNClZdaFM/%)M3;T^%m2@[SYSGg9>*RQVLRn('<Z9X)EnY5>]9&iKI4_`DITCe%V`?"L5R!A8XC*k"3Th799Bc9O6
%\qT4%*"?C\ZC\LVldPH?+?#L/ro/%8F<jrWkW15=N$GoN-'EG7TjbnU^c97UJ#J?D&bpMUT0?=IZY%eHYs-(qEFmF?B9E,*1MWIS
%:iE<uhVS&@q3tEGke:1g,6qk\hK(Ul/>tg"-$F()B8uafrUtl/YO^Zo)S:Y1HPit"!\=#D+T$/0ln56!PTgBko"FLOiN,QuL+1I]
%8AdS=,Ru?Rb\k#"mmHqN:0go:6_:o?F`H+8$Lc?Ol,U0C)J`f=KV-A_4gYjq8Q&Ts+59f**?M0X]5=#P?+b9jDGDcM8g2cr&ST.c
%A]6i4UuOK;V,Z0_Eg>UT:j/B:<kXMu.P;QHI^)f:\oSJ'gS2'qMpPSM]'[Ku-__6WF*1R&;I)!;am\!"CW\3qDW><RA0!l1eNIda
%6r2=*5i&g!4VB^;g9RD&;s?2Ba@&sY@mLn&#ib-%;[h#lNHnOGmG*-%Cg9>0`ef@)j.YkTBsn_(m.;a4X5Ir0N/!bNPI&AE\MW.-
%o&hVaJ24@Y@jCR=+o\gkXE1BY;*nb'_pIJ3K#4!5k^_FV=pu?Lb,RQV<S+iqQk$I;ef#oWReAI>.QhE?#B3<nLBd51e<A#KCZ[aV
%6LVBGO,r7ieO7#FrlEg(RR^@i7uBVa:!P-Me#32&Gk$imGi-4Hl'^4J@)MX9G[g"s8SD\(D9^@o-nSm$#s1X"l&-hSb[`+6'oRI/
%T]TIsf(+(>](+OiYfV?='Y-N\PFWpa?SB=^)Wg5SL0SdC&bD-%F?aJWZ'fBN-'ot9cTtNlF1p^N\aj"gj.oF]]Det4J,[6oZ`YZk
%6m?V*p\Vot29>T%a[$3bG/i@d6k-Gbe8@o];JFh_1<9-9s1_nOBrLo/o@BG`g.L/;>MB$"X@S0#\G'`4(rYTpCJEul]ZD;"`LdA(
%l2KB_8-dGoM6FT\@QrMtflC,<VJ,]\o)7F0o&_U>G-KJ>7-8rr"!)ago9K[8^&psY`X-0QQMV\'W&D8'.gAUi]62hMg^h"X"2M$Z
%D?!"W]rbR06Fq9aYU3tBi)&/(H'd3HC*]q<N"[,?Q7#.\3[9u<CIar#D'tf@oPNDBd:GBo#VOlR7M_'r%(?Q9D!$/2#Q"a($n+#=
%O`,4\T-G>pn4Z.3R\m.ta`e'.FVd&.QtB+b.X6o5E)ClgW?JemFhcVg";:U*B*0XG?Ba_shPl73eI[g+<!nC)7r9sab#DJW>U4*<
%T\%me=6jHu>N]B2eW/pkSqZ&r4_ngZbc*e[gr<YN3n6S'U'*WEq<2g8R->8S;tC-gn1V:=aTskMa$9moP:o1`:sa&h^mIngm=WgG
%S.&9.[IK>aWRT5+SLVaU7C:L)mj6q4<^m`;ASKgPnuPd)Ykq8D=oJcn>Oh]AI1>"n!SRRY;*KE]eQl/qCZeR5++ZrshAJ`t:o$Er
%a;)dVR"LO)%g=F;)/<"=2)HKN]uU,7L@CID`r1LR$RF>GY-oPJEK##TIo\A;1H&*,<K]Y<i!2_bEk_gN1=3Tf$BAGEI9O!U9#!?#
%&7Nm&d;Mf2L;\u-0461R8[-'UL4;KW\,Op>WK^Y1G_ji(q_,@eb9%KL7jI$n8;>Y7MUX.F6L%kV-lS4*%aXBFh+mXAiU8Qi^IefU
%ggQNm.$aQ]_ma(h5"8F;_j7/r5oPl,gnX4Rqaf;WDPYFVgu>n&7cYlK4CEG4\Ybsa,!)!UotL(L5$0L@ed;XuZLEbW<`(k`MDF\5
%&c$P0^4%=PR2UkS;lRi.K6`JtLFS$A4kib'"Y'jpDn5C8b8#12;KrDP,8;o?N$pQ:47-WI<B'h]6k1b=+J$kVY'BA367HWCIE=e6
%E2'k'@TAKt=EX)f_32+Mr\Z^o+fO-f8l=op]h\-\37tlQh4]S$ZBaW23S:&88p=CLpA(MX*ZOaX?1s.$A5+=EgCE&PfUuNh5Skok
%ranGU%"XqC!0kANL>Qa)rBr'hJNS^6FXXt$B&ML5/G9\W'On]EZ]srukLcAdL>RSgS3Jtg`9'"lg9g,#6sujW&h$<-i<ici=_<\P
%3$#r>CMBOFV,FS7:1mAC0RK+J'V"4n_[/#g#N%Q;<]nS4bal+aP!F7bB8]#JZL_:F-VMF#14+D>M]s7sr(6(a]oeEH>@DA9]8&E<
%d1;8&UGF.Inlt!E@+VW*f9m:EeH&al[I=tE.+#U#/S6,G'a?=^mdi^tQWeMFiRk:tQq1ol`M1W;(nJ<DZ9?TD]eZLOqUg6]g5I#`
%-CTN-+#._B]^W=I^P,2ELF7sX,'9J/<abi=1p*mg,ZH)hohlB1,o2a-<Y6d9f.N6$a!PIN46j!&eEum.^)Bh4=\p`Dd(,BiNY%(N
%*&$4LX3H#+dPIp-iBWe.goDE.+Np+E3CUs1>CXac2440jG)(_Hi&_f;b9,2#?\C3$i?qZ-LJ1:tH;U#Rd(ZaF\@:fKMlX7W2![pi
%PA1SE`2Rl\f@MUnN-MuaP&sf$gOE+FQ'Wq@-u@%.fd`SVIf6Pb^k$)XHma\l\fot,p>P`^J,Bi<H`:``/\F6pZ%J^LQtgT85hW.>
%SQtG@$lq-a`@[I\5n@c#F;FO1FlD;$WZL^b5Uk7Yh4qHXmj9loeHH/Y_p4Fdj+Sk8GhoWV85C*dP`:IuA2u%_l;Q:Y8,AU7)$S47
%EotrDm"IO<+eqYiiNh@83kL&dS?kMB*BhF`_gt&?FibqCJ^mKfQC>bAl(dsj\+Wr!k#H7(L#['IL6u526Z:0rNW,_tI[(B$[ttQ3
%&DZ""@]XoUK:mquS/c27XA>B0C#r(.j5U8A*ZT5e[Pp[DYtIo5iq9jIgoBK-Q7:8e")/O4fi'sa1km)bjmQOB0Sj>D1W>/bR,jL^
%LPlD;G9mGY;IZ+#5+EU\f>eU[_BfH[3m]c`(jj0p`p]L\EgYkC3+9&b<*qO]Cjm8%Gs0B6A"7&>ND1o7.riV%<9+<KNue0jUH`qI
%SI$Gh!CsP:YE]\G`,L\a)C`Ob']ZLR?Jr3DW]SNMo3NuG\#6U32:Vdg=Tpg"$q&s/8Np2.eq[7Sr4j2ZXqn'-D:.fBMT)6),O)0"
%id/\@`+Kn;$GKpRFi:QXk(RaP]E.Pmmr5>RgoQCW3M)Xj$b7ri&o-,n)pp[Ln=^F%Ag_o"6e47oG7It[S-O5+2N-laak8D^kXJh[
%<eC.J@bKR)fgj9-H8Z,b84$qXSK0?K(nUf3q`d2nfC(OEA*_%e4F?Ji^MX;"VsW2+Z]G\uHu7Dq6`[UTn`?g6aZYerP#a!M++')D
%e=LelXVH/EhX8a7pF&FYb!UT$s+H`dq^9$CF8T![K7EK"If&:=s7nm.UV+E%h3G_?Y0AbPI$;(VnPd@8^A-][co1Zr%kcc3_3_A,
%I#SM/frkuGd$X^[V%:EIhtY=XRpLR</NI\6;p#(NRK`qH.@cH+V.oFY0>CkL\oe@Z^-^9+lb;uV#Jr,q^A7ci'0!.c'p-"`_2[PT
%KRb7Bg*h'LQji*b%.IL;nS(^]*-.^`7rZ`*\@tHFfK;lelWI4BdaJ]:rT8jk5J5lCH'9KhpkRT;U,8`$MP%CGmU"ubNE<hWm/!mJ
%Xn%8"$Xnr(MFb%#]bTCTQkALY\DjSe?BhOEEnXjP9g^1tJZ.2)")P:0bA__!I/g90aM4]9D]mb3cun1d#4KTYr6Ysnn*T5>$h$8f
%5OR4&rZO=Yb,$G&VRm>L"*^N+(8Q+TbG2d.m^nFT6<d[*S(D51r?_$>lWJGYXb6&Wh4hB6?1!+<dJFEb^"i"lgF)@.4o<_n6jG$g
%;p<8l\c[/OOpfY)-W&6iSWE`528Iu&AYN1>%t/j2h>6:Eg^SRVf[]>t+2.-8leQI1h*,42mFd9oRdR`8hFYaY@U_LO;5FP;["E0r
%3bd"g8UnP78lb/Q(/XQ",b9<Re0"aJ>/1gs@lN6)_+mlfpPZs5UJTM^m4XtFQ(aB(Yj,)^!/L/`?Ges@<hZ@)<g^[D'OF%g<-<T6
%./:VuLPPAH\"MYA`_c?_$a9=5RFrgVQh7IcXJ,1+#m\`+WCTjN9X[JD2[WN(XVde:#cNPi)X),U4&'sks(M]FqM6"*(o!n!#(J_n
%,XGmIaK:iK<;2Pm,/VV='p0rlH(Jo..]Ga"V67>NhD-cdBaQ(/#W*+O'dS5.5t-+&9mkZ;h`L,;<t:Z#Z_FH"pkXl5L6&b3G_VKe
%47#rj&/%>PW/2sSP\gQ1#k[Fh;fgA`gQr5H<#rI3d<4D%e)u.k5PEF,aP3eXjc(0X7YBOhUM[E'9^'D-FUi8sF(]YiarCoQ.TT.7
%.(H]2Q%"1:kgXU>k+YCT&QIh;".BfG_\eKVoSF3JK-M'#E3n1aVaJaG-0IP+\0Ag!K91Hp<>K1X1=Mm1iq.KJ7"ZGs"[`g8R`&1N
%<)lQ``:bGH>_;Q]iMF8+Pt:'Fg3r8>;N7>C-QAPab>EOM1-aUi]Kq&/VUl=*?$EeD(^9lnIYYs4-T)EQPnm6,YmW[T;V[!H?c)mk
%CLnP3*dR/mbJW:*$&;GJL&hd:]?0UeB=&4?KtU2;WoQq$)W5=1^]=D4U7+?F+2./J^G&p`__$S?ZK^](1/%/X#F)T_iM>7M]7?&$
%-nsi<7k%&K/8kUiA/oAGUcEJ3-#rT`.N_H8m2*4]pFDT:ORt!U8.bj(c!f9n-CS?OB9-t/h[gGY6$ueha?(X2gKNb&lKfcWX*dG[
%LQXMbhC=q[V@9A/H%\!])@hPRh8KA8qDa+)e72YucD<#dg8?V#L%[[SJU[M.Oj:#7YGt/uXF$'tM+K[K]Od]c'XLd#p!r3uD8\2Y
%o>,`PffXr\Bcmi]!d"+H%<ZGTd(Z_3'h_R>Q^]%rXT!Wb`?D^coWCT[4erg3r\dth1Qa]iq"`W)Wfe?C'CYX?=Kea,$#b"+If95A
%:](qjo2M7@LR/B^`gl?L#U^V[.DF8)0[tG8*@2LZGuZ<W))Ba:<RfVFPhtBdU^8=QBP::m_hsti&o:)d-McmZ>XkldaH?`6_Vka_
%AlH*Fk"t*?T0BnOkquZjVS2Ki?Xbt[4jP3Blhj'ILSt+F/bs<<1r;bX/!hXk<9)D(8++!X:hh=(W/i3BELFLad,A6Z_bN`*^al"S
%UP'9@Rd.V"*VK-\3pI7+,sOMgcq-7g/gRIOeHLN'PE8=-*3q&bm>]I]2b.%?dX!BO&8H""NN4%JDaN6D3'>;Dc4"5d$eBX3r!7ko
%3'&fZA-QgujB+7<!-A8RI%ZFY66<@0![bJ>g?*,^?"fH@A43u/=;5qcHAHp>nul@E83CP'7a"6q6$O8N=$/D#W,d8ESHDl1K=-u=
%0^,IADKDpb3Q9F2I%a]X`$tH4*a.AVa,q\4]AR2X"SrsK3S#2X'[.^c$B5/\'`GF/jDcTI5:SLh-iqtOISP7[Yb'H!1FYKse)GZ?
%1d(;!1$O$!,G&ZZ"Wr>$2%EUGCl*(6[+QK8L_$k&e&!5.h`8KYL?s64efqj//_\]`5WLt4U!s^Dp>UP))?W,TOq;DVCD<E-"?n0^
%iB#_"S/&qcPp8J9e9q-q1OhtCX8"`>O?^,KPO<_`/8(hOEV9sO>^.SZ)NAL'N<1EhU'!]^!jm"iUlq`g"(pbSC8O<XJ)<QQ?l#PH
%FQ*EYiDpJh1Yl8?7`H%V@Nm?Hqfae!K&IJO47bc#.o=JHmM4(H>CT5/YMn2KhXr>i8F\-?qfdgr;K1[[jNO0,l/V(rIB-W6#df2r
%]CW%V\ne;nD>O+b#3F@;b??e$=E(mLC\E=*]l\2NIjkCY>EYGX]&LnJB[istXA/Fb/MSA(r)iBZ[]@ZQV)2=S,>T:t7[hS]I$J<[
%\W*AYb/LXF2e3!m2.qoKI]^P74t$Ea7H3ARl/$)dC=>_'_=(co@6T?se(Y]k2<EX"e^e8n-IpX'3+RQ"CNf*rHIAmuhK+j!E1X?\
%9uF'd1.N,fA9@mKC1TLp5g9BI:",qr\gm*1(3P?\#X=$SC0dgr=a)6[L._<T`WMdHL-XIM*$o<a3&Q(-$Klb+SH4l;A&nf!arC('
%a746#aK!D=S2p^]!b:#Jm04e>fh8q6RJe(2M.qTZ1u_M<qngq>13Re(1tIjkIJ&Vq0J/@LO&YL^Qi!]JQPKobY;S@"49CMCmW4-T
%MJS6CU\2UYr%:f;]Vl_KnjK-YDbprCMC6P;DW66uHWO@4Ni20:WXUD&qe<(+b_BpQEXEl5QE0R8f@V`HEKLQ@]4_inr;^Bq%4C3[
%XN2'OD'>i[[S<\<MhOp`Rqe?%XnAbu?[p5+i1Qpp@7=R2,!/<.6NnL^KlAqOjgi^9M<N47'\J>h?rM1PV>5^@hh;nIiPpdRMa6]L
%km^Fq;]_)deNYfP\nNK'T81Her_nl(TK;(=C>2Dm!'MtQYr:47+Xc&cPo3SjMW;m&YBc<[\BlSFO0nZk)!(aL%7m<*@HN*/f)deJ
%6?LEdOFi78=0,f:$(7X[[<m^.AYMt9Okb3=mZ7><1ZiR/ZK`+'r=06]Datbsi8-WUe5DCl=>E>ta^[/eNQO`7S(L-B=D[ftW'Y4F
%33G8fXQV>!G05o,_KHnm@=e,^^IP8M6BN]pG,l,kN>SN_4HB&])6^$X8*qEK7]n7bp^)as\B\8gN5NW1e?*irs5ZR13.A9GStQbf
%CHeJri?bL$jQQ7bC=n*W[ZE4qj%dHp<T1+rhg0Hl1$!`mW5TgraYX?j3cta-(TnTJ?1bS:opG9V;=h3``'+76]Z+&Tn=cVLN/6)p
%d?FhN#-"UZ+s6C^ZC?L)R.CbfF9U.=r1]k%d3i7mjQS-t(XEdRPV1O1AM?f-h+h1WR'S;<YAL\j;muKjWTQE,p0'P$(;EgZ?9%e1
%L_4!gCca5(WN)@+R/-n8ThuA1=p:pO;V`RHQS0-$mZhs#r!UF526uD2CDA:l,F=88a)qMjl(V":%jA#k$;<iEMdfN*U5lZ7n[o5/
%@i.[<8%[r4nqCS%Bl!A:K7;="pth!Gm?5>/T!])!-0r4(9n<B)4V*?k)^m2XqQ^PH9DS3Vl*+nNfnD<@5*fcf.\NGIn&.@6l!9T\
%M[BpA!'mW-L,+e13X(qX*U's)";(jk;"0#D1:oFV<N%6pJqR'S4JQ2ONu=/r&fUc&m/d?P29AToib-U/_Rt8N^$cT);D+=)-D86R
%C%`;.F1,`tMP3!9d,(Vd[4lje$!X68+,.,Pe6%h%q\Q7EQ'90"4=u<7ji[=9SEK,4d$%7Pr4\8d?<-5qlKaHTdAKWa"oZl)>B_1*
%V^q!P<B(%@O0q/S9E)'4pIn,6JXk2bmt&ea_oi2D?0-3;"Ke`-BmH*HC9BePQYX]H&KO`,<S-3Cn0RP;V9\U$SYkRf$_aCriK<jB
%lKD_Dl7$Tpmd%\"+a#M.pJol#75&Y(*6gt3:#>dZd.,8t!@&YdZ`<%3'$c1T!>($?Z=J488jOb^U6&,TOQ8!5Q9lCg@>[)dgZ%\)
%W";t'/mRCZObSD1\:snH,uU#i\sZ:aY\6mTjm>GJ*-qVq_"R@CDcWW2Q#jR##l"hI$dH4.B.qb^`;G)qDRW!N(HpiBbR:=P7=B*U
%Y)nmTY#>W[34#TtZKa,@8ZRVWAlM7'`X`he2%0V\2>$AB=`dL#j?m`cA22F?^VAEr?ODn2=n,+XbAUtQFcADVXMJBaPe;-2X)Oin
%V_(DD=SlNI9bZgpjfJpn5OBrRW91!!=1#fH'd_T3Xt/kiZHd8#eARbf/_;PBXLZ8W<1)?,`B$mJ&P1\ZiMW;=N4G=;INE9BBURp@
%8Gfp+V7[ZO@dSfaMljeA&O.K>K^Q6DD^d-s7]pP?L1M6.;:28sVE$<]osi)i%9geiWXq451M:&SUe?*mnkZj\[>dOfegshM_XJ6"
%BRk-8?7=0L3tBrc`DS$j&6(tAPkDn&+(Y&H'[.VDf@6pAn-F'R1)U@"hP/2u!P5(>4Z9K=QgQ]/!jFrK?sM+t=`:C^;Zk2?_V=hu
%nR$&mZ;Cg;`QHRS8$b!Ph*/Ma@%<&uo!H$gn&1(X]+5]\Q&.5;=j^&*Ff3P.^p&/d*@L,qSn4ThC(O=NQ8CIn"Z]EbJa=#%\BsZ`
%2s&a\Im!GZX,d[Pn8#\kJSu^Qh]gZfUEW#?<B<jeZoe>fXr']5c0nr"]t]IgA`"DSPI7:]nFm#"N_8b7aE&7V`?jCrp@=NVE8k@9
%*\0\[D:M#Y:[^$6[)6\KbRsTH-!bGV!_NmTX/6rg!Ya]M**(r.A-rBK8^6dIKj'_\\d=2"n&2ZFC,Q)iX_t`R7BTea]Ul)_K?L.t
%cb,`L29nA-C*-XXZ$1XgINkI1qZA15ARYC/_F&\8eZL[W`WjdQH/N(,!g*PW_r-&F6KR0d@p$`M3>*N<PK,o:(tjB9--'BR*^Y0Y
%<K,_0(<`QpBf(&M<#!O##Ech=?McC*!9VG(UW[8<,lSY6Is0"Q&0qe8EpC15'P]Y&PBSG3(F#?%W%@"$5qn#hJm=(*j`$&d6bc>6
%Un+OoMa@DQEO'KMOl4Zbm!D0Q..Oe7Ps1\^#,jPmJpZTpU4h3I55[a9Fl,8#?rPLE$C)`-?c/LUW8..XHMlV=H8Wn^^qI/4@j?KJ
%7,fmM1;.`mZfuGE4-5n/Va_Cg0.gt%/Xc.m/k,K!,XZtEIFo9%+:7*,:F/@LaD#NWDbq[HX"5d0efg/TjYJZp32jZ*db,U5OfZ-X
%h5:MlqY_'R81VZ&Z%cK*QE'XXipML%I+-e[*V'=fN>;7[1n2&3^%_j$?HlC<>tg4!7Y+[!MZV%6YQ&5+GqGB%ciK[2Gsu^O'a8GO
%9.$"[ReJ'ENc9#[RVX2d4VToh>*1q`K\Pru]=rcoZ2Y)W[A9^tZjVG*NDrs";3f4-LbHfaD3fRi%W,PMQtf5pQ$sO#9uUR@dO"1u
%liBG8Si/^N=+r)!:;+4387Di#/Y%SrF^rq.B8&FF_qO8]Fs]-8!jW1ggs3ZDZ<Y@F8]jF0O+l/WMT"S!0!Mi,>"0pa#UK-U7irrc
%AjZ#=f87hp]fqsZ.qn&'_,aKfkpM8_U'm1(-RfAd`O0E)GmT]tDrr]`L*,T=4k!1V#GHM+s!2qQ($hVkJCu3;G+nA`RXF0_X8Ij]
%\C>OZ<TG2>F,'GP*c6d\gc_h99QgBI!PNo/a$AN"[6No!qoD&3Gl*U.k^&^'e?=;p\G^EngZE:;kZL\c<0QZr-iF(76^^1%E=bp<
%rARhCALI*#]:,USEL;Aq.[/ht@l<i=AWh;!8-lC3GXtV-`KMJnZuK@GnD\M=`Nk`r$b_"rD+(>XQbJeBI*S3[>I%^QKl2B'?rthf
%:hdjWWt^1W(;FE>cgH(q8quUCZ=+''Fi9-mXq^CkpER=1Mk:27ZB(!@G%HjL[4DBmeLVr]o-ilY__^s[\-"r49ic;2`2SP5=t['o
%BM,br^nRt.Gem:Z2`sTLYLO)%&Z+M+.OmPIqIb]MRCu=KDcrKZQF)(gLgO88cIKVS0?4'A.\F][nR)=Na++*XNH>rnE`;h+Rk?H(
%k[F)?!2ILtr]gG]^OGsMs5Rg'J!naE>J@[rqcDZg/I(Xnp3FN1)m)R-1cN>TXi7buGP_#/fR9m?W)%DM4HNe"'6S[K\])%,_L<RT
%I3=7C)Kq%Bs4ZL[?gHlq>hh6$(MoL+4^QVrbN#QhNf'\)*W"&pQO*>>!]bf684(:V:p)+)Q1sKNO21.&8*'O&rGFl=+5\g"G=G<.
%H+SKh:mS]ka9-Otbld7_^3eZ7\E@`#'t2?X-=3'CLTI<JkMT>C'][rfWo>_%P64=Lh(gmuaLI:G>#8e4(\&T2=Mq8a2AaDSOr%0G
%8V5#\NrKa\P8*D_V/$ocmu6D-K#dA3p$X:@#QV0',*6&?Wl(m_K,-Mm'3._,$WJAO#aD;fDXr`-25"6FZ!)fuh#qm?mE?Y^=W^Oo
%M<`YgO3RKKSMG@g@$TBRPC'MjPWO>f<E7[`fi[Am(?D@.>o&jl`#<6F>:!7MV^\YN.Y4FT"+F;9l[k/!G>=.q&S,&8B"n^G7G%s,
%MOuuHLmN]7jp:blbHlc`PSgi2NtrhYF-q9YTqWl)2<SFY/3WFg,uS0FO-E;$%r!Q>0hY3VF14hd1YC+Ncra(Iop8e\UQY5i[imRg
%_c(WNH.jhPMC32h@-.PhUsr4";KI'9!arE/"t#1J[+.IDc)#[.Bg]U,hE;Sq*.>"B)<Q$@k8h84LfWWIbKbD_Jr8V>Z;+l2>phh$
%BS)+;>EHi/:o4I$20nO[M+QZP!EDF.-AR]0SpmIc2GL(-MUS;4SY5*ZVQ)2-Cj0_k<h]e?(55B"@2c(:$PE17(R!DoO$G.6Y6"gp
%II@jV-"rY:$V2h$5Vj^5'0=q3L1#a\l`J&#e7sXV)&TS.\iN`A29"9%(-],_.WKRP/Fpi^@\Cch[Dr>?hfY/ZFJ3psW1_H#f_;Nc
%*4=A'LP"b'2.R7E"mU8ZmG[cU#lL-Bs2/taeG;*mA`V[jhHS^m6$AtnM+*t+G!lmI.&Oe_j;PXLG>3"k.HuXVfF92;;!I6jOgmn1
%(R7h>g<,Rac0_78Rd)/RLl4C7$Hq_O\Z@Y\I;s<'/2@9[n5[phVVun\+]06h^dGBnS6_,N%NtpL-+X@FFSXLF;J,tF>i8K2/>62e
%fT(h*WV8Q/34Df5opZ3;E+"9tnYBo'M)jm.>bu8837M]"1TtO`<-"'@VU?D1V=m%?P0]"s.p-npr9JD2U>;+[13m')5cDg//l[p!
%6%VWME-+E^"&KR)dao);5aMPl@FcC`gX/"r,DMoPPY=@nRSm,fdA],YCFcP;ieIMrrK>-/E>sa#CVjNY:c^,Pe$KYO":V;FitY4K
%R]h#%oleJrdFfVI'00XI53O@"CZW3OJ2iIL[dS`8T3;UgHglBm?3t:38Ku5"nq^'Q;r76Y2Z\bt`IX1a[[2bmJ*`iS/h6njME<<9
%3m-!u`%44V>%eZja[T8qV,@L?e`KCQ.^$lF'%eYH;YENpGPa+"NKlBi+A-?*TX'/WF9QTQ$+#R"QY_X)Jf5BJ-Pp7RDMFQi2q*,#
%_r\Q9e..E"gY%BJ,q8(9Kolh?P*5REXt!Kj<-1(oa%^L^AW=02fuqN>JAl+:1J6Rl6[<)"^S/r[c6ETmS[$3ooP!(9lW(2J`!#M*
%XDU]Zq*-_2PFf>2p*0WH9B1CGBjaH5]_RsRW4(q@?9Ks,Bh`>M!brt.a&-/X>"/aco=AnaWkrgbis7qF&)JK"VKJ0ON>.$Onft2D
%h<0GCU(H*RjPp,P0eiuIXVS+A.`!Sp&a_Ol&'OuHiU'`eQ"24`n$/4)^.nEV8$F+#1r,<0HMaOL_Ik.7cVG:W1A3#Wk/;!*A"9c\
%L?D%`7>?MQS.=%^k!%:d,Iu[H+H&d+V&P5W4Vp!%;6A'YIQ%cb.5<.#[5^?qU!M<$9==UYdF:,<*;q.\f"_05s3j44\*`I*h+1d>
%8PQ6aWe_aqKdG:uY-W+)W(a/(PqLc2;9I?G7h/+#rh7TY<*IGh+>k^'+#+<t0ltgG_d793!Uge*U5*TJ5\,`pdBF:2Fr*>hS\OP-
%s0g_R@c8"5^kcT#D;D=pG!eL(#>TBtU#]G/WqKngBHi)D6.FAq@eLk^SKJ0Um;^OVpV.Zoqo<mh1oP2UFF,Z?&Pk3Rm2rloDJsTW
%`bXHr/jA]W[eW7Ci:T)2IlM$'3I;RlJ;_QoB='8\658u(S68=a!O8,%#!DX635$B/r4,EoMd13'rU*)APdKVN48,Q#`p$R-b^qq9
%_i&I*.fs[6VUYA'#,IfPQ4^XZ["4(nR<jo\-CLo9-'B&f5i</e6`!;PVK=rKf"pabCt9j%@;K5mWT/rEJXsJ4WMSp4feCXdLXd<r
%JQU86BT'e0SHi!k.OJne/0("c8NC\.Fc2Hro[hlDU'5AbST7)KqN*9ZfK7]je=DseD(u+NP0b/OE:\Y7K>@;al_&H;\n>l-D[iNU
%8peuODGe5o%_D)#$W)8Wgl*J22:AY?:s5"7W0bq+#^"FQ@KKi\G=5R^RkM-;$7)H%rOR3<'qZq[;[mVc*YJNSd4[%h4rGb/4US!I
%-+(/F^spWkkZc<rXk.2JqqNjY1_8.GY/s&3`47>T]tq-c<EU#N.,1@c]nrqZf7]llpsE36Fc6?#ko'oeA0q>pYlWTpYXN3XU&qrp
%=_AcFUd9I=+Y>=6Q*nQ?*`3+J>0'&eq/hT<:$<AX=8O!\_tFA4FJ1aISRu>5mR8,JoA7?k.:0K+.O$mHcC$rt/i4m\CZC`]ZM([#
%'#U>p)(XUU[u"jp\/_c%(?N*_:*l_u].sfLFcesj1b%Cu3VqqM:&`Km?^2c.h+Lu_k*qaLb@qb*mqhS*eRB3VkF>]mr0$<7EGl?!
%+-/\?CVdgu&>V?"bm5_*oX*'@1e]^nc'q#k+CX3t)WsuuZ?R2S,fn$C".s)V5J,OpA>)b(([I-P>/cD)E]t\X9#6(p@Mje5BHUoj
%L38KsJX2fI:cMDLKm^#(?,DSI(H3&60:E<iY]dC>9KP4IW"gofhJZYYN&jYGe5[UErCI6BG!J/8Sp\##93K]`Q6D@'eUM]*:K>^>
%Kmn"&:nICS#"h1CWU.siGW$*oei*klVA@n?G:9c@Dse\/A+FqepT#6Zs6ta^r;]Hleo?`ddTa=p@e:?._!Okad/D+2&)/3"6G*/9
%'Cgi@6a3FYZb.\Fk*S4\[QAdAW\iV=,oY*@R:>Y27Qj;O9SWnBR9!MafY`8t]On!1\Hu*tiKXEY2aZJJLAT@<?3]O8!Zju'f*J>I
%#V!,$a\C9i9ujV3HI_'f$K#Y7;3f"XM56p[O<tmm85\"Hg4N@(qH%t]`qHNC?>-BH&Iq/Ab:Yc`r49aR-IB?NG7clWW->"oRqWg@
%J'9aA5\W]Um2\53icOoSR_LkaZ@=g+[u]tpkW>Q6<4bDW;)b<.\;+rTo8)\6n"(;ep-QrMrGq\n3Jtepj#UG._\Rs9/q2U6#D5Bd
%0H7[d+bEZgT(`em'l36sgcuO@j$Dl)J/5MGmsZM'SJ$(tI[:MWIsC@?DI-eMaPC`hEDsmIm76Rf]hP#p"5Rnpi=WaenbSBK*M0^u
%f.<Tfmoambcbb$_/A.4;,5f%3;EpD"=+4$_*eDYJlK<l.rgni<X\)O<,6eesV&X4%8k/jUJ7bf\0gk*#lQ@#m/Rs\)HJNRD5tXPf
%VfAk<_!OIA[+kQ./nG!^m_$>q)YJK!pT.=GbBruY)c@Qooler@G@.d#p\\P$GkS=c8B!.^2*D.]W'iMLd*)cGh2qk8#W%c^\7"'R
%Zr9la9<BiY<<)CBYaA4.cHZ-*nJ7`n14OsjYYBcR.)*&]FpK_]o0=0g<tU^<*F94e3OD"DPTi,F).Ys)hZeG9U9r62pTs)m5GJ5<
%]?d27JgC-ud,`D$gf+O,m4+LVBZ9AJG4ALGpd4GB`$mM782dKs+$+*Qd0B^$3Bi.':\aF8?9`S(q6u`)][*o#s613Yh`VWqrJ.:l
%kPNBpPDUMD(D,:QeoXUhbtu*e^pDQ,8HXW\2b(BVHmqFZFR9Pt0".5W,LSa*r&:Qp;O_U--Ps5]o=iuJDrg<aRr7^9TF*XHDO'@r
%C=M8-GDKUWB3j/=eTVO3I*hQYrQ3AilcuL.nCENI`K+cA?Bqi7f]oQAWhHaHp]b!,G<pFkGJfjW%'M#h%SZ'3hXt%p&$<9+[2KEM
%]t\c'fD&X4^I)nPGlr!@H&'?Th&a<qqP!A2]R?cm^54`2#KH\c_'I"AL,-r5)O6N!oF(7]m<m97>sfD]&R:__+?nc_h=r<sJdq)?
%(gN'sHi0-.rq><9N((XQr#i5u!8UG"5ka[(Jao%M:Po[.h?73Gs7h-lLPUPh!=^#`r&u%CW_D.i8<OH##k_mu>_B`2B\-BJiA2O[
%WY@cS6H!*&qV$!He;[?hB@i\iGf\jXl<YIGhANZ3RtE5fnK;=$lh_[uHG&I01rKp1kO]Bk"mc@*!=0i$Rt,XVlaAgc053rH*.kW:
%*k>kOS\_0G\j$&I?pL`WXR@(jYml2+T4._t"n2>I<6_2n^R!M&+'sB)np:)rk`0i\eQ8q[/U$gReYq("\8Q_!&pZnV[Gg6\l'm%I
%%2eJ;*sP"&aLiGm]AKcrF*6k-^@hQ:+,-G5*;>(#hTEm9H#1;mpXo(CrmB4V3r(>R+jH7h.)oaK;[Z=9.LRa8j?)VH%Xm"RJdF"J
%Y/!1jr1B7sI=\p+X/H'A*SP6s*01I8M4!<8+qHGB?7o1shpVlo2mE5U85u9f5676/jFu3TCuG9j4)aTj+D!D5[l;qg<)oL-If(57
%0']2NGeNU%7l7sHp']LH^X.;!1\gqQ];qs2A&#ugQ2^RHWc.[tb?\+E)baTeV#9sGQep'[<.2[=mr!k6<p0(Xn5ULu.3^;6;ghYT
%V.cLl[lsMdoY$l5pHO85l>B6Ck7UnL]Na]38ei2R3W<unG%f@n.'J0NR;&E`H2<:p762m9-9KJ+A%E/"TFR:p*TqGKe5_P2e6oKm
%,\^&Ig6/nrSp-n8@97X!F*m;RD7'BglkC9>C2"QaEmBq3[7rjkE,N]_bZ(`<b\7,^Q%5^/OWFR'9Z@E=Z_*Ob+H<Huh@9W[@[E98
%Om0q&jXA9H5*(aM\W;_R1(L[Up83[>aH%T6qQt<oNcN',q66MbP6qt_2-"4d',TSkm5?8LFl"YV'jPX?'PuD;i*-t8hs>5-[T084
%`:uPO;mWVV.dI__IXE?J'Y/-a/3t@sW,E2;U4uEEZp9r._Be!(DkK"&5bpft:b!Rj+W%$u>MNVdc:PVjTG$D&cjoANUhd\?3Zg[X
%gfN;>FM*;1Nl*E0mpb?Sm`W[3>/%eOg`<mtf4euN/EJ(-b]BTQ]HTq()p*]kbp[Uq%"Y!n2B.IucVV)K/1*br%L\j72d9?9JJbdo
%fsEknCYs6t8!Lo.[*:i@eQ"jEU3dHD]aE9NIfs2=]_AO+=n[XlkAUWo-0OS\hs-.;6#[(uMA/caOlp:Y,T:'`c2)aS]`$=!!=Hh:
%(iCLGf"L3SV_$!/T7Fm;dQ*K`JWctl6-(5R3N?D(QfYpRG?Alh#8hY'W?/)8csh"IHR(G)acBFJSZB!KHM.0skCjZ8/'^-#I.s1p
%&/FE#K7NSW7<Ci%Br+*UK6/CNG9`iY(NP=;0Cp4`9Xqf]gggMdr_1h%`O)XV,F5oNQ\>\keJG0l3VU+)1dU:K*(rk04_@VlLATP$
%FId31r>TaWde#e&#bs3rb]5BG&kf.05+66(3*\+/P`?,FWkV`5^qoQqC%:-gA_%VrNg(QnU&sV^Q_>U,C?cp>Y$TV&H`iSeF=]jL
%249WTS6j^Ff]+@rl18*.HC"",?:fr4:W/34;PGMCW$,8ErM8_R'<e%)0MUQuk[(9/_dgCOobf'7!4+R-<!TD_!N?@_kq\F,5apsG
%LQXF+7?B,H4ljLpdI28Qdgu$NZaSCpq`Dhp0BXU]>*pbe58RIa<&oM]$mubjRQHC^*TnM0c;@T$&4[9U8,-U13-SDUgA2Rf_@l.]
%IQ#YO9EG-,=M+^*W>Up?)9=j:+Bm/s$[0pOE0hkB!0\fP!@bAYnV3(DoXQ7R=E0sJN-I:k/$jI0Q!tTRpLNeGJLY6^OQV!jh<A70
%)jA9#>[%Cn/]j,H_IQ`:.Tl*X@TB%2!9Sg[oF@t+&A9K`[uk/0Vj]H]m"].(^hq%eGZq]pJ7`9g]lq&mS:#a*b)^062t=Gt4?d`>
%I!boC_E&Kdeg3&P?:hG(R-G5#?3h3?"E0?f<DLgM:V)Y_6/B&e8MN:pZ.Gbh-jSqoonsd:NU^?,<S+9Y:O;_gmsb?EC\%n3aksW-
%j#s8q`;+/p.uH*L6O!V^>$/Z(&\p>7M*^6BG?+OHf&#/62A!X#gG[V2&3F+qH4J&#<9.E$[K53mhs%`;HL:[(Vr.48/rP5XiPU0E
%s8MnV3@m3@*VY>kGj*TZJep*9VuQ[erq1d:O8#R-Q`o.`[/2?qr!M&@:V@+-I_EchCnGU`Q`b]u_LD&KrpBa\kPt6?T"O%DdC:fV
%fq6)88qZ'N^]3bPlB1[<VH_*5.q+T^9>eUCnGuS0KS*mQc<WKRYh*SfKr].pg-H79#[\Bf-kMI8opcu\?[M7Z6ssi\1-i#J`Orn]
%\_HbjH`?>:lc$%t4o)`tZ%Vd>nfYt)91:8fpC?7L_%)KA'(upeh9^4VlQ94Y)q!4IZT=eHgLUpCV#)NF5l@5A]0O<Cg=[LU-ZMTp
%%mLneDS4il]'Ob9lVUHmnF%m\&$0<J]+P'H/"$_k(^GQWV/0U-qfGM4NoFOB+>/_0EQU9AT^pVg<l^oO>9GtS0Dl[SmP88BZTLA7
%%e;:<c3m>:A8lA"*_)SVhfAId)j5=aYBIPEHN!/<cT^reXD-0C.V-O"9HWlr&T.N=o-'X!jEc>1[J4^r`*.7K3`d!EZ/b8`:mu'Y
%O1R^J]A_`&.*_q+kO*<pV*U0W)j'L$^#4%lm5(oc4o=*N06'4\`,Q-]&cZUc)LaZc_B4,]K+4s8%6E-mm6A46dm_V(7RV5P-J;9A
%cH=:`$q0MY#UM4+Y0..UF)mmYcanc,S$K_FTU]V=kcT^.(%_-gG73a(eZR)5msdLdl$%T&NI)_>J*eG0Bk,^3U2oG%d2<b`0s<T'
%'V;jVfhMX4)F^V[Th^742_OD>duY+K,aSY)6pGQc/o&].(OkG_k;!ktKjJ?hW+KKqd:n%<<@kVnn@bTMKit',3edbZAj?;=s0qA(
%d]*ET[h7l6;pd&fYc36XC6I7"ZkL0go1K\A9Huu0D*OLsNF`&iEsD&c",YUof#JJ=H5A.M5EdXe3%iYGkJ-tNC,os.f<LSRX3Y0F
%!k)<qEE,I;Cd/]cKTC/E"&;I]BaZ]55skQD_e6+TMB7<UrpqkG;b8*c4@0?M39g7C\cqg`p85bJiJKs=%UJl]L:\]tUT/EO]kcD0
%;/42OO[C3G6F)cWPranVEFYDp'2d+jTlU&b'Stt0\GqR+)3ppqIQG^f*Li_$dM!;^98tF.nJEg?j%U\J1J)4SP&-G#%q@7jkE.l4
%9bC;4Yd<R2UWMM.6`QBois^A`"].[tZ3\h"Efj7mf<+b8d"N1Q6GdAq8.$9=e':TJjdVl%c$65]*ln(g0D,0TAQ#iiWQQg>f_kN[
%,meA4:`&NP#u$N![@f/+oMg#jE[>BNW9*90PCE*=/t]Y5l#..T=t#S*Yf9;anu7#g8>V"53(K`:X'8LgV;.Lm_h1pWg57+0p<M@0
%;R(tp<!QA1Ai)XEUH^h89uMTHIc9$FS&PE=CWa+?%)qjtM0QIZ1W;Wjcf79S*!1E3A(6D9ipI`0.rUQ/ZP#hLC=*YZo(Gd+HZ25i
%*rr0$apCB!=cP0GjQ8VBf3V13Pnb(`]B/u8P4s67oN[+@7YcadMt^n<QNVE4CqOS-jMkkj$_>nn_n>-uYCGD&?^%>^D*=S(D0WFq
%DSM7ZT%\mEJS:39!(r'eW@*_.#:u+I$+8uuRMM`;cXo`'(I7.oF;"r1ki_S07\h-X7uVO*8,]T+DMH(ZU-$`9ML(OZ];mkeM3Pk&
%.#TrZG&2PZ"Krq.`jLmE/)^e/1VQtUU3`=Ums!6ncs!(/OB\@TE./8D-P6Js2b4^3f#]QZkf%gpIW7DMr$5JM)=-XsJq0'kk?&T-
%TqJl3OkjWO6ENB>Ebbf@=9=[DL'j3\SjsE!///sQ`H9eU&tGNU:XHaG4U:4%;Rk'1pnt;bY;e0\'VkH;`f`>X5gO/3mneF;*c6u*
%Q3E[O7_<_<d0NGcXc8T8%C9L\B;1mn698lZ6<Xk,$JiH?'eW1^I!CQ`VS/92Hp>L!>3UiG7as@j1't*tB,`_XZkXh:7V$pICTgaq
%$:F7tlt.%9.<E[TcT8^oQ'PqW'05u;>Cof3Bo/&uP6D_t4giV2XhWCX.[n:f92WUQ[WW>92a44Ba$tR04(#<J*qf#rWh-YN\8Xo#
%cBgHnNX;%PpBV3\ktAY,N-M,,%1[uF$.D^F<UQ*Qrm%<kHGAMp@[lN!GsYn1dqg0.M1fi8s2AuB8BX4l`SXtb@<s2`C<j*RL5NZb
%j($8Y*'Fm-0>f4ER&VT[XqF^dkJN$h%d8!al,dc<nGcR6/j4@taVEYC0`Q\CD%()SR9B>hb(L069Yc6C@pi>h5SLF(;I`6U%K:_;
%G>@5dgO3d6,[5,1`su/#Xib9e`//QlpCSK0EI<1jRA\TUE=_VTnh0M!ZJJKWf!X4g"EM')pcC*1'JK.ds.c`:?YDnU4D9uaM:_QZ
%&qV1S@&7seAVE:>`Ih)5<Z0U9^7Y*UlT^MAR=q$-=-%b-hB2T%6Tq_Gh.MdGWOuel*`V/VcTm:O`@!uU*3M[2%<9dGbJp2#pfU2u
%iO4IR-m!!V;M)JTB*[FW('t-/`lu/!35gAb\\#2RV&2^Hoa<0k6-tb4CaTAoPtQdWG@b@AA!K&V$q9qh5aXC#^f>68_n$hm_PUhr
%N2u-@4R(Mm10@kqYIRt%>pk-l0h2*[PVuuIVQ\<B\@NX:S6Y+r>a]Os<"u`YIJobX4lq4o>["E?/ZVN\_0dNW:Yco)I\D8=E-Sfl
%jT'E+:+qB;@89!sF-%3?=<Y\'0&LXUj`Gng73:G3>#39A_4m/,PljaMcFI<!B[a;b,IiYjY*<!+^f(obOTe`Z:o!et]aU@n6Zl/"
%.D&(?C(ec7p(CHW%JFML'=C3WQ$XoTS`U<Mc"X;Qla.e;1(9^Xff9UKOu*\l/$N&2&M;;/L]'Y/`e'E1>Y4<:qmNj]b@+k0`!GHW
%'X;QaqR8WtBGVjR*APcA9q\[iTptgofkOD&=r$ZFjRV`Bb,"LPDL;%ja9+VmQWW?T<^&Kr,P8F/WoZr$Og#<DG0E$mfWVXB(TNfU
%F9\`^is+MECObL'Q;ptO3<TqA7A'X6V6iO$5O9jc^a%&HqQZc2T)tP*P)7qnNh9V&E]40\4d,94dc=M</&Ieb&.Y2X!Mt<Ae4Pfb
%8=E'X5"1dcB)H*KGp#!M%4pAA8behYU3J8i(MG^gO[E2TM!T8Z\?*S&W^t.DV_(,&6a/a45E;b\/asSEE!a^XBYE0X5i1SG=15QZ
%>-Wn$Z70NED/%*#lV2C\Tc8)o/CKM6/Ah<W9k>jBLctd7>e-(ciWi"9EBt*F/gAk/'^uAcT%%%A3(b/Ko^m:Mk->k>:Ql2W_D9,e
%7k&6p2kD0#[!Zs:DBVp"(M=.i*_$MoX3rCmI`/PtW./..S7n!^!>b'+ki,I7)Q/P!c@$r70p^VKr>'k/&"a$c7e0i[)dUqAd)T_a
%;q,d@fJYlVQ>qL]Z#6EI/SN3>8+%P?>*#bCg)1),?T-:9QL09M^iOgDV\Jd+QB.Y*c)9cY[q6K<+N'@N*.-J/BFUL%RZ\'rKKnU"
%GX[Pmb?<gr/V(#K;]]qRSGtkqCCe86g"0]2MYduM3!l2R`cBXT5..*1<6?jAO4+38qBkLQrMYe\_O.e(lm0/0_hV^P>oQ#lMU1N`
%]BT3j)Hp0[*3F0+bf,I=VlcHsCS36!mOh(K]_&=CDDBt"7%p2Q4;p6B'=I"9UDYm3LdiOGU>Wc(b#ef9W5Xm$j(8N8@HOi3nO]s'
%]r+PL`k=7^Eb.B[#(<4&7#7&I=g2-+!8`_r\II@p;gQ2uN84J"7tGe)Ln[o-PV)j-l$eP><l]/7*R[\Q^RB49*7W-iq&`Y.h5nB!
%KqW#aTed%]/H-i/g=CS?^+e.Qr]A/>rN&UoA0LN?jo@X.p%!&V^^FAIZl4f7^r.W7Gp80p&Z;OB0\K=AI0KfRdeEI(j-SBN>h:k1
%JGet/Z!k\S8ocFe0]&Qq^ho/c($"s`iOZ,D/Rp67H]@]k<I[`aj,;rX\"SI6EY;14MNF8<';W_+X&9IakElG[&bMAB@G_-i.Z&/e
%#875c<d/bWCY*?XQH9p?kKA!/T1qG8'R[`\:4-^#4"Dhe]OHTK?cs82Q[&-BQ@9r6Vg'$;k[Xa45O*k]X@EbSe>$'P2^GgXU5i&`
%S([#R*Q(_ccRD.#,a2L&]cDY*T;!a$Z;sPJ$=mE^re2gb.u)fFZ_j4s_)S6R/G2[]m':dBZpr!'UNBSCao\SV9'8r$@#C!"^<&kT
%MoR)KnpfepU\K*PRFqq/5hT..aG6$uM+hC8Vt.9Tc$VQQdc!L5r`YQs]eJ,5`;(hPB,81"0HS69A]+u&_+I!X>$@GkHph@-gXV)n
%ME8^@24XPW'^'^'oD<R<Q#C1DR6<#/YnW)3-Ki90$qb\+jiqFf,eWZ7^%A/fCIEMi<dra)YAPP`;]3)7r4MG'hO;LtOKPZH2C`Yq
%J,r0?6%@Fh$q;n9Tu9M9];uKA!sHEdl86k`)]nK-0Csi!r_$ZbTQF,HUkHo/;8Hr`-Y%1aaD@m!2Z)N=FZJn9H(^nZM,_d28$?]s
%Ulali0qCb0?(`W(+sSHF'A^t8#XA!)E5@bQeq;K[dp^fhHu"b"8HME)+3E=Ka7SM@So@qaBkL,0(N&-s@"4]lH;dZIT$p0!$q_gu
%:E"]Cp"V!-c=T^2?"uHpeWbt8?RU!j5J*b+%M%Yh(A!e)2Mb4j;3f-.9p#(;<2gmHO\4W/P\l/OeSoR?S4IYlB2/V?e*a<f2q^.t
%=]4ta-7K.+2eB"e`V&HZ8;W0Khe\WIeB/XFVRY!')@6*!%ch5:SEKbDoq'joRZAMB2:io9aTSHeY8Lu[OH,ia^/&NjG0@M3F?Ef^
%i>DBl8JuYB=8d6qF2)S+M(8CMjmKcY[gak:,mrpql)[XFKN]/1d%s.\8I<@takDV.H5$`h&Z2%P/mW='XDfN,-PUXUpGsjIo_L_S
%oD0mu:DSJuUBC<J`daL':?=g=5,iqq609O"o4]A**/V/d98D/1"//(L9S"fA"K>B*,1@=UON/5hWs%7NAE.&OV.TG4%118H2S==S
%%lV[^4[90uE?7Ai6L@M,iA[qk7O^nW?!XSJ!#EJ6R8a-f(dcC9p`LJGG1kLD>%S:).'c1K=i5GY-/+=p=oW1`oB'=BRU=8Qa$+[`
%rtBn`&,YBc&-AdS)UhT_HZ2`ICinJ<$PB#P6()`@?oYl#o<g,njHKl/C?7VGe95VKN\'UN?hf-&TO0gskMc?@8kC@l,qjs.aL8CR
%V8j"2"HCdWTU.rR>em%3dHflu*^L(1PU5W<*!aJHE&-h#!d,6m]._`ip'cJ;,UjD,b+ND(73G_3F[7B9.H4Eg)219h:o3dVa"Z2+
%!rWI=Y4XL<jYO)'N76IJ"'j]p/)'LMNuA`tD=*<.FUn;`R;2Ut1U0Hk>rCs=6!i;;b4<L]Tk`2>G12Bl!H%OQN#7V9`VF@*4$`:W
%VC`u:<'JY_^NjAnjju+B"_<5ho:+Kt?'.q4q96\;;4HfA-#T<L2c%#W./rF-B9:`i$<J/YS@bPP&a,H`'m'hH&#2nue1hG+=Xu9R
%4/57?^eq6!"H$%(`<g0/R2H-`j)?m.jBfQ.*>7B_V;]^J5)eJC=XFj;Tr8FXM>+sP8RBI+>3C>R4uV=q?[5'4`o&B(aI"!@fL?.0
%HG$9M>qd+LL3%\G2%Q[;*^*Rj'I\BKq*q['HICS#d7qm5F%##e(`<>\5Y!^S;3K@aD]qDN[UfF@-b:Mr<2Cp!E\uHY5jFC5C)`(A
%a0<>i_3;H#"n9A[#I8FI3o]g&neg["'1<WFJ>PTfPu585SHk/Lf\NnMcU7X!/?r)@1VuDejZDK^,CtHCP0(L;jAhF\bi)4NfGn(G
%Y_4P=QQ7q7#@KPGn.'r4F?-B1nf;I_nr6JLN#LDt=AG"aK7&HD-cH[[."e##_KF%sQ0@eG>oi2Pb@*t`^LcjiAp:EW(eY*J8s0IQ
%>n2S,1i9?N"Uq^"0IgcnaIo!=KX1/k):deX1P$Oj#Wk3s7MF!$lSq-E]'K82-]Pl6D:&>t\qlmL^"_".#-"r\c.mLF(CU<T/7L6f
%5F7ViP*)t#T+alTma7MaJ+TGR?@;r.dts[i)];:k*EF"coOoJ:j%dP@#/T=;2\r:Z9-%-gkWpLP#h@m>8b(4TYO)-o)33XXC=T+&
%&?=8%lr>#n\Elc?^nL'<T7SAUbu5?=o@SGn@`"k]J;8CG_`kCfR3+9a5F-%0jt`O9?]=<l$m9NW1>bGD<S?G@$l]\30A@Cud521A
%aPto\i6BHo=;K"eWF[%L`0A;[;%7hD[-"mU`XfZ?d?jb#LY1_`JY'_MhNK1C=H:*K"7$77<r"Csd<+j_n>ih!HoLt!*R09l86hb`
%G2H*I^C#[t49;Rsgd^nW\K;$C3"3rMb;+sAT&[,T9=8\Yfgn:$JL3h0=NZGl'4[,B>R0rHJ4<9Q/V`'@%;K&;PdoJ%!3OgnhcTVA
%KK#b*^2N>!(Qq6ZG;I$2+u%$EeB:8=.][Yr\*s9%pg?&\c"G=;U$mp<k![GWN=s?3.&MobS@$IIYY[&>::c+nIE\)0Br<jce\i1&
%^3OrRJ/Wn(ILn.n3%=LW\SjkDb!s[[>bl,@!m);tFstRT>]DUtqu`+O*'X@,%_@..)c4Hi;D,-L'$%rCfbBiI,*1"VL2%s4nXF$7
%T8\@P6;qrOCPa9X'hmL(d*136$CHC^<uFR^9TF>"5.!X!H.W0@+@c8bN,,d.mEt8cm<68/T'(<<"2k9+IR!@g^BkI%58Z^">$T2r
%]+:iN"Eon#$a)k@L4c9YiZ0O+gS+tXdk.)r?7-r?4Gn46oCor<MbddOs-1nl'nM9Q==,BY>tBjIRc,VCh6gp?F6'#o9Q?DO,iP"6
%SZg2B>K]*PV]qm>*I&+b-fd8:-$$_<]gUErW7VSH_$D%UjI3n!qS3E(S_GKT't&c9mc_$MfjJNo*%#;;nMFdfh^\S+c5-CNcDRgc
%:kuq7?\R)\O`c*c86raWB0G9<)O3Do0Td@kSogn<(cFmr=-BDNEMA^3R(Bua[sHZ6qp==/+D0&YFt.f-cn_6ee?[TSZ*[t+CiX>\
%)^dp2@fEj-pG&1?RjEJf+R[Vbh4WP<B:S3cC@Od5,9d+r,U&@)e<-[4@C`V\M2:Z3_f!T?*L2%[!I0QYW#k1`.c7J?e<E57\lhfZ
%4.%^;?qK#f:#F&RW.YTn+H>#siVLGF4-*e'S1sQo1UPCg!fNh%%Bm>-%XTV3pTU/k:'GtPbIT[R/(Eo'!b[!_Q4f6R,/X3K2&s%Z
%h`:%=-pkc&gMTHq"Z5qoGE#nF5E)B!V6R9FrIO'Z0E!@Zk_g=FE*8uG]B8JEe6G(,6Dl=Yje^XffJk8J6`oID=b%HkfPUm02PPF5
%\JP72%!bE.aRbo_ROrdhiK?rXELDPa=(G"h*)Toe"W):O7VODs.RbI*i!c07*4?LW)4#hphT_8rQhW[uQ=tE<.9SI?_h'p:n154t
%d5<AU3Kp:`iL6lcppD#O1l\U``N+p-[d?+![o@<2;PLUZ_R<rO$1D.5ht4j^T6\Lmm85heQ%@9/d^9\=`2@(=Kq's\^9fk`<kQcA
%]().(mKj#2?\C/2OoS!^V\(eseq34CRI`2bO3=+VA+CZVWr\PHe"5Y*.TY0MA"\PtYH?C6)G6k.'&Ki_,dV%A%EGaBPFal1ob<?(
%%:Ur>d5YmZ2E,:YiuEDG*-iLdZ-VtbW+JuaX;_6RUEL6;Hth4"(KO$kY8Y%(]j+enpNu-Req#9mdQ$jk[JXcU>k6Z`T*$LTb6B3t
%e<@bm<99bL6isP6"Lm>KK?S7bFO2@m2V\o4FZ7FNN7tRm.';U;;.I>;3IlX!oa[`0Vc&EbG,jc)9Kmq1.;L4@rD&^0jP>RWhl0M2
%_oX9RQYF+_>[t"9E#fH%H(YV(r+>H'J;2qfD/^c2"D;4Q&1T"?!b;kXTn"4R@>+Dr0:'*!0%2_)VYaN5hn9\j[n,CYU)\_]BY`fo
%Sr)IS-*F<-K$[q_p0YGdFJO>J)c(Vo'gtZI,hEA^mVX:Ki8n.qgu0SX:uc^5]_bDZb_5b4[)?A8[DO*@nMYCjaCQ<D11%(@\&%<,
%kR8F\LI-`Y0Ubt=gJbM=19;g9[N+Md\E%8I*3q<?kK'=&%H(#[0"Pshhp`9C*SY]G@@8mi34@Cn;=@^_*q(&-nAQ6K57#OFm;9D*
%n`iV.,:bgmP+(ptpm\GV?,hJK"K>e[EcMqF,*o5GVppVFpme-m7c^3P63W<f@uRXr[*Cqllb6mA5d28Mm)QF_15/>\7,gdG@MX#*
%aau3Fgc4j:5If!l6Bdq+hV"IrT^RBrin5BZ\iWCZ-?<qj__=!i.oNHRK,k8VObRQ7"Pl!a&Eh">713$#Q_!-(PT_HoVU\&"gdd2?
%@fmk(fCX\-mc>oJ:fW%.iY$5n7#mt+GhC-J'>q:ai"J%n)JGj[*t=\,\/h[&FjHpQ(P(+ZU5u,Zn?igt8#4ncl4Cs=(ltKANAO#9
%IZA^AH'nPg?%kJJ1eVA347&Q0h/!cn$EMdeB]e(+GS1j5-$H<i4WB<bC@t,bb4u1n#AUaAW"B9];MeRUCka4fQr]S+$'hFRS9cMQ
%8q"U'H4.M#JHf'2CP<QQKKrAPdX)9j2E*Ge&=#s&X$)>s-=4IMD*J.Y]5Z&DpW]?0rqeqZoCr:Sc$/&noDS8Fs3n`1qm>-:?r3AE
%<armiRC2;/,4r2iU*l<Ek\5-rk?p9O$4DH(X`m,$*L8Vf?o5HX/KEZH*.)=glDYMW,M39fLn!:Nb2VtFLDc<V3pVui*qfKOi5:9m
%4_;FA7SQg^QWuGH7WN='X:Jt"gW"L$(7KDD6j+'?l6NHMG,og"MSr0uPHTPA5(g15.0AP4S'U/)]h`8&i65HMabDm["EtXTQpMD(
%O+hV;-K9+n2m_E^224;j&ucLdm=sX3OqmH`bB9$L3HYgI"N/eT\e/L&!*;b(8Pg!)M5W`[;]UAk:$*=]E+YZkq#5l+$C\0Z=:+8,
%Y,.fplgWMKd'u$JoT?)uULHGPKfhc7"XC7YHco'-f,%_o1=_B#X#-DAC)r_r/n8>IeUeM%a"M7N`MTa$E+Mu;;mBtsc'$0Y`Y=SH
%f/a*5!',"a9`;mY-O0eCR9fgQdR%5^%)Y?,^S$Vi#1fR%M=\Aq"jd_+i!^1>q@5qoF\UUR>0c%ad3t#%3,o&n"'3%JDQ!dlqUe;[
%*NQbe;'9U*;,7Bs\Qg#W<7N4&.Pj\DCMhf_*'dE>Wt:MPR//E@&;a.)/<bnXi&bm9H:F0rXt!`[Qtj8*M"OH>]4J*WG40$)!m>[0
%Mi4PC(EuPRJird_FRcAA$"/Hj-#>kaSm`Yh;6g$UU;^8mRMm)-ITPi*J9R3=/0d>>"o$A7^@eM6*jk3rp`#IhHh7oM_RFcbMP9%R
%*&.O:pY+KT;$5S\7)L8V6O=`5Z4)l?af(]`,N(OOIFEN!;1^GMOXd%g3\,^_!i2</nFg.ZA8f+Rj4tKg2De,rT@9<5'SART\9;G:
%.jE5GnMpm35Q[BZ?:C<uUhUY<SdWR]Q&/V+*"7FE+DGpl$50^+NLQo0/hfX3M\*f.W<CDu5s:&!.SOoM0@9Go\"c^.1-+dM%(oR1
%KJ9,cK(0=\30h9XCY3g_1/_+OSLIW4<Olh4WjShc53FPE[>6?!GZ40Pl#c-#KVbQQCYTr#Jd7,L\Y9Q)]'4,pj!le8b2+6dK%/nM
%1l\Uf>Ed-01t!Wl86OQs%B7JF;Jp>9G'c/QN!kc##j.:2\5qL2;KuO-5-YL*4,FF:Up;R"D\%8K!?=pO7UDaa&C,p'$A:=mT"uW*
%7,/#AlL\pcK@[h,SH`=kQ%[L:R#?@\PA_B%q'VsFhc$lhFfARh]0JUUeW-6(XiU\MGG]2?cfUV#;lcDp*C0aCAmm`cCq'RlMF1^J
%o<_-39a(f[KZoWZd[EV[q*st`NB\C`7$9$oC\T:kJY,?Qgqi[6W4TmNg3$1C`@6q,fZj)c`!L<nhR'DU;*@Pd\;Nt<*q0sdcMg-2
%S@sPO.sH6,;,]GrVCh>I5__*`hZeJSkL$M"UkZ<`:V23r;tI7Z-QbXs3-PJ4iMqZI_FEOmFh3e_#JgJm'2`/*:6.!PHdR,`R`%$8
%H&d-;jHrUS:h&dXnb.r"UVif")f9YeEDk?AF?(\8a<L#\Bbr:N+rq?`c4\WA`>[NA?R2oRk:Xq+BiEeZh(^AhM`LNF7=5P<fq=tL
%`aVg9JuosM]O*!."!AR4ifD6ELVrufpj\IZ[fXH^'QOm67p0WGEb3H]_R.d/8'YKOn\9m"crId3J9aHD3*k!W&tU^FctN#aVq"pV
%lFrGZGj7ECVSn\r&tgSOm^(@d$ULL(r[%X-#=3W]pu`u_:5_e,T!IGfajWP?+Q(j@E7C/?TL23K"K8sj_c0oDYM8'FFaccOgam;M
%"-kj]_o]ksc(.,fOaIA6AC.ALna*05.7lTl^UBsu@CV8%_7$F[f7_Kb"@:uNegfp`on,'A?:s*ZrBO<9*[Gn,r*JgG6=F[V%%#:g
%:#1.l.JrX'FM!WZc+]T<C\^6Ec1!:slQ(*q;Y>T/G$BoE/4Ac-,Y%QU*g&'m/GO*5J[Zr/>l.Oeh6uMHhCF)ich%,:QV@#]Z,o=>
%&4EV8opqo9<[7D&?;M;TRO%Hgb>m,n^fnllrEEVTI)b:!okRR)jZ"P>2g(Re8[+1af3\0N$UJHpq0:/@6bEYF1Y]>^dDPb0ArfQK
%WZ5W,(-#cVO'1Jn0h]&4]o4l=SgeG14[oeXb$s^o))GM]>.bWj]jB-34bfonGJi1oN1]3.C4V=mpp_!H\rot9!r)TB.K%W^[iKSP
%VtksC/5\83D:N;(2F8;4i&F>=]3KY4p(12$N-YL1T16A5hji(MB?P2#Amg^nj4u'.;G8YGM'd@aQ;Y[o5Xk'M[8n?h^7t8T.+&rE
%'6#E3hr=l9JCqGPRYdT8Yk%-DTDN'klZsbfptKq/q<!b2qepu\f,$ZaHhI!^?SB;uhu3')X$?R\_nWs8p%.X%pZ!nk]RBJ>LS'%T
%`:N7Yepfj[n`Nugr9%F:IeE&oJ,AP]A)X<.%:=PVm6CU+msk'r#tSA>~>
%AI9_PrivateDataEnd
